##########
Python API
##########

*************
Basic Classes
*************

EOS provides its basic functionality via the main ``eos`` module.


.. autoclass:: eos.Constraints
   :inherited-members:
   :members:

.. autoclass:: eos.Kinematics
   :inherited-members:
   :members:

.. autoclass:: eos.LogLikelihood
   :members:

.. autoclass:: eos.LogPrior
   :members:

.. autoclass:: eos.LogPosterior
   :members:

.. autoclass:: eos.Observable
   :members:

.. autoclass:: eos.Observables
   :inherited-members:
   :members:

.. autoclass:: eos.Options
   :members:

.. autoclass:: eos.Parameter
   :members:

.. autoclass:: eos.Parameters
   :inherited-members:
   :members:

.. autoclass:: eos.QualifiedName
   :members:

.. autoclass:: eos.SignalPDF
   :inherited-members:
   :members:

.. autoclass:: eos.SignalPDFs
   :inherited-members:
   :members:

.. autoclass:: eos.Unit
   :members:


**************
Common Classes
**************

EOS provides common classes for use in statistical analyses via the main ``eos`` module.


.. autoclass:: eos.Analysis
   :members:

   .. _eos-Analysis-prior-descriptions:

   Each prior description is a dictionary with the following mandatory elements:

   * **type** (*str*) -- The type specification of the prior. Must be one of ``uniform``, ``flat``, or ``gaussian``.
   * **parameter** (*str*) -- The name of the parameter for which the prior shall apply.
   * **min** (*float*) -- The lower boundary of the prior's support.
   * **max** (*float*) -- The upper boundary of the prior's support.

   A ``uniform`` or ``flat`` prior does not require any further description. A ``gaussian`` prior requires in addition
   providing the following two elements:

   * **central** (*float*) -- The median value of the parameter.
   * **sigma** (*float*, or *list*, *tuple* of *float*) -- The width of the 68% probability interval. If a list or tuple
     of two numbers is provided, the prior will by a asymmetric but continuous. The two values are then taken to be the
     distance to the lower and upper end of the 68% probability interval.

.. autoclass:: eos.AnalysisFile
   :members:

.. autoclass:: eos.BestFitPoint
   :members:

.. autoclass:: eos.GoodnessOfFit
   :members:

.. autoclass:: eos.ObservableCache
   :members:


.. _api_eos_tasks:

************
Common Tasks
************

In addition to the basic classes, EOS provides functions to carry out often-repeated tasks,
such as finding the mode of a posterior, sampling from a posterior, and similar.
Tasks require a description of the statistical analysis (see :class:`eos.Analysis`) by means
of an analysis file. For a documentation of its format, see :class:`eos.AnalysisFile`.

Tasks store their results in a hierarchy for directories below a user-provided base directory.
This ensures that tasks can readily use results produced by another task.

{% for task in task_names %}
.. autofunction:: eos.{{ task }}

{% endfor %}


**************
Accessing Data
**************

EOS provides access to save and load the various (intermediate) results of analyses via the ``eos.data`` module.


.. autoclass:: eos.data.ImportanceSamples
   :members:

.. autoclass:: eos.data.MarkovChain
   :members:

.. autoclass:: eos.data.MixtureDensity
   :members:

.. autoclass:: eos.data.Mode
   :members:

.. autoclass:: eos.data.PMCSampler
   :members:

.. autoclass:: eos.data.Prediction
   :members:


********
Plotting
********

EOS provides a plotting framework based on `Matplotlib <https://matplotlib.org/>`_.
Plots can readily be created from a Python script, from within a Jupyter notebook,
or in the command line using the ``eos-plot`` script.
For all of these cases a description of the plot is required in the format described below.
For the command-line script ``eos-plot``, the Python dictionary describing the plots must be provided as a YAML file.

.. note::

   Import ``eos.plot`` before you do something like ``import matplotlib.pyplot as plt``,
   because the ``eos.plot`` module sets its default plot style and a matplotlib backend.
   All options (except the backend) can be overwritten by updating ``matplotlib.rcParams[...]``;
   see also the ``matplotlib`` documentation.
   Note that the default settings use LaTeX to create labels and math expressions,
   so for this to work latex needs to be available on your system.

.. autoclass:: eos.plot.Plotter
   :members:

Plot description format
=======================

The input must be formatted as a dictionary containing the keys ``plot`` and ``contents``.
The ``plot`` key must be mapped to a dictionary; it describes the layout of the plot,
including axis labels, positioning of the key, and similar settings.
The ``contents`` key must be mapped to a list; it describes the contents of the plot,
expressed in terms of independent plot items.

.. code-block::

   plot_desc = {
       'plot': {
           'x': { ... },       # description of the x axis
           'y': { ... },       # description of the y axis
           'legend': { ... },  # description of the legend
           ...                 # further layouting options
       },
       'contents': [
           { ... }, # first plot item
           { ... }, # second plot item
       ]
   }
   eos.plot.Plotter(plot_desc, FILENAME).plot()

In the above, ``FILENAME`` is an optional argument naming the file into which the plot shall be placed.
The format is automatically determined based on the file name extension.

Plot Layouting
--------------

By default plots lack any axis labels and units, and any legend.

An axis' description is provided through the following key/value pairs, which can apply equally to the x and y axis:

 * ``label`` (*str*, may contain LaTeX commands) -- The axis' label.
 * ``unit``  (*str*, may contain LaTeX commands) -- The axis' unit, which will be appended to the axis' label in square brackets.
 * ``range`` (*list* or *tuple* of two *float*) -- The tuple of [minimal, maximal] values, which will be displayed along the axis.
 * ``scale`` (*str*) -- Can be either ``linear`` or ``log``.
 * ``scaling_factor`` (*number*) -- The axis' scale by which all tick coordinates will be divided. The scale will *not* be appended to
   the axis' label automatically. Using this argument is not recommended as it prevents automatic axis tick formatting and providing
   the argument below is required.
 * ``format`` (*str*, Python 3 format string) -- The axis' tick label format can be provided and is only in use when ``scale`` is used, to
   avoid a bad string representation of the axis ticks. For example, the user might need to determine the necessary number of digits
   manually. Due to a Matplotlib peculiarity, the format string must always format the variable ``x``. See Matplotlib format strings for
   details.

The legend description presently only includes options for its location:

 * ``location`` (*str*, valid Matplotlib legend location) -- The legend's location within the plot.

Further layouting options are:

 * ``title`` (*str*) -- The plot's title.
 * ``size`` (*tuple of two numbers*) -- The plot's size in x and y directions provided in centimeters.
 * ``axes`` (*str*, ``equal``) -- Enforces equal scaling of the plot's x and y axes, if set.
 * ``grid`` (*str*, either ``major``, ``minor``, or ``both``) -- Enables the plot's gridline, if set.

An example illustrating plot layouting follows:

.. code-block::

   plot_args = {
       'plot': {
           'x': { 'label': r'$q^2$', 'unit': r'$\textnormal{GeV}^2$', 'range': [0.0, 11.60] },
           'y': { 'label': r'$d\mathcal{B}/dq^2$',                    'range': [0.0,  5e-3] },
           'legend': { 'location': 'upper center' },
           'size': [10, 5]
       },
       'contents': [
           ...
       ]
   }

Plot Contents
-------------

Each item in a plot's contents is represented by a dictionary.
Each features the mandatory ``type`` key and more type-specific (mandatory or optional) keys.

 * ``type`` (*str*, mandatory) -- The type of the plot item, from one of the following recognized item types:

   .. list-table::
      :widths: auto
      :header-rows: 1

      * - value
        - description
      {% for key, value in plot_types.items() %}
      * - ``{{ key }}``
        - {{ value.oneline }}
      {% endfor %}


All item types recognize the following optional keys:

 * ``name`` (*str*, optional) -- The name of the plot item, for convenience when reporting warnings and errors.

 * ``alpha`` (*float*, between 0.0 and 1.0) -- The opacity of the plot item expressed as an alpha value. 0.0 means completely transparent,
   1.0 means completely opaque.

 * ``color`` (*str*, containing any valid Matplotlib color specification) -- The color of the plot item.
   Defaults to one of the colors in the Matplotlib default color cycler.

 * ``label`` (*str*, may contain LaTeX commands) -- The label that appears in the plot's legend for this plot item.

 * ``style`` (*str*, containing any valid Matplotlib style specification) -- The style of the plot item.


{% for key, value in plot_types.items() %}
{% if value.content | length %}
.. _{{ key }}:

{{ value.content }}

{% endif %}
{% endfor %}


****************
Plotting Classes
****************

.. note::

   Import :py:mod:`eos.figure` before you do something like ``import matplotlib.pyplot as plt``,
   because the :py:mod:`eos.figure` module modified the default plot style and the matplotlib backend.
   All options (except the backend) can be overwritten by updating ``matplotlib.rcParams[...]``;
   see also the `matplotlib <https://matplotlib.org/>`_ documentation.
   Note that the default settings use LaTeX to create labels and math expressions,
   so for this to work latex needs to be available on your system.


EOS also provides a new plotting framework with a different interface, which will replace
the existing framework as soon as it is feature complete. Within the new framework, Figures
are created using the :py:class:`eos.figure.FigureFactory` class, which returns an object
of a class descended by :py:class:`eos.figure.Figure`. The figure is responsible for creating
and managing the `matplotlib <https://matplotlib.org/>`_ figure object. It also creates the
plot or plots that are contained in the figure as objects of classes descended from
:py:class:`eos.figure.plot.Plot`. These objects manage the axes of the figure and
the individual plot items that are contained in the plot. The actual contents are created using
the :py:class:`eos.figure.ItemFactory` class, which returns an object of a class descended from
:py:class:`eos.figure.items.Item`. The item is responsible for creating the actual
plot item, such as the curve of an EOS observable, a scatter plot of parameters, a histogram
or a kernel density estimate, to name some of the options.


`Figure` and Related Classes
============================


.. autoclass:: eos.figure.Figure
   :members:

   .. note::

      The :py:class:`eos.figure.plot.Plot` class is the base class for all plot items.
      It is not intended to be used directly. To create a a concrete plot, use the :class:`PlotFactory <eos.figure.PlotFactory>` class.


.. autoclass:: eos.figure.FigureFactory
   :members:

   The list of available figure types is as follows:


   .. list-table::
      :widths: auto
      :header-rows: 1

      * - figure type
        - Python class
        - description
      {% for key, class, description in figure_figure_types %}
      * - ``{{ key }}``
        - :py:class:`eos.figure.{{ class }}`
        - {{ description }}
      {% endfor %}

{% for _, class, _ in figure_figure_types %}
.. autoclass:: eos.figure.{{ class }}
   :members:

{% endfor %}


.. autoclass:: eos.figure.Inset
   :members:


`Plot` and Related Classes
==========================


.. autoclass:: eos.figure.Plot
   :members:

   .. note::

      The :py:class:`eos.figure.Plot` class is the base class for all plot items.
      It is not intended to be used directly. To create a a concrete plot, use the :class:`PlotFactory <eos.figure.PlotFactory>` class.


.. autoclass:: eos.figure.PlotFactory
   :members:


   The list of available plot types is as follows:

   .. list-table::
      :widths: auto
      :header-rows: 1

      * - plot type
        - Python class
        - description
      {% for key, class, description in figure_plot_types %}
      * - ``{{ key }}``
        - :py:class:`eos.figure.{{ class }}`
        - {{ description }}
      {% endfor %}


{% for _, class, _ in figure_plot_types %}
.. autoclass:: eos.figure.{{ class }}
   :members:

{% endfor %}


.. autoclass:: eos.figure.Grid
   :members:


.. autoclass:: eos.figure.Legend
   :members:


.. autoclass:: eos.figure.XAxis
   :members:


.. autoclass:: eos.figure.XTicks
   :members:


.. autoclass:: eos.figure.YAxis
   :members:


.. autoclass:: eos.figure.YTicks


`Item` and Related Classes
==========================


.. autoclass:: eos.figure.item.Item
   :members:

   .. note::

      The :py:class:`eos.figure.item.Item` class is the base class for all plot items.
      It is not intended to be used directly. To create a a concrete plot item, use the :class:`ItemFactory <eos.figure.ItemFactory>` class.


.. autoclass:: eos.figure.item.ItemFactory
   :members:

   The list of available item types is as follows:


   .. list-table::
      :widths: auto
      :header-rows: 1

      * - item type
        - Python class
        - description
      {% for key, class, description in figure_item_types %}
      * - ``{{ key }}``
        - :py:class:`{{ class }}`
        - {{ description }}
      {% endfor %}


{% for _, class, _ in figure_item_types %}
.. autoclass:: eos.figure.item.{{ class }}
   :members:

{% endfor %}


Utility Classes
===============


.. autoclass:: eos.figure.DataFile
   :members:


.. autoclass:: eos.figure.Watermark
   :members:
