/* vim: set sw=4 sts=4 et foldmethod=marker foldmarker={{{,}}} : */

/*
 * Copyright (c) 2018-2025 Danny van Dyk
 * Copyright (c) 2018      Nico Gubernari
 * Copyright (c) 2018      Ahmet Kokulu
 *
 * This file is part of the EOS project. EOS is free software;
 * you can redistribute it and/or modify it under the terms of the GNU General
 * Public License version 2, as published by the Free Software Foundation.
 *
 * EOS is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA  02111-1307  USA
 */

#ifndef EOS_GUARD_EOS_FORM_FACTORS_ANALYTIC_B_TO_V_LCSR_IMPL_HH
#define EOS_GUARD_EOS_FORM_FACTORS_ANALYTIC_B_TO_V_LCSR_IMPL_HH 1

#include <eos/form-factors/analytic-b-to-v-lcsr.hh>
#include <eos/form-factors/heavy-meson-lcdas.hh>
#include <eos/utils/exception.hh>
#include <eos/maths/integrate-impl.hh>
#include <eos/maths/power-of.hh>
#include <eos/utils/kinematic.hh>
#include <eos/models/model.hh>
#include <eos/utils/options-impl.hh>
#include <eos/utils/private_implementation_pattern-impl.hh>
#include <eos/utils/qcd.hh>
#include <eos/utils/stringify.hh>

#include <functional>
#include <iostream>
#include <memory>

#include <boost/predef.h>

#if BOOST_COMP_GNUC
#  pragma GCC optimize("no-var-tracking")
#endif

namespace eos
{
    template <typename Process_>
    struct Implementation<AnalyticFormFactorBToVLCSR<Process_>>
    {
        std::shared_ptr<Model> model;

        // B-meson parameters
        UsedParameter m_B;
        UsedParameter f_B;

        // final state meson parameters
        UsedParameter m_V;
        UsedParameter f_V;

        // sum rule parameters
        UsedParameter s0_0_A1;
        UsedParameter s0_1_A1;
        UsedParameter s0_0_A2;
        UsedParameter s0_1_A2;
        UsedParameter s0_0_A30;
        UsedParameter s0_1_A30;
        UsedParameter s0_0_V;
        UsedParameter s0_1_V;
        UsedParameter s0_0_T1;
        UsedParameter s0_1_T1;
        UsedParameter s0_0_T23A;
        UsedParameter s0_1_T23A;
        UsedParameter s0_0_T23B;
        UsedParameter s0_1_T23B;
        UsedParameter M2;

        // properties of the virtual quark in the sum rule's correlator
        std::function<double ()> m_v;

        // renormalization scale
        UsedParameter mu;

        std::shared_ptr<HeavyMesonLCDAs> b_lcdas;

        // switches to enable/disable certain contributions
        SwitchOption opt_2pt;
        SwitchOption opt_3pt;
        double switch_2pt_phi;
        double switch_2pt_g;
        double switch_3pt;

        // switch to select the QHD matching method (fully dispersive representation vs Borel transformation)
        SwitchOption opt_method;
        std::function<double (const Implementation *, const double &, const double &)> integrand_a1_2pt;
        std::function<double (const Implementation *, const double &, const double &)> integrand_a2_2pt;
        std::function<double (const Implementation *, const double &, const double &)> integrand_a30_2pt;
        std::function<double (const Implementation *, const double &, const double &)> integrand_v_2pt;
        std::function<double (const Implementation *, const double &, const double &)> integrand_t1_2pt;
        std::function<double (const Implementation *, const double &, const double &)> integrand_t23A_2pt;
        std::function<double (const Implementation *, const double &, const double &)> integrand_t23B_2pt;
        bool switch_borel;

        static const std::vector<OptionSpecification> options;

        Implementation(const Parameters & p, const Options & o, ParameterUser & u) :
            model(Model::make("SM", p, o)),
            m_B(p[Process_::m_B], u),
            f_B(p[Process_::f_B], u),
            m_V(p[stringify(Process_::m_V)], u),
            f_V(p[stringify(Process_::f_V)], u),
            s0_0_A1(p[stringify(Process_::B) + "->" + stringify(Process_::V) + "::s_0^A1,0@B-LCSR"], u),
            s0_1_A1(p[stringify(Process_::B) + "->" + stringify(Process_::V) + "::s_0^A1,1@B-LCSR"], u),
            s0_0_A2(p[stringify(Process_::B) + "->" + stringify(Process_::V) + "::s_0^A2,0@B-LCSR"], u),
            s0_1_A2(p[stringify(Process_::B) + "->" + stringify(Process_::V) + "::s_0^A2,1@B-LCSR"], u),
            s0_0_A30(p[stringify(Process_::B) + "->" + stringify(Process_::V) + "::s_0^A30,0@B-LCSR"], u),
            s0_1_A30(p[stringify(Process_::B) + "->" + stringify(Process_::V) + "::s_0^A30,1@B-LCSR"], u),
            s0_0_V(p[stringify(Process_::B) + "->" + stringify(Process_::V) + "::s_0^V,0@B-LCSR"], u),
            s0_1_V(p[stringify(Process_::B) + "->" + stringify(Process_::V) + "::s_0^V,1@B-LCSR"], u),
            s0_0_T1(p[stringify(Process_::B) + "->" + stringify(Process_::V) + "::s_0^T1,0@B-LCSR"], u),
            s0_1_T1(p[stringify(Process_::B) + "->" + stringify(Process_::V) + "::s_0^T1,1@B-LCSR"], u),
            s0_0_T23A(p[stringify(Process_::B) + "->" + stringify(Process_::V) + "::s_0^T23A,0@B-LCSR"], u),
            s0_1_T23A(p[stringify(Process_::B) + "->" + stringify(Process_::V) + "::s_0^T23A,1@B-LCSR"], u),
            s0_0_T23B(p[stringify(Process_::B) + "->" + stringify(Process_::V) + "::s_0^T23B,0@B-LCSR"], u),
            s0_1_T23B(p[stringify(Process_::B) + "->" + stringify(Process_::V) + "::s_0^T23B,1@B-LCSR"], u),
            M2(p[stringify(Process_::B) + "->" + stringify(Process_::V) + "::M^2@B-LCSR"], u),
            mu(p[stringify(Process_::B) + "->" + stringify(Process_::V) + "::mu@B-LCSR"], u),
            b_lcdas(HeavyMesonLCDAs::make("exponential", p, o + Options{ { "q"_ok, stringify(Process_::q_s) } })), // operator+ is ordered!
            opt_2pt(o, "2pt"_ok, { "tw2+3", "all", "off" }, "all"),
            opt_3pt(o, "3pt"_ok, { "tw3+4", "all", "off" }, "all"),
            switch_2pt_phi(1.0),
            switch_2pt_g(1.0),
            switch_3pt(1.0),
            opt_method(o, "method"_ok, { "borel", "dispersive" }, "borel"),
            switch_borel(opt_method.value() == "borel")
        {
            u.uses(*b_lcdas);

            switch (Process_::q_v)
            {
                case 'u':
                    m_v = std::bind(&Implementation::m_u, this);
                    break;

                case 'd':
                    m_v = std::bind(&Implementation::m_d, this);
                    break;

                case 's':
                    m_v = std::bind(&Implementation::m_s, this);
                    break;

                case 'c':
                    m_v = std::bind(&Implementation::m_c, this);
                    break;

                default:
                    throw InternalError("Unknown quark flavor: '" + stringify(Process_::q_v) + "'");
            }

            // selectively enable/disable two-particle contributions
            if ("off" == opt_2pt.value())
            {
                switch_2pt_phi = 0.0;
                switch_2pt_g   = 0.0;
            }
            else if ("tw2+3" == opt_2pt.value())
            {
                switch_2pt_phi = 1.0;
                switch_2pt_g   = 0.0;
            }

            // selectively enable/disable three-particle contributions
            if ("off" == opt_3pt.value())
            {
                switch_3pt = 0.0;
            }

            // select the apropriate integrand based on method for the QHD matching
            //NOTE for the tensor FFs the disp method is not implemented
            if ("borel" == opt_method.value())
            {
                integrand_a1_2pt   = &Implementation::integrand_A1_2pt_borel;
                integrand_a2_2pt   = &Implementation::integrand_A2_2pt_borel;
                integrand_a30_2pt  = &Implementation::integrand_A30_2pt_borel;
                integrand_v_2pt    = &Implementation::integrand_V_2pt_borel;
                integrand_t1_2pt   = &Implementation::integrand_T1_2pt_borel;
                integrand_t23A_2pt = &Implementation::integrand_T23A_2pt_borel;
                integrand_t23B_2pt = &Implementation::integrand_T23B_2pt_borel;
            }
            else
            {
                integrand_a1_2pt   = &Implementation::integrand_A1_2pt_disp;
                integrand_a2_2pt   = &Implementation::integrand_A2_2pt_disp;
                integrand_a30_2pt  = &Implementation::integrand_A30_2pt_disp;
                integrand_v_2pt    = &Implementation::integrand_V_2pt_disp;
                integrand_t1_2pt   = &Implementation::integrand_T1_2pt_borel;
                integrand_t23A_2pt = &Implementation::integrand_T23A_2pt_borel;
                integrand_t23B_2pt = &Implementation::integrand_T23B_2pt_borel;
            }

            {
                #if 0
                const double sigma = 0.05;
                const double q2    = 0.00;
                //const double I1   = I1_A1_2pt_phi_p(sigma, q2)     + I1_A1_2pt_g_p(sigma, q2);
                //const double I2   = I2_A1_2pt_phi_bar(sigma, q2)   + I2_A1_2pt_g_p(sigma, q2)    + I2_A1_2pt_g_bar(sigma, q2);
                //const double I2d1 = I2d1_A1_2pt_phi_bar(sigma, q2) + I2d1_A1_2pt_g_p(sigma, q2)  + I2d1_A1_2pt_g_bar(sigma, q2);
                //const double I3   = I3_A1_2pt_g_p(sigma, q2)       + I3_A1_2pt_g_bar(sigma, q2);
                //const double I3d1 = I3d1_A1_2pt_g_p(sigma, q2)     + I3d1_A1_2pt_g_bar(sigma, q2);
                //const double I3d2 = I3d2_A1_2pt_g_p(sigma, q2)     + I3d2_A1_2pt_g_bar(sigma, q2);
                //const double I4   = I4_A1_2pt_g_bar(sigma, q2);
                //const double I4d1 = I4d1_A1_2pt_g_bar(sigma, q2);
                //const double I4d2 = I4d2_A1_2pt_g_bar(sigma, q2);
                //const double I4d3 = I4d3_A1_2pt_g_bar(sigma, q2);
                std::cout << "m_v = " << m_v() << std::endl;
                std::cout << "A_1:" << std::endl;
                std::cout << "   I2_phi bar  (sigma = 0.05, q2 = 0) = " << I2_A1_2pt_phi_bar(sigma, q2)   << std::endl;
                std::cout << "   I2d1_phi bar(sigma = 0.05, q2 = 0) = " << I2d1_A1_2pt_phi_bar(sigma, q2) << std::endl;
                std::cout << "   I2_g+       (sigma = 0.05, q2 = 0) = " << I2_A1_2pt_g_p(sigma, q2)   << std::endl;
                std::cout << "   I2d1_g+     (sigma = 0.05, q2 = 0) = " << I2d1_A1_2pt_g_p(sigma, q2) << std::endl;
                std::cout << "   I2_g_bar    (sigma = 0.05, q2 = 0) = " << I2_A1_2pt_g_bar(sigma, q2)   << std::endl;
                std::cout << "   I2d1_g_bar  (sigma = 0.05, q2 = 0) = " << I2d1_A1_2pt_g_bar(sigma, q2) << std::endl;
                #endif
            }
        }

        ~Implementation() = default;

        /* quark masses for the propagating quark */

        double m_u() const
        {
            return model->m_ud_msbar(mu()) / 2.0; // TODO: We might need a dedicated parameter mass::u(2GeV)
        }

        double m_d() const
        {
            return model->m_ud_msbar(mu()) / 2.0; // TODO: We might need a dedicated parameter mass::u(2GeV)
        }

        double m_s() const
        {
            return model->m_s_msbar(mu());
        }

        double m_c() const
        {
            return model->m_c_msbar(mu());
        }

        /* forwarding the LCDAs */
        // {{{
        inline
        double phi_plus(const double & omega) const
        {
            return switch_2pt_phi * b_lcdas->phi_plus(omega);
        }

        inline
        double phi_bar(const double & omega) const
        {
            return switch_2pt_phi * b_lcdas->phi_bar(omega);
        }

        inline
        double phi_bar_d1(const double & omega) const
        {
            return switch_2pt_phi * b_lcdas->phi_bar_d1(omega);
        }

        inline
        double g_plus(const double & omega) const
        {
            return switch_2pt_g * b_lcdas->g_plus(omega);
        }

        inline
        double g_plus_d1(const double & omega) const
        {
            return switch_2pt_g * b_lcdas->g_plus_d1(omega);
        }

        inline
        double g_plus_d2(const double & omega) const
        {
            return switch_2pt_g * b_lcdas->g_plus_d2(omega);
        }

        inline
        double g_bar(const double & omega) const
        {
            return switch_2pt_g * b_lcdas->g_bar(omega);
        }

        inline
        double g_bar_d1(const double & omega) const
        {
            return switch_2pt_g * b_lcdas->g_bar_d1(omega);
        }

        inline
        double g_bar_d2(const double & omega) const
        {
            return switch_2pt_g * b_lcdas->g_bar_d2(omega);
        }

        inline
        double g_bar_d3(const double & omega) const
        {
            return switch_2pt_g * b_lcdas->g_bar_d3(omega);
        }

        inline
        double phi_3(const double omega_1, const double omega_2) const
        {
            return switch_3pt * b_lcdas->phi_3(omega_1, omega_2);
        }

        inline
        double phi_bar_3(const double omega_1, const double omega_2) const
        {
            return switch_3pt * b_lcdas->phi_bar_3(omega_1, omega_2);
        }

        inline
        double phi_bar2_3(const double omega_1, const double omega_2) const
        {
            return switch_3pt * b_lcdas->phi_bar2_3(omega_1, omega_2);
        }

        inline
        double phi_bar_bar_3(const double omega_1, const double omega_2) const
        {
            return switch_3pt * b_lcdas->phi_bar_bar_3(omega_1, omega_2);
        }

        inline
        double phi_4(const double omega_1, const double omega_2) const
        {
            return switch_3pt * b_lcdas->phi_4(omega_1, omega_2);
        }

        inline
        double phi_bar_4(const double omega_1, const double omega_2) const
        {
            return switch_3pt * b_lcdas->phi_bar_4(omega_1, omega_2);
        }

        inline
        double phi_bar2_4(const double omega_1, const double omega_2) const
        {
            return switch_3pt * b_lcdas->phi_bar2_4(omega_1, omega_2);
        }

        inline
        double phi_bar_bar_4(const double omega_1, const double omega_2) const
        {
            return switch_3pt * b_lcdas->phi_bar_bar_4(omega_1, omega_2);
        }

        inline
        double psi_bar_4(const double omega_1, const double omega_2) const
        {
            return switch_3pt * b_lcdas->psi_bar_4(omega_1, omega_2);
        }

        inline
        double psi_bar_bar_4(const double omega_1, const double omega_2) const
        {
            return switch_3pt * b_lcdas->psi_bar_bar_4(omega_1, omega_2);
        }

        inline
        double chi_bar_4(const double omega_1, const double omega_2) const
        {
            return switch_3pt * b_lcdas->chi_bar_4(omega_1, omega_2);
        }

        inline
        double chi_bar_bar_4(const double omega_1, const double omega_2) const
        {
            return switch_3pt * b_lcdas->chi_bar_bar_4(omega_1, omega_2);
        }

        // }}}

        /* auxilliary functions */
        // {{{
        double s(const double & sigma, const double & q2) const
        {
            const double sigmabar = 1.0 - sigma;

            return sigma * power_of<2>(m_B()) + (power_of<2>(m_v()) - sigma * q2) / sigmabar;
        }

        double sigma(const double & s, const double & q2) const
        {
            const double m_B2 = power_of<2>(m_B());
            const double m_v2 = power_of<2>(m_v());

            return (m_B2 - q2 + s - std::sqrt(4.0 * (m_v2 - s) * m_B2 + power_of<2>(m_B2 - q2 + s))) / (2.0 * m_B2);
        }

        double sigma_0(const double & q2, const double & s0_0, const double & s0_1) const
        {
            const double s0 = s0_0 + s0_1 * q2;

            return sigma(s0, q2);
        }
        // }}}

        /* A_1 : 2-particle functions */
        // {{{
        inline
        double I1_A1_2pt_phi_p(const double & sigma, const double & q2) const
        {
            // two-particle contribution to A1 proportional to phi_+

            const double sigmabar = 1.0 - sigma;
            const double m_B2 = power_of<2>(m_B());

            const double C_1 = (q2 - power_of<2>(m_B() * sigmabar + m_v())) / (m_B2 * power_of<2>(sigmabar));

            return C_1 * this->phi_plus(sigma * m_B());
        }

        inline
        double I1_A1_2pt_phi_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A1 proportional to phibar
            const double sigmabar = 1.0 - sigma;
            const double m_B2 = power_of<2>(m_B());

            const double C_1 = -m_v() / (m_B2 * power_of<2>(sigmabar));

            return C_1 * this->phi_bar(sigma * m_B());
        }

        inline
        double I2_A1_2pt_phi_bar(const double & sigma, const double & q2) const
        {
            // two-particle contribution to A1 proportional to phibar
            const double sigmabar = 1.0 - sigma;
            const double m_B2 = power_of<2>(m_B());

            const double C_2 = m_v() * (q2 - power_of<2>(m_B() * sigmabar + m_v())) / (m_B2 * power_of<3>(sigmabar));

            return C_2 * this->phi_bar(sigma * m_B());
        }

        inline
        double I2d1_A1_2pt_phi_bar(const double & sigma, const double & q2) const
        {
            // first derivative of two-particle contribution to A1 proportional to phibar
            const double sigmabar = 1.0 - sigma;
            const double m_B2 = power_of<2>(m_B);
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double C_2   =  m_v * (q2 - power_of<2>(m_B * sigmabar + m_v)) / (m_B * power_of<3>(sigmabar));
            const double C_2d1 = -m_v * (3.0 * (m_v2 - q2) + 4.0 * m_v * m_B * sigmabar + m_B2 * power_of<2>(sigmabar)) / (m_B2 * power_of<4>(sigmabar));

            return C_2 * this->phi_bar_d1(sigma * m_B) + C_2d1 * this->phi_bar(sigma * m_B);
        }

        inline
        double I1_A1_2pt_g_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A1 proportional to g_+

            const double sigmabar = 1.0 - sigma;
            const double m_B2 = power_of<2>(m_B());

            const double C_1 = -4.0 / (m_B2 * power_of<2>(sigmabar));

            return C_1 * this->g_plus(sigma * m_B());
        }


        inline
        double I2_A1_2pt_g_p(const double & sigma, const double & q2) const
        {
            // two-particle contribution to A1 proportional to g_+
            const double sigmabar = 1.0 - sigma;
            const double m_B2 = power_of<2>(m_B);
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double C_2   =  4.0 * (m_v2 + q2 - m_B2 * power_of<2>(sigmabar)) / (m_B2 * power_of<3>(sigmabar));

            return C_2 * this->g_plus(sigma * m_B);
        }

        inline
        double I2d1_A1_2pt_g_p(const double & sigma, const double & q2) const
        {
            // two-particle contribution to A1 proportional to g_+
            const double sigmabar = 1.0 - sigma;
            const double m_B2 = power_of<2>(m_B);
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            // LCDAs
            const double g_plus    = this->g_plus(sigma * m_B);
            const double g_plus_d1 = this->g_plus_d1(sigma * m_B) * m_B;

            const double C_2   =  4.0 * (m_v2 + q2 - m_B2 * power_of<2>(sigmabar)) / (m_B2 * power_of<3>(sigmabar));
            const double C_2d1 =  4.0 * (3.0 * (m_v2 + q2) - m_B2 * power_of<2>(sigmabar)) / (m_B2 * power_of<4>(sigmabar));

            return C_2 * g_plus_d1 + C_2d1 * g_plus;
        }

        inline
        double I3_A1_2pt_g_p(const double & sigma, const double & q2) const
        {
            // two-particle contribution to A1 proportional to g_+
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double m_B2 = power_of<2>(m_B);
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_plus    = this->g_plus(sigma * m_B);

            const double C_3 = 8.0 * m_v2 * (m_B2 * sigmabar2 + 2.0 * m_B * m_v * sigmabar + m_v2 - q2) / (m_B2 * power_of<4>(sigmabar));

            return C_3 * g_plus;
        }

        inline
        double I3d1_A1_2pt_g_p(const double & sigma, const double & q2) const
        {
            // two-particle contribution to A1 proportional to g_+
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double m_B2 = power_of<2>(m_B);
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_plus    = this->g_plus(sigma * m_B);
            const double g_plus_d1 = this->g_plus_d1(sigma * m_B);

            const double C_3   = 8.0 * m_v2 * (m_B2 * sigmabar2 + 2.0 * m_B * m_v * sigmabar + m_v2 - q2) / (m_B * power_of<4>(sigmabar));
            const double C_3d1 = 16.0 * m_v2 * (m_B2 * sigmabar2 + 3.0 * m_B * m_v * sigmabar + 2.0 * m_v2 - 2.0 * q2)/ (m_B2 * power_of<5>(sigmabar));

            return C_3 * g_plus_d1 + C_3d1 * g_plus;
        }

        inline
        double I3d2_A1_2pt_g_p(const double & sigma, const double & q2) const
        {
            // two-particle contribution to A1 proportional to g_+
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double m_B2 = power_of<2>(m_B);
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_plus    = this->g_plus(sigma * m_B);
            const double g_plus_d1 = this->g_plus_d1(sigma * m_B);
            const double g_plus_d2 = this->g_plus_d2(sigma * m_B);

            const double C_3   = 8.0 * m_v2 * (m_B2 * sigmabar2 + 2.0 * m_B * m_v * sigmabar + m_v2 - q2) / ( power_of<4>(sigmabar));
            const double C_3d1 = 32.0 * m_v2 * (m_B2 * sigmabar2 + 3.0 * m_B * m_v * sigmabar + 2.0 * m_v2 - 2.0 * q2)/ (m_B * power_of<5>(sigmabar));
            const double C_3d2 = 8.0 * m_v2 * (6.0 * m_B2 * sigmabar2 + 24.0 * m_B * m_v * sigmabar + 20.0 * m_v2 - 20.0 * q2) / (m_B2 * power_of<6>(sigmabar));

            return C_3 * g_plus_d2 + C_3d1 * g_plus_d1 + C_3d2 * g_plus;
        }

        inline
        double I2_A1_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A1 proportional to gbar
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double m_B = this->m_B()/*, m_B2 = power_of<2>(m_B)*/;

            const double g_bar    = this->g_bar(sigma * m_B);

            const double C_2 = -8.0 / (m_B * sigmabar2);

            return C_2 * g_bar;
        }

        inline
        double I2d1_A1_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A1 proportional to gbar
            const double sigmabar = 1.0 - sigma;

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);

            const double C_2 = -8.0 / (power_of<2>(sigmabar));
            const double C_2d1 = -16.0 / (m_B * power_of<3>(sigmabar));

            return C_2 * g_bar_d1 + C_2d1 * g_bar;
        }

        inline
        double I3_A1_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A1 proportional to gbar
            const double sigmabar = 1.0 - sigma;
            const double m_B2 = power_of<2>(m_B);
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);

            const double C_3 = 8.0 * m_v2 * (2.0 * m_B * sigmabar + 3.0 * m_v )/ (m_B2 * power_of<4>(sigmabar));

            return C_3 * g_bar;
        }

        inline
        double I3d1_A1_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A1 proportional to gbar
            const double sigmabar = 1.0 - sigma;
            const double m_B2 = power_of<2>(m_B);
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);

            const double C_3   = 8.0 * m_v2 * (2.0 * m_B * sigmabar + 3.0 * m_v )/ (m_B * power_of<4>(sigmabar));
            const double C_3d1 = 48.0 * m_v2 * (m_B * sigmabar + 2.0 * m_v )/ (m_B2 * power_of<5>(sigmabar));

            return C_3 * g_bar_d1 + C_3d1 * g_bar;
        }

        inline
        double I3d2_A1_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A1 proportional to gbar
            const double sigmabar = 1.0 - sigma;
            const double m_B2 = power_of<2>(m_B);
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);
            const double g_bar_d2 = this->g_bar_d2(sigma * m_B);

            const double C_3   = 8.0 * m_v2 * (2.0 * m_B * sigmabar + 3.0 * m_v )/ (power_of<4>(sigmabar));
            const double C_3d1 = 96.0 * m_v2 * (m_B * sigmabar + 2.0 * m_v )/ (m_B * power_of<5>(sigmabar));
            const double C_3d2 = 96.0 * m_v2 * (2.0 * m_B * sigmabar + 5.0 * m_v )/ (m_B2 * power_of<6>(sigmabar));

            return C_3 * g_bar_d2 + C_3d1 * g_bar_d1 + C_3d2 * g_bar;
        }

        inline
        double I4_A1_2pt_g_bar(const double & sigma, const double & q2) const
        {
            // two-particle contribution to A1 proportional to gbar
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double m_B2 = power_of<2>(m_B);
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);

            const double C_4 = 24.0 * m_v3 * (m_B2 * sigmabar2 + 2.0 * m_B * m_v * sigmabar + m_v2 - q2)/ (m_B2 * power_of<5>(sigmabar));

            return C_4 * g_bar;
        }

        inline
        double I4d1_A1_2pt_g_bar(const double & sigma, const double & q2) const
        {
            // two-particle contribution to A1 proportional to gbar
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double m_B2 = power_of<2>(m_B);
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);

            const double C_4   = 24.0 * m_v3 * (m_B2 * sigmabar2 + 2.0 * m_B * m_v * sigmabar + m_v2 - q2)/ (m_B * power_of<5>(sigmabar));
            const double C_4d1 = 24.0 * m_v3 * (3.0 * m_B2 * sigmabar2 + 8.0 * m_B * m_v * sigmabar + 5.0 * m_v2 - 5.0 * q2)/ (m_B2 * power_of<6>(sigmabar));

            return C_4 * g_bar_d1 + C_4d1 * g_bar;
        }

        inline
        double I4d2_A1_2pt_g_bar(const double & sigma, const double & q2) const
        {
            // two-particle contribution to A1 proportional to gbar
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double m_B2 = power_of<2>(m_B);
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);
            const double g_bar_d2 = this->g_bar_d2(sigma * m_B);

            const double C_4   = 24.0 * m_v3 * (m_B2 * sigmabar2 + 2.0 * m_B * m_v * sigmabar + m_v2 - q2)/ (power_of<5>(sigmabar));
            const double C_4d1 = 48.0 * m_v3 * (3.0 * m_B2 * sigmabar2 + 8.0 * m_B * m_v * sigmabar + 5.0 * m_v2 - 5.0 * q2)/ (m_B * power_of<6>(sigmabar));
            const double C_4d2 = 48.0 * m_v3 * (6.0 * m_B2 * sigmabar2 + 20.0 * m_B * m_v * sigmabar + 15.0 * m_v2 - 15.0 * q2)/ (m_B2 * power_of<7>(sigmabar));

            return C_4 * g_bar_d2 + C_4d1 * g_bar_d1 + C_4d2 * g_bar;
        }

        inline
        double I4d3_A1_2pt_g_bar(const double & sigma, const double & q2) const
        {
            // two-particle contribution to A1 proportional to gbar
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double m_B2 = power_of<2>(m_B);
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);
            const double g_bar_d2 = this->g_bar_d2(sigma * m_B);
            const double g_bar_d3 = this->g_bar_d3(sigma * m_B);

            const double C_4   = 24.0 * m_v3 * (m_B2 * sigmabar2 + 2.0 * m_B * m_v * sigmabar + m_v2 - q2)/ (power_of<5>(sigmabar)) * m_B;
            const double C_4d1 = 72.0 * m_v3 * (3.0 * m_B2 * sigmabar2 + 8.0 * m_B * m_v * sigmabar + 5.0 * m_v2 - 5.0 * q2)/ (power_of<6>(sigmabar));
            const double C_4d2 = 144.0 * m_v3 * (6.0 * m_B2 * sigmabar2 + 20.0 * m_B * m_v * sigmabar + 15.0 * m_v2 - 15.0 * q2)/ (m_B * power_of<7>(sigmabar));
            const double C_4d3 = 720.0 * m_v3 * (2.0 * m_B2 * sigmabar2 + 8.0 * m_B * m_v * sigmabar + 7.0 * m_v2 - 7.0 * q2)/ (m_B2 * power_of<8>(sigmabar));

            return C_4 * g_bar_d3 + C_4d1 * g_bar_d2 + C_4d2 * g_bar_d1 + C_4d3 * g_bar;
        }
        // }}}

        /* A1 : 3-particle functions */
        // {{{
        double I1_A1_3pt_phi_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to phi_3
            const double m_B2     = power_of<2>(m_B);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_3 = this->phi_3(omega_1, omega_2);

            const double C_1 = u / (m_B2 * sigmabar2);

            return C_1 * phi_3;
        }

        double I2_A1_3pt_phi_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2      = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_3 = this->phi_3(omega_1, omega_2);

            const double C_2 = (m_B2 * sigmabar2 * u + 2.0 * m_B * m_v * sigmabar + m_v2 * u - q2 * u) / (m_B2 * power_of<3>(sigmabar));

            return C_2 * phi_3;
        }

        double I1_A1_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to phi_bar_3
            const double m_B3     = power_of<3>(m_B);
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_1 = 2.0 * u / (m_B3 * power_of<3>(sigmabar));

            return C_1 * phi_bar_3;
        }

        double I2_A1_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_3
            const double m_v      = this->m_v(), m_v2     = power_of<2>(m_v);
            const double m_B2     = power_of<2>(m_B), m_B3      = power_of<3>(m_B);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_2 = -2.0 * (m_B2 * sigmabar2 * u - 2.0 * m_B * m_v * sigmabar - 2.0 * m_v2 * u + 2.0 *q2 * u)/ (m_B3 * power_of<4>(sigmabar));

            return C_2 * phi_bar_3;
        }

        double I3_A1_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = 2.0 * (m_B2 * sigmabar2 + m_v2 - q2) * (m_B2 * sigmabar2 * u + 2.0 * m_B * m_v * sigmabar + m_v2 * u - q2 * u)
                             / (power_of<3>(m_B) * power_of<5>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I3d1A_A1_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_3
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = 2.0 * (m_B5 * sigmabar3 + m_B4 * omega_1 * sigmabar2 * (-3.0 + 2.0 * sigmabar)
                             + m_B * sigmabar * (m_v2 - q2 * sigmabar) * (m_v2 + 8.0 * m_v * omega_2 - q2 * sigmabar)
                             + m_B2 * omega_1 * sigmabar * (m_v2 * (4.0 - 10.0 * sigmabar) + q2 * sigmabar * (5.0 + sigmabar))
                             + m_B3 * sigmabar2 * (-(2.0 * q2 * sigmabar) - 2.0 * m_v * omega_2 * (-3.0 + sigmabar)
                             + m_v2 * (-1.0 + 3.0 * sigmabar))
                             + sigma3 * (3.0 * m_B5 * sigmabar2 - 4.0 * m_B3 * q2 * sigmabar + 5.0 * m_B * power_of<2>(q2))
                             + sigma2 * (-(3.0 * m_B4 * omega_1 * sigmabar2) + 4.0 * m_B2 * omega_1 * q2 * sigmabar
                             + 3.0 * m_B5 * sigmabar2 * (-2.0 + sigmabar) + m_B * q2 * (-10 * m_v2 + 11.0 * q2 * sigmabar)
                             + 2.0 * m_B3 * sigmabar * (2.0 * (m_v2 + q2) - 3.0 * q2 * sigmabar)
                             - 5.0 * omega_1 * power_of<2>(q2))
                             - sigma * (2.0 * m_B4 * omega_1 * sigmabar2 * (-3.0 + sigmabar)
                             + m_B5 * sigmabar2 * (-3.0 + 4.0 * sigmabar) + 10.0 * omega_1 * q2 * (-m_v2 + q2 * sigmabar)
                             + m_B2 * omega_1 * sigmabar * (4.0 * (m_v2 + q2) - 5.0 * q2 * sigmabar)
                             + m_B3 * sigmabar * (m_v2 * (4.0 - 11.0 * sigmabar) + 6.0 * m_v * omega_2 * sigmabar
                             + 2.0 * q2 * sigmabar * (2.0 + sigmabar))
                             +  m_B * (-(5.0 * m_v4) + 4.0 * m_v * (3.0 * m_v + 2.0 * omega_2) * q2 * sigmabar
                             - 7.0 * sigmabar2 * power_of<2>(q2))) - 5.0 * omega_1 * power_of<2>(m_v2 - q2 * sigmabar))
                             / (m_B3 * omega_2 * power_of<6>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I3d1B_A1_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_3
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = -(2.0 * ((2.0 * m_B * m_v - 2.0 * q2 + m_B2 * (-1.0 + sigma))
                             * (m_v2 - q2 * sigma) * sigmabar + sigmabar2
                             * (-(m_B * q2 * (2.0 * m_v + m_B * (2.0 + sigma))) + power_of<2>(q2 )
                             + m_B2 * (3.0 * m_v2 - 2.0 * m_B * m_v * (-1.0 + sigma) + m_B2 * power_of<2>(-1.0 + sigma)))
                             + power_of<2>(m_v2 - q2 * sigma)))
                             / (m_B2 * (-omega_1 + m_B * sigma) * power_of<5>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I3d1C_A1_3pt_phi_bar_3(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_3
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = 4.0 * m_v * (-sigmabar * (m_B2 * (sigma - 1.0) + q2) + m_v2 - q2 * sigma) / (m_B * omega_2 * power_of<4>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I3_A1_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to phi_bar_bar_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_3 = 6.0 * m_v * u * (2 * m_B * sigmabar + m_v * (2.0 * u - 1.0)) / (m_B2 * power_of<4>(sigmabar));

            return C_3 * phi_bar_bar_3;
        }

        double I3d1A_A1_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to phi_bar_bar_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_3 = 6.0 * m_v * (4.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) + 8.0 * m_B2 * m_v * sigma2
                             + 2.0 * m_B2 * omega_2 * sigmabar2
                             - m_B * (4.0 * m_v * omega_1 + m_v * omega_2 + 6.0 * omega_1 * omega_2) * sigmabar
                             + 2.0 * m_B * sigma * (3.0 * m_B * omega_2 * sigmabar
                             - 2.0 * m_v * (4.0 * omega_1 + omega_2 - m_B * sigmabar)))
                             / (m_B2 * power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_3 * phi_bar_bar_3;
        }

        double I3d1B_A1_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to phi_bar_bar_3
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_3 = -6.0 * m_v * (2.0 * m_B * sigmabar + m_v) / (m_B * (-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * phi_bar_bar_3;
        }

        double I3d1C_A1_3pt_phi_bar_bar_3(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to phi_bar_bar_3

            return 0.0;
        }

        double I4_A1_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_bar_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = u * 6.0 * m_v2 * (-1.0 * (2.0 * u - 1.0) * (q2 - m_B2 * sigmabar2) + 2.0 * m_B * m_v * sigmabar + m_v2 * (2.0 * u - 1.0))
                             / (m_B2 * power_of<5>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d1A_A1_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_bar_3
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = 6.0 * m_v2 * (m_B2 * (2.0 * m_v * omega_2
                             + 3.0 * omega_1 * (2.0 * omega_1 + omega_2)) * sigmabar2
                             - m_B3 * (4.0 * omega_1 + omega_2) * sigmabar3
                             + 5.0 * omega_1 * (2.0 * omega_1 + omega_2) * (m_v2 - q2)
                             + 2.0 * m_B2 * sigma2 * (5.0 * m_v2 + 3.0 * m_B2 * sigmabar2 - 5.0 * q2)
                             + m_B * (-(8.0 * m_v * omega_1 * omega_2) - m_v2 * (4.0 * omega_1 + omega_2)
                             + (4.0 * omega_1 + omega_2) * q2) * sigmabar
                             + m_B * sigma * (8.0 * m_B * m_v * omega_2 * sigmabar
                             + q2 * (20.0 * omega_1 + 5.0 * omega_2 - 4.0 * m_B * sigmabar)
                             + m_B2 * sigmabar2 * (-12 * omega_1 - 3.0 * omega_2 + 4.0 * m_B * sigmabar)
                             + m_v2 * (-20.0 * omega_1 - 5.0 * omega_2 + 4.0 * m_B * sigmabar)))
                             / (m_B2 * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d1B_A1_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_bar_3
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = - 6.0 * m_v2 * (power_of<2>((m_B * sigmabar + m_v)) - q2) / (m_B * power_of<5>(sigmabar) * omega_2);

            return C_4 * phi_bar_bar_3;
        }

        double I4d1C_A1_3pt_phi_bar_bar_3(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to phi_bar_bar_3

            return 0.0;
        }
        double I4d2A_A1_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_bar_3
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = 12.0 * m_v2 * (-(3.0 * m_B3 * (4.0 * omega_1 + omega_2) * sigmabar3)
                             + 2.0 * m_B4 * sigmabar4 + 15.0 * omega_1 * (2.0 * omega_1 + omega_2) * (m_v2 - q2)
                             + 2.0 * m_B2 * sigmabar2 * (m_v2 + 4.0 * m_v * omega_2
                             + 3.0 * omega_1 * (2.0 * omega_1 + omega_2) - q2)
                             + 6.0 * m_B2 * sigma2 * (5.0 * m_v2 + 2.0 * m_B2 * sigmabar2 - 5.0 * q2)
                             - 5.0 * m_B * (4.0 * m_v * omega_1 * (m_v + omega_2) + omega_2 * (m_v2 - q2)
                             - 4.0 * omega_1 * q2) * sigmabar + m_B * sigma
                             * (20.0 * m_B * m_v * omega_2 * sigmabar
                             + 6.0 * m_B2 * sigmabar2 * (-(4.0 * omega_1) - omega_2 + 2.0 * m_B * sigmabar)
                             -  5.0 * m_v2 * (12.0 * omega_1 + 3.0 * omega_2 - 4.0 * m_B * sigmabar)
                             + 5.0 * q2 * (12.0 * omega_1 + 3.0 * omega_2 - 4.0 * m_B * sigmabar)))
                             / (m_B2 * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d2B_A1_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_bar_3
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_3     = this->phi_bar_3(omega_1, omega_2);
            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            return  -(6.0 * m_v2 * (2.0 * (5.0 * omega_1 * q2 + m_B * (m_v2 + m_B2 * sigmabar2 - q2) * sigmabar
                    - omega_1 * (m_v + m_B * sigmabar) * (5.0 * m_v + 3.0 * m_B * sigmabar)
                    + m_B * sigma * (-(5.0 * q2) + (m_v + m_B * sigmabar) * (5.0 * m_v + 3.0 * m_B * sigmabar))) * phi_bar_bar_3
                    + m_B * (-omega_1 + m_B * sigma) * sigmabar * (-q2 + power_of<2>(m_v + m_B * sigmabar)) * phi_bar_3))
                    / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));
        }

        double I4d2C_A1_3pt_phi_bar_bar_3(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_bar_3
            const double omega_1  = m_B * sigma;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = -6.0 * m_v2 * (power_of<2>(m_v - m_B * sigmabar) - q2) / (power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d2D_A1_3pt_phi_bar_bar_3(const double & sigma, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_bar_3
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_3     = this->phi_bar_3(omega_1, omega_2);
            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            return    6.0 * m_v2 * pow(m_B,-2.0) * pow(sigmabar,-6.0)
                    * ((-m_v2 + m_B2 * sigmabar2 + q2) * phi_bar_bar_3
                    - m_B * sigmabar * (-q2 + power_of<2>(m_v + m_B * sigmabar))
                    * phi_bar_3)/ (m_B2 * power_of<6>(sigmabar));
        }

        double I1_A1_3pt_phi_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to phi_4
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_4 = this->phi_4(omega_1, omega_2);

            const double C_1 = (u - 1.0) / (power_of<2>(m_B * sigmabar));

            return C_1 * phi_4;
        }

        double I2_A1_3pt_phi_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v()  , m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma,   sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_4 = this->phi_4(omega_1, omega_2);

            const double C_2 = (u - 1.0) * (m_B2 * sigmabar2 + m_v2 - q2) / (m_B2 * power_of<3>(sigmabar));

            return C_2 * phi_4;
        }

        double I1_A1_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to phi_bar_4
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_1 = 2.0 * (u - 1.0) / (power_of<3>(m_B * sigmabar));

            return C_1 * phi_bar_4;
        }

        double I2_A1_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v()  , m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_2 = 2.0 * (m_B2 * sigmabar2 * u - m_B * m_v * sigmabar + 2.0 * m_v2 * (u - 1.0) - 2.0 * q2 * (u - 1.0))
                             / (power_of<3>(m_B) * power_of<4>(sigmabar));

            return C_2 * phi_bar_4;
        }

        double I3_A1_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(),  m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma,  sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (m_B2 * sigmabar2 + 2.0 * m_B * m_v * sigmabar + m_v2 -q2)
                             * ((1.0 - u) * (q2 - m_B2 * sigmabar2) + m_B * m_v * sigmabar * (1.0 - 2.0 * u) + m_v2 * (u - 1.0))
                             / (power_of<3>(m_B) * power_of<5>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I3d1A_A1_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = (-(8.0 * m_B * m_v3 * omega_2 * sigmabar)
                             + 2.0 * m_v4 * (-(5.0 * omega_1) - 5.0 * omega_2 + m_B * sigmabar)
                             + 2.0 * m_B * m_v * omega_2 * sigmabar2 * (4.0 * q2 + m_B2 * (-3.0 + sigmabar))
                             + 2.0 * m_v2 * sigmabar * (2.0 * q2 * (5.0 * omega_1 + 5.0 * omega_2 - m_B * sigmabar)
                             + m_B2 * (-(4.0 * omega_1) + sigmabar * (m_B + 10.0 * omega_1 - 3.0 * m_B * sigmabar)))
                             + 2.0 * sigma3 * (3.0 * m_B5 * sigmabar2 + 5.0 * m_B * power_of<2>(q2))
                             + 2.0 * sigma2 * (-(3.0 * m_B4 * (omega_1 + omega_2) * sigmabar2)
                             - 4.0 * m_B3 * m_v2 * sigmabar + 2.0 * m_B2 * omega_2 * q2 * sigmabar
                             + 3.0 * m_B5 * sigmabar2 * (-2.0 + sigmabar)
                             + m_B * q2 * (-(10.0 * m_v2) + 11.0 * q2 * sigmabar)
                             - 5.0 * (omega_1 + omega_2) * power_of<2>(q2))
                             + sigmabar2 * (2.0 * m_B5 * sigmabar - 4.0 * m_B3 * q2 * sigmabar
                             + 2.0 * m_B4 * (omega_1 + omega_2) * (-3.0 + 2.0 * sigmabar)
                             + m_B2 * q2 * (12.0 * omega_1 + omega_2 * (11.0 + sigmabar))
                             - 10.0 * (omega_1 + omega_2) * power_of<2>(q2) + 2.0 * m_B * sigmabar * power_of<2>(q2))
                             + sigma * (-(4.0 * m_B4 * (omega_1 + omega_2) * sigmabar2 * (-3.0 + sigmabar))
                             + 2.0 * m_B5 * sigmabar2 * (3.0 - 4.0 * sigmabar)
                             + 20.0 * (omega_1 + omega_2) * q2 * (m_v2 - q2 * sigmabar)
                             + 2.0 * m_B3 * sigmabar * (3.0 * m_v * omega_2 * sigmabar - 6.0 * q2 * sigmabar
                             + m_v2 * (4.0 - 11.0 * sigmabar))
                             + m_B2 * sigmabar * (8.0 * m_v2 * omega_1 + omega_2 * q2 * (-4.0 + 5.0 * sigmabar))
                             + 2.0 * m_B * (5.0 * m_v4 + 4.0 * m_v * (-(3.0 * m_v) + omega_2) * q2 * sigmabar
                             + 7.0 * sigmabar2 * power_of<2>(q2))))
                             / (m_B3 * omega_2 * power_of<6>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I3d1B_A1_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = -((-(2.0 * m_v3) + 2.0 * m_B2 * m_v * (-1.0 + sigma) * sigmabar
                             + m_B * q2 * sigma * (-1.0 + sigma + sigmabar) + 2.0 * m_v * q2 * (sigma + sigmabar)
                             - 2.0 * m_B * m_v2 * (-1.0 + sigma + 3.0 * sigmabar)))
                             / (m_B * (-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I3d1C_A1_3pt_phi_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = ((m_B2 * q2 * (-1.0 + sigma) * sigma + 4.0 * q2 * (m_v2 - q2 * sigma)
                             - 2.0 * m_B * (m_v3 - m_v * q2 * sigma)) * sigmabar
                             + sigmabar2 * (-(2.0 * m_B3 * (-m_v + m_B * (-1.0 + sigma)) * (-1.0 + sigma))
                             + m_B * q2 * (2.0 * m_v + m_B * (4.0 + sigma)) - 2.0 * power_of<2>(q2))
                             - 2.0 * power_of<2>(m_v2 - q2 * sigma))
                             / (m_B2 * omega_2 * power_of<5>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I2_A1_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to phi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_2 = 2.0 * u * (2.0 * m_B * sigmabar * (2.0 * u -1.0) - 3.0 * m_v) / (power_of<3>(m_B) * power_of<4>(sigmabar));

            return C_2 * phi_bar_bar_4;
        }

        double I3_A1_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * u * (m_v * (6.0 * q2 - 2.0 * m_B2 * sigmabar2) + 2.0 * m_B * sigmabar * (2.0 * u -1.0)
                             * (m_B2 * sigmabar2 - q2) + m_B * m_v2 * sigmabar * (1.0 - 2.0 * u) - 6.0 * m_v2 * m_v)
                             / (power_of<3>(m_B) * power_of<5>(sigmabar));

            return C_3 * phi_bar_bar_4;
        }

        double I3d1A_A1_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B),   m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(),   m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -(2.0 * (40.0 * m_B3 * m_v2 * sigma3
                             + 2.0 * m_B3 * (m_v * omega_2 - 2.0 * omega_1 * (2.0 * omega_1 + omega_2)) * sigmabar3
                             + 2.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar4
                             + 30.0 * m_v * omega_1 * omega_2 * (-m_v2 + q2)
                             - 4.0 * m_B2 * sigma2 * (10.0 * m_B * m_v2 + 5.0 * m_v2 * (4.0 * omega_1 + omega_2)
                             + 2.0 * m_B3 * sigmabar3 - 4.0 * m_B * (4.0 * m_v2 + q2) * sigmabar)
                             - m_B2 * sigmabar * (6.0 * m_v * omega_1 * omega_2 * sigmabar
                             + 2.0 * (4.0 * omega_1 + omega_2) * q2 * sigmabar
                             + m_v2 * (4.0 * omega_1 + omega_2) * (-4.0 + 5.0 * sigmabar))
                             + 2.0 * m_B * (3.0 * m_v3 * omega_2 * sigmabar - 3.0 * m_v * omega_2 * q2 * sigmabar
                             + 4.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar
                             + 2.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * (-5.0 + 6.0 * sigmabar))
                             + 2.0 * m_B * sigma * (2.0 * m_B3 * (4.0 * omega_1 + omega_2) * sigmabar3
                             - 4.0 * m_B4 * sigmabar4 + 5.0 * m_v
                             * (3.0 * m_v2 * omega_2 + 2.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2)
                             - 3.0 * omega_2 * q2) + m_B2 * sigmabar
                             * (3.0 * m_v * omega_2 * sigmabar + 4.0 * q2 * sigmabar
                             + 2.0 * m_v2 * (-4.0 + 5.0 * sigmabar))
                             - 2.0 * m_B * (4.0 * omega_1 + omega_2)
                             * (2.0 * q2 * sigmabar + m_v2 * (-5.0 + 7.0 * sigmabar)))))
                             / (m_B3 * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_3 * phi_bar_bar_4;
        }

        double I3d1B_A1_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_3 = (-2.0 * (-(6.0 * m_v3) - 2.0 * m_B2 * m_v * sigmabar2 + 2.0 * m_B3 * power_of<3>(sigmabar)
                             + 6.0 * m_v * q2 - m_B * (2.0 * q2 * sigmabar + m_v2 * (-4.0 + 4.0 * sigma + 5.0 * sigmabar))))
                             / (m_B2 * (-omega_1 + m_B * sigma) * power_of<5>(sigmabar));

            return C_3 * phi_bar_bar_4;
        }

        double I3d1C_A1_3pt_phi_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to phi_bar_bar_4

            return 0.0;
        }

        double I4_A1_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * m_v * u * (m_B * m_v * sigmabar * (2.0 * u - 1.0) * (m_B2 *sigmabar2 - q2)
                             + power_of<2>(q2 - m_B2 * sigmabar2) + m_B * power_of<3>(m_v) *sigmabar * (2.0 * u - 1.0) + power_of<4>(m_v) - 2.0 * m_v2 * q2)
                             / (power_of<3>(m_B) * power_of<6>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d1A_A1_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v), m_v5 = power_of<5>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar5 = power_of<5>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(2.0 * (-(4.0 * m_B2 * sigma4 * q2 * (12.0 * m_B * m_v2 + 3.0 * (4.0 * omega_1 + omega_2) * q2
                             + m_B * q2 * (6.0 - 11.0 * sigmabar))) + 24 * m_B3 * sigma5 * power_of<2>(q2)
                             + m_v * (3.0 * m_B5 * omega_2 * sigmabar5
                             + m_B3 * sigmabar2 * (-(6.0 * omega_2 * q2 * sigmabar)
                             + m_v * omega_1 * (2.0 * omega_1 + omega_2) * (-8.0 + 17.0 * sigmabar))
                             + m_B4 * sigmabar3 * (-(6.0 * omega_1 * omega_2 * sigmabar)
                             - m_v * (4.0 * omega_1 + omega_2) * (-2.0 + 5.0 * sigmabar))
                             + m_B2 * sigmabar * (24 * omega_1 * omega_2 * q2 * sigmabar
                             - m_v3 * (4.0 * omega_1 + omega_2) * (-2.0 + 5.0 * sigmabar)
                             + m_v * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (-2.0 + 5.0 * sigmabar))
                             - 18.0 * omega_1 * omega_2 * power_of<2>(m_v2 - q2)
                             + 3.0 * m_B * (m_v4 * omega_2 * sigmabar - 2.0 * m_v2 * omega_2 * q2 * sigmabar
                             - 5.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar * (-1 + 2.0 * sigmabar)
                             + m_v3 * omega_1 * (2.0 * omega_1 + omega_2) * (-4.0 + 9.0 * sigmabar)
                             + omega_2 * sigmabar * power_of<2>(q2)))
                             + 2.0 * m_B * sigma3 * (8.0 * m_B4 * m_v2 * sigmabar2
                             + 2.0 * m_B * (4.0 * omega_1 + omega_2) * q2
                             * (6.0 * m_v2 + q2 * (3.0 - 5.0 * sigmabar))
                             + 6.0 * omega_1 * (2.0 * omega_1 + omega_2) * power_of<2>(q2)
                             + m_B2 * (12.0 * m_v4 + m_v2 * q2 * (24 - 62 * sigmabar) + 5.0 * m_v * omega_2 * q2 * sigmabar
                             + 10.0 * (-1.0 + sigmabar) * sigmabar * power_of<2>(q2)))
                             + m_B * sigma * (-(m_B3 * m_v2 * (4.0 * omega_1 + omega_2) * sigmabar2
                             * (-8.0 + 19.0 * sigmabar))
                             + m_B * m_v * (-(10.0 * omega_1 * omega_2 * q2 * (-1.0 + sigmabar) * sigmabar)
                             - m_v3 * (4.0 * omega_1 + omega_2) * (-12.0 + 29.0 * sigmabar)
                             + m_v * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (-19.0 + 39.0 * sigmabar))
                             + 2.0 * m_B4 * m_v * sigmabar3
                             * (3.0 * omega_2 * sigmabar + 2.0 * m_v * (-2.0 + 5.0 * sigmabar))
                             + 2.0 * m_B2 * m_v * sigmabar * (omega_2 * q2 * sigmabar * (-13.0 + sigmabar)
                             + 2.0 * m_v3 * (-2.0 + 5.0 * sigmabar)
                             + 2.0 * m_v * sigmabar * (2.0 * omega_1 * (2.0 * omega_1 + omega_2)
                             + q2 * (2.0 - 5.0 * sigmabar)))
                             + 6.0 * (3.0 * m_v5 * omega_2 + 2.0 * m_v4 * omega_1 * (2.0 * omega_1 + omega_2)
                             - 6.0 * m_v3 * omega_2 * q2
                             - m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (-4.0 + 9.0 * sigmabar)
                             + 3.0 * m_v * omega_2 * power_of<2>(q2) +
                             + omega_1 * (2.0 * omega_1 + omega_2) * (-1.0 + sigmabar) * sigmabar * power_of<2>(q2)))
                             + 2.0 * m_B * sigma2 * (-(4.0 * m_B3 * m_v2 * (4.0 * omega_1 + omega_2) * sigmabar2)
                             + m_B4 * m_v2 * sigmabar2 * (-8.0 + 21.0 * sigmabar)
                             + 3.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2
                             * (-(4.0 * m_v2) + q2 * (-2.0 + 3.0 * sigmabar))
                             + m_B2 * m_v * (m_v * q2 * (23 - 48.0 * sigmabar) * sigmabar + m_v3 * (-12.0 + 31.0 * sigmabar)
                             + omega_2 * q2 * sigmabar * (-5.0 + 6.0 * sigmabar))
                             - m_B * (6.0 * m_v4 * (4.0 * omega_1 + omega_2)
                             + 5.0 * m_v * omega_1 * omega_2 * q2 * sigmabar
                             - m_v2 * (4.0 * omega_1 + omega_2) * q2 * (-12.0 + 29.0 * sigmabar)
                             + 4.0 * (4.0 * omega_1 + omega_2) * (-1.0 + sigmabar) * sigmabar * power_of<2>(q2)))))
                             / (m_B3 * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d1B_A1_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * (3.0 * m_B4 * m_v * sigmabar4 + m_B3 * m_v2 * sigmabar2
                             * (-2.0 + 2.0 * sigma + 5.0 * sigmabar)
                             + 2.0 * m_B2 * m_v * q2 * sigmabar * (-(3.0 * sigmabar) + sigma * (-1.0 + sigma + sigmabar))
                             + 3.0 * m_v * power_of<2>(m_v2 - q2)
                             + m_B * (m_v4 * (-2.0 + 2.0 * sigma + 5.0 * sigmabar)
                             + m_v2 * q2 * (-(5.0 * sigmabar2) - 4.0 * (-1.0 + sigma) * sigma + 2.0 * sigmabar
                             - 9.0 * sigma * sigmabar) + 2.0 * sigma2 * (-1.0 + sigma + sigmabar) * power_of<2>(q2)))
                             / (m_B2 * power_of<6>(sigmabar) * omega_2);

            return C_4 * phi_bar_bar_4;
        }

        double I4d1C_A1_3pt_phi_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to phi_bar_bar_4

            return 0.0;
        }
        double I4d2A_A1_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v), m_v5 = power_of<5>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 =-(4.0 * (-(6.0 * m_B2 * sigma4 * q2 * (28 * m_B * m_v2 + 7.0 * (4.0 * omega_1 + omega_2) * q2
                             + 2.0 * m_B * q2 * (7.0 - 17.0 * sigmabar)))
                             + m_B4 * m_v * sigmabar3 * (-(9.0 * omega_1 * omega_2 * sigmabar)
                             - m_v * (4.0 * omega_1 + omega_2) * (-8.0 + 17.0 * sigmabar))
                             + 2.0 * m_B5 * m_v * sigmabar4 * (3.0 * omega_2 * sigmabar + m_v * (-2.0 + 5.0 * sigmabar))
                             + 2.0 * m_B3 * m_v * sigmabar2 * (-(12.0 * omega_2 * q2 * sigmabar)
                             + m_v * omega_1 * (2.0 * omega_1 + omega_2) * (-10.0 + 19.0 * sigmabar)
                             + m_v * q2 * sigmabar * (2.0 - 5.0 * sigmabar) + m_v3 * (-2.0 + 5.0 * sigmabar))
                             - 3.0 * m_B2 * m_v * sigmabar * (-(20.0 * omega_1 * omega_2 * q2 * sigmabar)
                             - 5.0 * m_v * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (-1.0 + 2.0 * sigmabar)
                             + m_v3 * (4.0 * omega_1 + omega_2) * (-4.0 + 9.0 * sigmabar))
                             - 63.0 * m_v * omega_1 * omega_2 * power_of<2>(m_v2 - q2) + 84.0 * m_B3 * sigma5 * power_of<2>(q2)
                             + m_B * (18.0 * m_v5 * omega_2 * sigmabar - 36.0 * m_v3 * omega_2 * q2 * sigmabar
                             + 3.0 * m_v4 * omega_1 * (2.0 * omega_1 + omega_2) * (-14.0 + 29.0 * sigmabar)
                             - 15.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar
                             * (-4.0 + 7.0 * sigmabar) + 4.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar2
                             * (-1.0 + sigmabar) * power_of<2>(q2) + 18.0 * m_v * omega_2 * sigmabar * power_of<2>(q2))
                             + m_B * sigma * (63.0 * m_v5 * omega_2 + 42.0 * m_v4 * omega_1 * (2.0 * omega_1 + omega_2)
                             - 126.0 * m_v3 * omega_2 * q2 - 2.0 * m_B3 * m_v2 * (4.0 * omega_1 + omega_2) * sigmabar2
                             * (-10.0 + 23.0 * sigmabar) - 21.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * q2
                             * (-4.0 + 9.0 * sigmabar) + 2.0 * m_B2 * m_v * sigmabar
                             * (m_v * (10.0 * omega_1 * (2.0 * omega_1 + omega_2) + q2 * (34.0 - 69.0 * sigmabar))
                             * sigmabar + 5.0 * omega_2 * q2 * sigmabar * (-7.0 + sigmabar)
                             + 8.0 * m_v3 * (-3.0 + 7.0 * sigmabar))
                             + m_B4 * m_v * sigmabar3 * (9.0 * omega_2 * sigmabar
                             + 8.0 * m_v * (-4.0 + 9.0 * sigmabar)) + 63 * m_v * omega_2 * power_of<2>(q2)
                             + 4.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar * (-9.0 + 10.0 * sigmabar)
                             * power_of<2>(q2) + m_B * (-30.0 * m_v * omega_1 * omega_2 * q2 * (-1.0 + sigmabar) * sigmabar
                             - 3.0 * m_v4 * (4.0 * omega_1 + omega_2) * (-14.0 + 33.0 * sigmabar)
                             + 3.0 * m_v2 * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (-28.0 + 53.0 * sigmabar)
                             - 10.0 * (4.0 * omega_1 + omega_2) * sigmabar2 * (-1.0 + sigmabar) * power_of<2>(q2)))
                             + m_B * sigma2 * (-(20.0 * m_B3 * m_v2 * (4.0 * omega_1 + omega_2) * sigmabar2)
                             + 4.0 * m_B4 * m_v2 * sigmabar2 * (-10.0 + 27.0 * sigmabar)
                             + 6.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2
                             * (-(7.0 * (2.0 * m_v2 + q2)) + 13.0 * q2 * sigmabar)
                             + m_B2 * (2.0 * m_v2 * q2 * (108.0 - 217.0 * sigmabar) * sigmabar
                             + 6.0 * m_v4 * (-14.0 + 37.0 * sigmabar)
                             + 10.0 * m_v * omega_2 * q2 * sigmabar * (-3.0 + 4.0 * sigmabar)
                             + 36.0 * sigmabar2 * (-1.0 + sigmabar) * power_of<2>(q2))
                             - m_B * (42.0 * m_v4 * (4.0 * omega_1 + omega_2)
                             + 30.0 * m_v * omega_1 * omega_2 * q2 * sigmabar
                             - 3.0 * m_v2 * (4.0 * omega_1 + omega_2) * q2 * (-28.0 + 71.0 * sigmabar)
                             + 2.0 * (4.0 * omega_1 + omega_2) * sigmabar * (-24.0 + 29.0 * sigmabar) * power_of<2>(q2)))
                             + 2.0 * m_B * sigma3 * (20.0 * m_B4 * m_v2 * sigmabar2
                             + 3.0 * m_B * (4.0 * omega_1 + omega_2) * q2
                             * (14.0 * m_v2 + q2 * (7.0 - 15.0 * sigmabar))
                             + 21.0 * omega_1 * (2.0 * omega_1 + omega_2) * power_of<2>(q2)
                             + 3.0 * m_B2 * (14.0 * m_v4 + m_v2 * q2 * (28.0 - 79.0 * sigmabar)
                             + 5.0 * m_v * omega_2 * q2 * sigmabar
                             + 2.0 * sigmabar * (-10.0 + 13.0 * sigmabar) * power_of<2>(q2)))))
                             / (m_B3 * power_of<2>(omega_2) * power_of<8>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d2B_A1_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double phi_bar_4     = this->phi_bar_4(omega_1, omega_2);
            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            return  (4.0 * phi_bar_bar_4 * (2.0 * m_B * sigma3 * q2 * (-(6.0 * omega_1 * q2) - 6.0 * m_B * (2.0 * m_v2 + q2)
                   + 5.0 * m_B * (m_B * m_v + 2.0 * q2) * sigmabar)
                   + m_v * (m_B2 * m_v * sigmabar * (-2.0 + 5.0 * sigmabar)
                   * (m_v2 + sigmabar * (-q2 + m_B2 * sigmabar))
                   + omega_1 * (-(6.0 * m_B4 * sigmabar4) + 24.0 * m_B2 * sigmabar2 * q2
                   + m_B3 * m_v * sigmabar2 * (8.0 - 17.0 * sigmabar)
                   + 3.0 * m_B * m_v * (5.0 * q2 * sigmabar * (-1.0 + 2.0 * sigmabar)
                   + m_v2 * (4.0 - 9.0 * sigmabar)) - 18.0 * power_of<2>(m_v2 - q2)))
                   + 12.0 * m_B2 * sigma4 * power_of<2>(q2)
                   + m_B * sigma * (6.0 * m_B4 * m_v * sigmabar4
                   - 8.0 * m_B2 * m_v * sigmabar2 * (m_v * omega_1 + 3.0 * q2)
                   + m_B3 * m_v2 * sigmabar2 * (-8.0 + 19.0 * sigmabar)
                   + m_B * m_v * (m_v * q2 * (19.0 - 39.0 * sigmabar) * sigmabar
                   - 10.0 * omega_1 * q2 * (-1.0 + sigmabar) * sigmabar + m_v3 * (-12.0 + 29.0 * sigmabar))
                   + 18.0 * m_v * power_of<2>(m_v2 - q2)
                   - 6.0 * omega_1 * (2.0 * m_v4 + m_v2 * q2 * (4.0 - 9.0 * sigmabar)
                   + (-1.0 + sigmabar) * sigmabar * power_of<2>(q2)))
                   + 2.0 * m_B * sigma2 * (omega_1 * q2
                   * (12.0 * m_v2 - 5.0 * m_B * m_v * sigmabar + q2 * (6.0 - 9.0 * sigmabar))
                   + m_B * (6.0 * m_v4 + m_v2 * (4.0 * m_B2 * sigmabar2 + q2 * (12.0 - 29.0 * sigmabar))
                   + 5.0 * m_B * m_v * q2 * (-1.0 + sigmabar) * sigmabar
                   + 4.0 * (-1.0 + sigmabar) * sigmabar * power_of<2>(q2))))
                   + 2.0 * m_B * (-omega_1 + m_B * sigma) * sigmabar
                   * (3.0 * m_B4 * m_v * sigmabar4
                   + m_B3 * m_v2 * sigmabar2 * (-2.0 + 2.0 * sigma + 5.0 * sigmabar)
                   + 2.0 * m_B2 * m_v * q2 * sigmabar * (-(3.0 * sigmabar) + sigma * (-1.0 + sigma + sigmabar))
                   + 3.0 * m_v * power_of<2>(m_v2 - q2)
                   + m_B * (m_v4 * (-2.0 + 2.0 * sigma + 5.0 * sigmabar)
                   + m_v2 * q2 * (-(5.0 * sigmabar2) - 4.0 * (-1.0 + sigma) * sigma + 2.0 * sigmabar
                   - 9.0 * sigma * sigmabar) + 2.0 * sigma2 * (-1.0 + sigma + sigmabar) * power_of<2>(q2))) * phi_bar_4)
                   / (m_B2 * power_of<2>(omega_2) * power_of<7>(sigmabar));
        }

        double I4d2C_A1_3pt_phi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(2.0 * (3.0 * m_B4 * m_v * sigmabar4 + m_B3 * m_v2 * sigmabar2
                             * (2.0 - 2.0 * sigma - 5.0 * sigmabar)
                             + 2.0 * m_B2 * m_v * q2 * sigmabar * (-(3.0 * sigmabar) + sigma * (-1.0 + sigma + sigmabar))
                             + 3.0 * m_v * power_of<2>(m_v2 - q2)
                             + m_B * (m_v4 * (2.0 - 2.0 * sigma - 5.0 * sigmabar)
                             + m_v2 * q2 * (5.0 * sigmabar2 + 4.0 * (-1.0 + sigma) * sigma
                             + (-2.0 + 9.0 * sigma) * sigmabar) - 2.0 * sigma2 * (-1.0 + sigma + sigmabar) * power_of<2>(q2))))
                             / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d2D_A1_3pt_phi_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to A1 proportional to phi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double phi_bar_4     = this->phi_bar_4(omega_1, omega_2);
            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            return   2.0 * (phi_bar_bar_4 * (-(3.0 * m_B3 * m_v2 * sigmabar3) - 6.0 * m_B4 * m_v * sigmabar4
                   + 2.0 * m_B2 * m_v * q2 * sigma * sigmabar * (-1.0 + sigma + sigmabar)
                   + 6.0 * m_v * power_of<2>(m_v2 - q2)
                   + m_B * (m_v4 * (-4.0 + 4.0 * sigma + 7.0 * sigmabar)
                   + m_v2 * q2 * (7.0 * sigmabar - 2.0
                   * (5.0 * sigmabar2 + 4.0 * (-1.0 + sigma) * sigma + 9.0 * sigma * sigmabar))
                   + 2.0 * sigma * (-1.0 + sigma + sigmabar) * (2.0 * sigma + 3.0 * sigmabar) * power_of<2>(q2)))
                   + m_B * sigmabar * (3.0 * m_B4 * m_v * sigmabar4
                   + m_B3 * m_v2 * sigmabar2 * (-2.0 + 2.0 * sigma + 5.0 * sigmabar)
                   + 2.0 * m_B2 * m_v * q2 * sigmabar * (-(3.0 * sigmabar) + sigma * (-1.0 + sigma + sigmabar))
                   + 3.0 * m_v * power_of<2>(m_v2 - q2)
                   + m_B * (m_v4 * (-2.0 + 2.0 * sigma + 5.0 * sigmabar)
                   + m_v2 * q2 * (-(5.0 * sigmabar2) - 4.0 * (-1.0 + sigma) * sigma + 2.0 * sigmabar
                   - 9.0 * sigma * sigmabar) + 2.0 * sigma2 * (-1.0 + sigma + sigmabar) * power_of<2>(q2))) * phi_bar_4)
                   / (m_B3 * power_of<7>(sigmabar));
        }

        double I1_A1_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to psi_bar_4
            const double m_B3     = power_of<3>(m_B);
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_1 = 2.0 * (1.0 - 2.0 * u) / (m_B3 * power_of<3>(sigmabar));

            return C_1 * psi_bar_4;
        }

        double I2_A1_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to psi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_2 = 2.0 * (1.0 - 2.0 * u) * (m_B2 * power_of<2>(sigmabar) + 2.0 * m_v2 - 2.0 * q2) / (power_of<3>(m_B) * power_of<4>(sigmabar));

            return C_2 * psi_bar_4;
        }

        double I3_A1_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to psi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (1.0 - 2.0 * u) * (-2.0 * m_v2 * (m_B2 * sigmabar2 + q2) + power_of<2>(q2 - m_B2 * sigmabar2) + power_of<4>(m_v))
                             / (power_of<3>(m_B) * power_of<5>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I3d1A_A1_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to psi_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = -(2.0 * (m_v4 * (-(10.0 * omega_1) - 5.0 * omega_2 + 2.0 * m_B * sigmabar)
                             + 2.0 * m_v2 * sigmabar * (m_B2 * sigmabar
                             * (6.0 * omega_1 + 3.0 * omega_2 - 2.0 * m_B * sigmabar)
                             + q2 * (10.0 * omega_1 + 5.0 * omega_2 - 2.0 * m_B * sigmabar))
                             + sigma2 * q2 * (-(5.0 * (2.0 * omega_1 + omega_2) * q2)
                             + m_B * (-(20.0 * m_v2) + 22 * q2 * sigmabar))
                             + 2.0 * sigma * (m_B5 * sigmabar4 - 6.0 * m_B3 * sigmabar2 * (m_v2 + q2)
                             + 5.0 * (2.0 * omega_1 + omega_2) * q2 * (m_v2 - q2 * sigmabar)
                             + m_B * (m_v2 - q2 * sigmabar) * (5.0 * m_v2 - 7.0 * q2 * sigmabar))
                             + 10.0 * m_B * sigma3 * power_of<2>(q2)
                             + sigmabar2 * (-(m_B4 * (2.0 * omega_1 + omega_2) * sigmabar2) + 2.0 * m_B5 * sigmabar3
                             + 6.0 * m_B2 * (2.0 * omega_1 + omega_2) * q2 - 4.0 * m_B3 * q2 * sigmabar
                             - 5.0 * (2.0 * omega_1 + omega_2) * power_of<2>(q2) + 2.0 * m_B * sigmabar * power_of<2>(q2))))
                             / (m_B3 * omega_2 * power_of<6>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I3d1B_A1_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A1 proportional to psi_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (m_B4 * sigmabar4 + sigmabar2 * (q2 * q2 - 2.0 * m_B2 * (m_v2 + q2)) + 2.0
                             * q2 * sigmabar * (q2 * sigma - m_v2) + power_of<2>(m_v2 - q2 * sigma))
                             / (m_B2 * (-omega_1 + m_B * sigma) * power_of<5>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I3d1C_A1_3pt_psi_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to psi_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (m_B4 * sigmabar4 + sigmabar2 * (q2 * q2 - 2.0 * m_B2 * (m_v2 + q2)) + 2.0
                             * q2 * sigmabar * (q2 * sigma - m_v2) + power_of<2>(m_v2 - q2 * sigma))
                             / (m_B2 * omega_2 * power_of<5>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I3_A1_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 6.0 * m_v * u * (2 * m_B * sigmabar + m_v * (2.0 * u - 1.0)) / (m_B2 * power_of<4>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1A_A1_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 6.0 * m_v * (4.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) + 8.0 * m_B2 * m_v * sigma2
                             + 2.0 * m_B2 * omega_2 * sigmabar2
                             - m_B * (4.0 * m_v * omega_1 + m_v * omega_2 + 6.0 * omega_1 * omega_2) * sigmabar
                             + 2.0 * m_B * sigma * (3.0 * m_B * omega_2 * sigmabar
                             - 2.0 * m_v * (4.0 * omega_1 + omega_2 - m_B * sigmabar)))
                             / (m_B2 * power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1B_A1_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -6.0 * m_v * (2.0 * m_B * sigmabar + m_v) / (m_B * (-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1C_A1_3pt_psiA_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to psi_bar_bar_4

            return 0.0;
        }

        double I4_A1_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = u * 6.0 * m_v2 * (-1.0 * (2.0 * u - 1.0) * (q2 - m_B2 * sigmabar2) + 2.0 * m_B * m_v * sigmabar + m_v2 * (2.0 * u - 1.0))
                             / (m_B2 * power_of<5>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1A_A1_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_v2 * (m_B2 * (2.0 * m_v * omega_2
                             + 3.0 * omega_1 * (2.0 * omega_1 + omega_2)) * sigmabar2
                             - m_B3 * (4.0 * omega_1 + omega_2) * sigmabar3
                             + 5.0 * omega_1 * (2.0 * omega_1 + omega_2) * (m_v2 - q2)
                             + 2.0 * m_B2 * sigma2 * (5.0 * m_v2 + 3.0 * m_B2 * sigmabar2 - 5.0 * q2)
                             + m_B * (-(8.0 * m_v * omega_1 * omega_2) - m_v2 * (4.0 * omega_1 + omega_2)
                             + (4.0 * omega_1 + omega_2) * q2) * sigmabar
                             + m_B * sigma * (8.0 * m_B * m_v * omega_2 * sigmabar
                             + q2 * (20.0 * omega_1 + 5.0 * omega_2 - 4.0 * m_B * sigmabar)
                             + m_B2 * sigmabar2 * (-12 * omega_1 - 3.0 * omega_2 + 4.0 * m_B * sigmabar)
                             + m_v2 * (-20.0 * omega_1 - 5.0 * omega_2 + 4.0 * m_B * sigmabar)))
                             / (m_B2 * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1B_A1_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A1 proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = - 6.0 * m_v2 * (power_of<2>((m_B * sigmabar + m_v)) - q2) / (m_B * power_of<5>(sigmabar) * omega_2);

            return C_4 * psi_bar_bar_4;
        }

        double I4d1C_A1_3pt_psiA_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to psi_bar_bar_4

            return 0.0;
        }
        double I4d2A_A1_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 12.0 * m_v2 * (-(3.0 * m_B3 * (4.0 * omega_1 + omega_2) * sigmabar3)
                             + 2.0 * m_B4 * sigmabar4 + 15.0 * omega_1 * (2.0 * omega_1 + omega_2) * (m_v2 - q2)
                             + 2.0 * m_B2 * sigmabar2 * (m_v2 + 4.0 * m_v * omega_2
                             + 3.0 * omega_1 * (2.0 * omega_1 + omega_2) - q2)
                             + 6.0 * m_B2 * sigma2 * (5.0 * m_v2 + 2.0 * m_B2 * sigmabar2 - 5.0 * q2)
                             - 5.0 * m_B * (4.0 * m_v * omega_1 * (m_v + omega_2) + omega_2 * (m_v2 - q2)
                             - 4.0 * omega_1 * q2) * sigmabar + m_B * sigma
                             * (20.0 * m_B * m_v * omega_2 * sigmabar
                             + 6.0 * m_B2 * sigmabar2 * (-(4.0 * omega_1) - omega_2 + 2.0 * m_B * sigmabar)
                             -  5.0 * m_v2 * (12.0 * omega_1 + 3.0 * omega_2 - 4.0 * m_B * sigmabar)
                             + 5.0 * q2 * (12.0 * omega_1 + 3.0 * omega_2 - 4.0 * m_B * sigmabar)))
                             / (m_B2 * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2B_A1_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A1 proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_4     = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return  -(6.0 * m_v2 * (2.0 * (5.0 * omega_1 * q2 + m_B * (m_v2 + m_B2 * sigmabar2 - q2) * sigmabar
                    - omega_1 * (m_v + m_B * sigmabar) * (5.0 * m_v + 3.0 * m_B * sigmabar)
                    + m_B * sigma * (-(5.0 * q2) + (m_v + m_B * sigmabar) * (5.0 * m_v + 3.0 * m_B * sigmabar))) * psi_bar_bar_4
                    + m_B * (-omega_1 + m_B * sigma) * sigmabar * (-q2 + power_of<2>(m_v + m_B * sigmabar)) * psi_bar_4))
                    / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));
        }

        double I4d2C_A1_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * m_v2 * (power_of<2>(m_v - m_B * sigmabar) - q2) / (power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2D_A1_3pt_psiA_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to A1 proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_4     = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return    6.0 * m_v2 * pow(m_B,-2.0) * pow(sigmabar,-6.0)
                    * ((-m_v2 + m_B2 * sigmabar2 + q2) * psi_bar_bar_4
                    - m_B * sigmabar * (-q2 + power_of<2>(m_v + m_B * sigmabar))
                    * psi_bar_4)/ (m_B2 * power_of<6>(sigmabar));
        }

        double I2_A1_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to psi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_2 = 2.0 * u * (2.0 * m_B * sigmabar * (2.0 * u -1.0) - 3.0 * m_v) / (power_of<3>(m_B) * power_of<4>(sigmabar));

            return C_2 * psi_bar_bar_4;
        }

        double I3_A1_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * u * (m_v * (6.0 * q2 - 2.0 * m_B2 * sigmabar2) + 2.0 * m_B * sigmabar * (2.0 * u -1.0)
                             * (m_B2 * sigmabar2 - q2) + m_B * m_v2 * sigmabar * (1.0 - 2.0 * u) - 6.0 * m_v2 * m_v)
                             / (power_of<3>(m_B) * power_of<5>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1A_A1_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B),   m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(),   m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -(2.0 * (40.0 * m_B3 * m_v2 * sigma3
                             + 2.0 * m_B3 * (m_v * omega_2 - 2.0 * omega_1 * (2.0 * omega_1 + omega_2)) * sigmabar3
                             + 2.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar4
                             + 30.0 * m_v * omega_1 * omega_2 * (-m_v2 + q2)
                             - 4.0 * m_B2 * sigma2 * (10.0 * m_B * m_v2 + 5.0 * m_v2 * (4.0 * omega_1 + omega_2)
                             + 2.0 * m_B3 * sigmabar3 - 4.0 * m_B * (4.0 * m_v2 + q2) * sigmabar)
                             - m_B2 * sigmabar * (6.0 * m_v * omega_1 * omega_2 * sigmabar
                             + 2.0 * (4.0 * omega_1 + omega_2) * q2 * sigmabar
                             + m_v2 * (4.0 * omega_1 + omega_2) * (-4.0 + 5.0 * sigmabar))
                             + 2.0 * m_B * (3.0 * m_v3 * omega_2 * sigmabar - 3.0 * m_v * omega_2 * q2 * sigmabar
                             + 4.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar
                             + 2.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * (-5.0 + 6.0 * sigmabar))
                             + 2.0 * m_B * sigma * (2.0 * m_B3 * (4.0 * omega_1 + omega_2) * sigmabar3
                             - 4.0 * m_B4 * sigmabar4 + 5.0 * m_v
                             * (3.0 * m_v2 * omega_2 + 2.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2)
                             - 3.0 * omega_2 * q2) + m_B2 * sigmabar
                             * (3.0 * m_v * omega_2 * sigmabar + 4.0 * q2 * sigmabar
                             + 2.0 * m_v2 * (-4.0 + 5.0 * sigmabar))
                             - 2.0 * m_B * (4.0 * omega_1 + omega_2)
                             * (2.0 * q2 * sigmabar + m_v2 * (-5.0 + 7.0 * sigmabar)))))
                             / (m_B3 * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1B_A1_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A1 proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = (-2.0 * (-(6.0 * m_v3) - 2.0 * m_B2 * m_v * sigmabar2 + 2.0 * m_B3 * power_of<3>(sigmabar)
                             + 6.0 * m_v * q2 - m_B * (2.0 * q2 * sigmabar + m_v2 * (-4.0 + 4.0 * sigma + 5.0 * sigmabar))))
                             / (m_B2 * (-omega_1 + m_B * sigma) * power_of<5>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1C_A1_3pt_psiB_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to psi_bar_bar_4

            return 0.0;
        }

        double I4_A1_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * m_v * u * (m_B * m_v * sigmabar * (2.0 * u - 1.0) * (m_B2 *sigmabar2 - q2)
                             + power_of<2>(q2 - m_B2 * sigmabar2) + m_B * power_of<3>(m_v) *sigmabar * (2.0 * u - 1.0) + power_of<4>(m_v) - 2.0 * m_v2 * q2)
                             / (power_of<3>(m_B) * power_of<6>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1A_A1_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v), m_v5 = power_of<5>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar5 = power_of<5>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(2.0 * (-(4.0 * m_B2 * sigma4 * q2 * (12.0 * m_B * m_v2 + 3.0 * (4.0 * omega_1 + omega_2) * q2
                             + m_B * q2 * (6.0 - 11.0 * sigmabar))) + 24 * m_B3 * sigma5 * power_of<2>(q2)
                             + m_v * (3.0 * m_B5 * omega_2 * sigmabar5
                             + m_B3 * sigmabar2 * (-(6.0 * omega_2 * q2 * sigmabar)
                             + m_v * omega_1 * (2.0 * omega_1 + omega_2) * (-8.0 + 17.0 * sigmabar))
                             + m_B4 * sigmabar3 * (-(6.0 * omega_1 * omega_2 * sigmabar)
                             - m_v * (4.0 * omega_1 + omega_2) * (-2.0 + 5.0 * sigmabar))
                             + m_B2 * sigmabar * (24 * omega_1 * omega_2 * q2 * sigmabar
                             - m_v3 * (4.0 * omega_1 + omega_2) * (-2.0 + 5.0 * sigmabar)
                             + m_v * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (-2.0 + 5.0 * sigmabar))
                             - 18.0 * omega_1 * omega_2 * power_of<2>(m_v2 - q2)
                             + 3.0 * m_B * (m_v4 * omega_2 * sigmabar - 2.0 * m_v2 * omega_2 * q2 * sigmabar
                             - 5.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar * (-1 + 2.0 * sigmabar)
                             + m_v3 * omega_1 * (2.0 * omega_1 + omega_2) * (-4.0 + 9.0 * sigmabar)
                             + omega_2 * sigmabar * power_of<2>(q2)))
                             + 2.0 * m_B * sigma3 * (8.0 * m_B4 * m_v2 * sigmabar2
                             + 2.0 * m_B * (4.0 * omega_1 + omega_2) * q2
                             * (6.0 * m_v2 + q2 * (3.0 - 5.0 * sigmabar))
                             + 6.0 * omega_1 * (2.0 * omega_1 + omega_2) * power_of<2>(q2)
                             + m_B2 * (12.0 * m_v4 + m_v2 * q2 * (24 - 62 * sigmabar) + 5.0 * m_v * omega_2 * q2 * sigmabar
                             + 10.0 * (-1.0 + sigmabar) * sigmabar * power_of<2>(q2)))
                             + m_B * sigma * (-(m_B3 * m_v2 * (4.0 * omega_1 + omega_2) * sigmabar2
                             * (-8.0 + 19.0 * sigmabar))
                             + m_B * m_v * (-(10.0 * omega_1 * omega_2 * q2 * (-1.0 + sigmabar) * sigmabar)
                             - m_v3 * (4.0 * omega_1 + omega_2) * (-12.0 + 29.0 * sigmabar)
                             + m_v * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (-19.0 + 39.0 * sigmabar))
                             + 2.0 * m_B4 * m_v * sigmabar3
                             * (3.0 * omega_2 * sigmabar + 2.0 * m_v * (-2.0 + 5.0 * sigmabar))
                             + 2.0 * m_B2 * m_v * sigmabar * (omega_2 * q2 * sigmabar * (-13.0 + sigmabar)
                             + 2.0 * m_v3 * (-2.0 + 5.0 * sigmabar)
                             + 2.0 * m_v * sigmabar * (2.0 * omega_1 * (2.0 * omega_1 + omega_2)
                             + q2 * (2.0 - 5.0 * sigmabar)))
                             + 6.0 * (3.0 * m_v5 * omega_2 + 2.0 * m_v4 * omega_1 * (2.0 * omega_1 + omega_2)
                             - 6.0 * m_v3 * omega_2 * q2
                             - m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (-4.0 + 9.0 * sigmabar)
                             + 3.0 * m_v * omega_2 * power_of<2>(q2) +
                             + omega_1 * (2.0 * omega_1 + omega_2) * (-1.0 + sigmabar) * sigmabar * power_of<2>(q2)))
                             + 2.0 * m_B * sigma2 * (-(4.0 * m_B3 * m_v2 * (4.0 * omega_1 + omega_2) * sigmabar2)
                             + m_B4 * m_v2 * sigmabar2 * (-8.0 + 21.0 * sigmabar)
                             + 3.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2
                             * (-(4.0 * m_v2) + q2 * (-2.0 + 3.0 * sigmabar))
                             + m_B2 * m_v * (m_v * q2 * (23 - 48.0 * sigmabar) * sigmabar + m_v3 * (-12.0 + 31.0 * sigmabar)
                             + omega_2 * q2 * sigmabar * (-5.0 + 6.0 * sigmabar))
                             - m_B * (6.0 * m_v4 * (4.0 * omega_1 + omega_2)
                             + 5.0 * m_v * omega_1 * omega_2 * q2 * sigmabar
                             - m_v2 * (4.0 * omega_1 + omega_2) * q2 * (-12.0 + 29.0 * sigmabar)
                             + 4.0 * (4.0 * omega_1 + omega_2) * (-1.0 + sigmabar) * sigmabar * power_of<2>(q2)))))
                             / (m_B3 * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1B_A1_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A1 proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * (3.0 * m_B4 * m_v * sigmabar4 + m_B3 * m_v2 * sigmabar2
                             * (-2.0 + 2.0 * sigma + 5.0 * sigmabar)
                             + 2.0 * m_B2 * m_v * q2 * sigmabar * (-(3.0 * sigmabar) + sigma * (-1.0 + sigma + sigmabar))
                             + 3.0 * m_v * power_of<2>(m_v2 - q2)
                             + m_B * (m_v4 * (-2.0 + 2.0 * sigma + 5.0 * sigmabar)
                             + m_v2 * q2 * (-(5.0 * sigmabar2) - 4.0 * (-1.0 + sigma) * sigma + 2.0 * sigmabar
                             - 9.0 * sigma * sigmabar) + 2.0 * sigma2 * (-1.0 + sigma + sigmabar) * power_of<2>(q2)))
                             / (m_B2 * power_of<6>(sigmabar) * omega_2);

            return C_4 * psi_bar_bar_4;
        }

        double I4d1C_A1_3pt_psiB_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to psi_bar_bar_4

            return 0.0;
        }
        double I4d2A_A1_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v), m_v5 = power_of<5>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 =-(4.0 * (-(6.0 * m_B2 * sigma4 * q2 * (28 * m_B * m_v2 + 7.0 * (4.0 * omega_1 + omega_2) * q2
                             + 2.0 * m_B * q2 * (7.0 - 17.0 * sigmabar)))
                             + m_B4 * m_v * sigmabar3 * (-(9.0 * omega_1 * omega_2 * sigmabar)
                             - m_v * (4.0 * omega_1 + omega_2) * (-8.0 + 17.0 * sigmabar))
                             + 2.0 * m_B5 * m_v * sigmabar4 * (3.0 * omega_2 * sigmabar + m_v * (-2.0 + 5.0 * sigmabar))
                             + 2.0 * m_B3 * m_v * sigmabar2 * (-(12.0 * omega_2 * q2 * sigmabar)
                             + m_v * omega_1 * (2.0 * omega_1 + omega_2) * (-10.0 + 19.0 * sigmabar)
                             + m_v * q2 * sigmabar * (2.0 - 5.0 * sigmabar) + m_v3 * (-2.0 + 5.0 * sigmabar))
                             - 3.0 * m_B2 * m_v * sigmabar * (-(20.0 * omega_1 * omega_2 * q2 * sigmabar)
                             - 5.0 * m_v * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (-1.0 + 2.0 * sigmabar)
                             + m_v3 * (4.0 * omega_1 + omega_2) * (-4.0 + 9.0 * sigmabar))
                             - 63.0 * m_v * omega_1 * omega_2 * power_of<2>(m_v2 - q2) + 84.0 * m_B3 * sigma5 * power_of<2>(q2)
                             + m_B * (18.0 * m_v5 * omega_2 * sigmabar - 36.0 * m_v3 * omega_2 * q2 * sigmabar
                             + 3.0 * m_v4 * omega_1 * (2.0 * omega_1 + omega_2) * (-14.0 + 29.0 * sigmabar)
                             - 15.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar
                             * (-4.0 + 7.0 * sigmabar) + 4.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar2
                             * (-1.0 + sigmabar) * power_of<2>(q2) + 18.0 * m_v * omega_2 * sigmabar * power_of<2>(q2))
                             + m_B * sigma * (63.0 * m_v5 * omega_2 + 42.0 * m_v4 * omega_1 * (2.0 * omega_1 + omega_2)
                             - 126.0 * m_v3 * omega_2 * q2 - 2.0 * m_B3 * m_v2 * (4.0 * omega_1 + omega_2) * sigmabar2
                             * (-10.0 + 23.0 * sigmabar) - 21.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * q2
                             * (-4.0 + 9.0 * sigmabar) + 2.0 * m_B2 * m_v * sigmabar
                             * (m_v * (10.0 * omega_1 * (2.0 * omega_1 + omega_2) + q2 * (34.0 - 69.0 * sigmabar))
                             * sigmabar + 5.0 * omega_2 * q2 * sigmabar * (-7.0 + sigmabar)
                             + 8.0 * m_v3 * (-3.0 + 7.0 * sigmabar))
                             + m_B4 * m_v * sigmabar3 * (9.0 * omega_2 * sigmabar
                             + 8.0 * m_v * (-4.0 + 9.0 * sigmabar)) + 63 * m_v * omega_2 * power_of<2>(q2)
                             + 4.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar * (-9.0 + 10.0 * sigmabar)
                             * power_of<2>(q2) + m_B * (-30.0 * m_v * omega_1 * omega_2 * q2 * (-1.0 + sigmabar) * sigmabar
                             - 3.0 * m_v4 * (4.0 * omega_1 + omega_2) * (-14.0 + 33.0 * sigmabar)
                             + 3.0 * m_v2 * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (-28.0 + 53.0 * sigmabar)
                             - 10.0 * (4.0 * omega_1 + omega_2) * sigmabar2 * (-1.0 + sigmabar) * power_of<2>(q2)))
                             + m_B * sigma2 * (-(20.0 * m_B3 * m_v2 * (4.0 * omega_1 + omega_2) * sigmabar2)
                             + 4.0 * m_B4 * m_v2 * sigmabar2 * (-10.0 + 27.0 * sigmabar)
                             + 6.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2
                             * (-(7.0 * (2.0 * m_v2 + q2)) + 13.0 * q2 * sigmabar)
                             + m_B2 * (2.0 * m_v2 * q2 * (108.0 - 217.0 * sigmabar) * sigmabar
                             + 6.0 * m_v4 * (-14.0 + 37.0 * sigmabar)
                             + 10.0 * m_v * omega_2 * q2 * sigmabar * (-3.0 + 4.0 * sigmabar)
                             + 36.0 * sigmabar2 * (-1.0 + sigmabar) * power_of<2>(q2))
                             - m_B * (42.0 * m_v4 * (4.0 * omega_1 + omega_2)
                             + 30.0 * m_v * omega_1 * omega_2 * q2 * sigmabar
                             - 3.0 * m_v2 * (4.0 * omega_1 + omega_2) * q2 * (-28.0 + 71.0 * sigmabar)
                             + 2.0 * (4.0 * omega_1 + omega_2) * sigmabar * (-24.0 + 29.0 * sigmabar) * power_of<2>(q2)))
                             + 2.0 * m_B * sigma3 * (20.0 * m_B4 * m_v2 * sigmabar2
                             + 3.0 * m_B * (4.0 * omega_1 + omega_2) * q2
                             * (14.0 * m_v2 + q2 * (7.0 - 15.0 * sigmabar))
                             + 21.0 * omega_1 * (2.0 * omega_1 + omega_2) * power_of<2>(q2)
                             + 3.0 * m_B2 * (14.0 * m_v4 + m_v2 * q2 * (28.0 - 79.0 * sigmabar)
                             + 5.0 * m_v * omega_2 * q2 * sigmabar
                             + 2.0 * sigmabar * (-10.0 + 13.0 * sigmabar) * power_of<2>(q2)))))
                             / (m_B3 * power_of<2>(omega_2) * power_of<8>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2B_A1_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A1 proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double psi_bar_4     = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return  (4.0 * psi_bar_bar_4 * (2.0 * m_B * sigma3 * q2 * (-(6.0 * omega_1 * q2) - 6.0 * m_B * (2.0 * m_v2 + q2)
                   + 5.0 * m_B * (m_B * m_v + 2.0 * q2) * sigmabar)
                   + m_v * (m_B2 * m_v * sigmabar * (-2.0 + 5.0 * sigmabar)
                   * (m_v2 + sigmabar * (-q2 + m_B2 * sigmabar))
                   + omega_1 * (-(6.0 * m_B4 * sigmabar4) + 24.0 * m_B2 * sigmabar2 * q2
                   + m_B3 * m_v * sigmabar2 * (8.0 - 17.0 * sigmabar)
                   + 3.0 * m_B * m_v * (5.0 * q2 * sigmabar * (-1.0 + 2.0 * sigmabar)
                   + m_v2 * (4.0 - 9.0 * sigmabar)) - 18.0 * power_of<2>(m_v2 - q2)))
                   + 12.0 * m_B2 * sigma4 * power_of<2>(q2)
                   + m_B * sigma * (6.0 * m_B4 * m_v * sigmabar4
                   - 8.0 * m_B2 * m_v * sigmabar2 * (m_v * omega_1 + 3.0 * q2)
                   + m_B3 * m_v2 * sigmabar2 * (-8.0 + 19.0 * sigmabar)
                   + m_B * m_v * (m_v * q2 * (19.0 - 39.0 * sigmabar) * sigmabar
                   - 10.0 * omega_1 * q2 * (-1.0 + sigmabar) * sigmabar + m_v3 * (-12.0 + 29.0 * sigmabar))
                   + 18.0 * m_v * power_of<2>(m_v2 - q2)
                   - 6.0 * omega_1 * (2.0 * m_v4 + m_v2 * q2 * (4.0 - 9.0 * sigmabar)
                   + (-1.0 + sigmabar) * sigmabar * power_of<2>(q2)))
                   + 2.0 * m_B * sigma2 * (omega_1 * q2
                   * (12.0 * m_v2 - 5.0 * m_B * m_v * sigmabar + q2 * (6.0 - 9.0 * sigmabar))
                   + m_B * (6.0 * m_v4 + m_v2 * (4.0 * m_B2 * sigmabar2 + q2 * (12.0 - 29.0 * sigmabar))
                   + 5.0 * m_B * m_v * q2 * (-1.0 + sigmabar) * sigmabar
                   + 4.0 * (-1.0 + sigmabar) * sigmabar * power_of<2>(q2))))
                   + 2.0 * m_B * (-omega_1 + m_B * sigma) * sigmabar
                   * (3.0 * m_B4 * m_v * sigmabar4
                   + m_B3 * m_v2 * sigmabar2 * (-2.0 + 2.0 * sigma + 5.0 * sigmabar)
                   + 2.0 * m_B2 * m_v * q2 * sigmabar * (-(3.0 * sigmabar) + sigma * (-1.0 + sigma + sigmabar))
                   + 3.0 * m_v * power_of<2>(m_v2 - q2)
                   + m_B * (m_v4 * (-2.0 + 2.0 * sigma + 5.0 * sigmabar)
                   + m_v2 * q2 * (-(5.0 * sigmabar2) - 4.0 * (-1.0 + sigma) * sigma + 2.0 * sigmabar
                   - 9.0 * sigma * sigmabar) + 2.0 * sigma2 * (-1.0 + sigma + sigmabar) * power_of<2>(q2))) * psi_bar_4)
                   / (m_B2 * power_of<2>(omega_2) * power_of<7>(sigmabar));
        }

        double I4d2C_A1_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(2.0 * (3.0 * m_B4 * m_v * sigmabar4 + m_B3 * m_v2 * sigmabar2
                             * (2.0 - 2.0 * sigma - 5.0 * sigmabar)
                             + 2.0 * m_B2 * m_v * q2 * sigmabar * (-(3.0 * sigmabar) + sigma * (-1.0 + sigma + sigmabar))
                             + 3.0 * m_v * power_of<2>(m_v2 - q2)
                             + m_B * (m_v4 * (2.0 - 2.0 * sigma - 5.0 * sigmabar)
                             + m_v2 * q2 * (5.0 * sigmabar2 + 4.0 * (-1.0 + sigma) * sigma
                             + (-2.0 + 9.0 * sigma) * sigmabar) - 2.0 * sigma2 * (-1.0 + sigma + sigmabar) * power_of<2>(q2))))
                             / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2D_A1_3pt_psiB_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to A1 proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double psi_bar_4     = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return   2.0 * (psi_bar_bar_4 * (-(3.0 * m_B3 * m_v2 * sigmabar3) - 6.0 * m_B4 * m_v * sigmabar4
                   + 2.0 * m_B2 * m_v * q2 * sigma * sigmabar * (-1.0 + sigma + sigmabar)
                   + 6.0 * m_v * power_of<2>(m_v2 - q2)
                   + m_B * (m_v4 * (-4.0 + 4.0 * sigma + 7.0 * sigmabar)
                   + m_v2 * q2 * (7.0 * sigmabar - 2.0
                   * (5.0 * sigmabar2 + 4.0 * (-1.0 + sigma) * sigma + 9.0 * sigma * sigmabar))
                   + 2.0 * sigma * (-1.0 + sigma + sigmabar) * (2.0 * sigma + 3.0 * sigmabar) * power_of<2>(q2)))
                   + m_B * sigmabar * (3.0 * m_B4 * m_v * sigmabar4
                   + m_B3 * m_v2 * sigmabar2 * (-2.0 + 2.0 * sigma + 5.0 * sigmabar)
                   + 2.0 * m_B2 * m_v * q2 * sigmabar * (-(3.0 * sigmabar) + sigma * (-1.0 + sigma + sigmabar))
                   + 3.0 * m_v * power_of<2>(m_v2 - q2)
                   + m_B * (m_v4 * (-2.0 + 2.0 * sigma + 5.0 * sigmabar)
                   + m_v2 * q2 * (-(5.0 * sigmabar2) - 4.0 * (-1.0 + sigma) * sigma + 2.0 * sigmabar
                   - 9.0 * sigma * sigmabar) + 2.0 * sigma2 * (-1.0 + sigma + sigmabar) * power_of<2>(q2))) * psi_bar_4)
                   / (m_B3 * power_of<7>(sigmabar));
        }

        double I2_A1_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - 0.0                                                       - I2_A1_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3_A1_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I3_A1_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2)    - I3_A1_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1A_A1_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I3d1A_A1_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I3d1A_A1_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1B_A1_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return - I3d1B_A1_3pt_psiA_bar_bar_4( sigma, omega_1, q2)          - I3d1B_A1_3pt_psiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I3d1C_A1_3pt_psi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return - I3d1C_A1_3pt_psiA_bar_bar_4( sigma, omega_2, q2)          - I3d1C_A1_3pt_psiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4_A1_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I4_A1_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2)    - I4_A1_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1A_A1_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I4d1A_A1_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d1A_A1_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1B_A1_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return - I4d1B_A1_3pt_psiA_bar_bar_4( sigma, omega_1, q2)          - I4d1B_A1_3pt_psiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d1C_A1_3pt_psi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return - I4d1C_A1_3pt_psiA_bar_bar_4( sigma, omega_2, q2)          - I4d1C_A1_3pt_psiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2A_A1_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I4d2A_A1_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d2A_A1_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d2B_A1_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return - I4d2B_A1_3pt_psiA_bar_bar_4( sigma, omega_1, q2)          - I4d2B_A1_3pt_psiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d2C_A1_3pt_psi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return - I4d2C_A1_3pt_psiA_bar_bar_4( sigma, omega_2, q2)          - I4d2C_A1_3pt_psiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2D_A1_3pt_psi_bar_bar_4(const double & sigma, const double & q2) const
        {
            return - I4d2D_A1_3pt_psiA_bar_bar_4( sigma, q2)                   - I4d2D_A1_3pt_psiB_bar_bar_4(sigma, q2);
        }

        double I1_A1_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to chi_bar_4
            const double m_B3     = power_of<3>(m_B);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_1 = 2.0 / (m_B3 * power_of<3>(sigmabar));

            return C_1 * chi_bar_4;
        }

        double I2_A1_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to chi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_2 = 2.0 * (m_B2 * sigmabar2 * (1.0 - 2.0 * u) + 2.0 * m_B * m_v * sigmabar + 2.0 * m_v2 - 2.0 * q2)
                             / (power_of<3>(m_B) * power_of<4>(sigmabar));

            return C_2 * chi_bar_4;
        }

        double I3_A1_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to chi_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (2.0 * m_v * (m_B3 * sigmabar3 - m_B * q2 * sigmabar) - 2.0 * m_v2 * (m_B2 * sigmabar2 * (1.0 - 2.0 * u) + q2)
                             + power_of<2>(q2 - m_B2 * sigmabar2) + 2.0 * m_B * m_v3 * sigmabar + m_v4)
                             / (power_of<3>(m_B) * power_of<5>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I3d1A_A1_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to chi_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (5.0 * m_v4 * omega_2 + 8.0 * m_B * m_v3 * omega_2 * sigmabar
                             + m_B * m_v * omega_2 * sigmabar * (-(4.0 * q2 * (1.0 + sigma + sigmabar))
                             + m_B2 * sigmabar * (3.0 - 3.0 * sigma + sigmabar))
                             - 2.0 * m_v2 * (5.0 * omega_2 * q2
                             + m_B2 * sigmabar2 * (6.0 * omega_1 + 3.0 * omega_2 - 6.0 * m_B * sigma
                             - 2.0 * m_B * sigmabar)) + omega_2
                             * (2.0 * m_B4 * sigmabar3 * (-1.0 + sigma) + 5.0 * sigma2 * power_of<2>(q2)
                             + 10.0 * sigma * sigmabar * power_of<2>(q2)
                             + sigmabar2 * (-(6.0 * m_B2 * q2) + 5.0 * power_of<2>(q2) + 3.0 * m_B4 * power_of<2>(-1.0 + sigma))))
                             / (m_B3 * omega_2 * power_of<6>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I3d1B_A1_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A1 proportional to chi_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = -(2.0 * (m_v4 - 2.0 * m_v2 * (-(m_B2 * sigmabar2) + q2)
                             + 2.0 * m_B * m_v3 * sigmabar + m_B * m_v * sigmabar
                             * (m_B2 * sigmabar * (1 - sigma + sigmabar) - q2 * (1.0 + sigma + sigmabar))
                             + sigma2 * power_of<2>(q2) + 2.0 * sigma * sigmabar * power_of<2>(q2)
                             + sigmabar2 * (-(2.0 * m_B2 * q2) + power_of<2>(q2) + m_B4 * power_of<2>(-1.0 + sigma))))
                             / (m_B2 * (-omega_1 + m_B * sigma) * power_of<5>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I3d1C_A1_3pt_chi_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to chi_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (m_v4 - 2.0 * m_v2 * (m_B2 * sigmabar2 + q2)
                             + 2.0 * m_B * m_v3 * sigmabar + m_B * m_v * sigmabar
                             * (m_B2 * sigmabar * (1 - sigma + sigmabar) - q2 * (1.0 + sigma + sigmabar))
                             + sigma2 * power_of<2>(q2) + 2.0 * sigma * sigmabar * power_of<2>(q2)
                             + sigmabar2 * (-(2.0 * m_B2 * q2) + power_of<2>(q2) + m_B4 * power_of<2>(-1.0 + sigma)))
                             / (m_B2 * omega_2 * power_of<5>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I3_A1_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 6.0 * m_v * u * (2 * m_B * sigmabar + m_v * (2.0 * u - 1.0)) / (m_B2 * power_of<4>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1A_A1_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 6.0 * m_v * (4.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) + 8.0 * m_B2 * m_v * sigma2
                             + 2.0 * m_B2 * omega_2 * sigmabar2
                             - m_B * (4.0 * m_v * omega_1 + m_v * omega_2 + 6.0 * omega_1 * omega_2) * sigmabar
                             + 2.0 * m_B * sigma * (3.0 * m_B * omega_2 * sigmabar
                             - 2.0 * m_v * (4.0 * omega_1 + omega_2 - m_B * sigmabar)))
                             / (m_B2 * power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1B_A1_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -6.0 * m_v * (2.0 * m_B * sigmabar + m_v) / (m_B * (-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1C_A1_3pt_chiA_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to chi_bar_bar_4

            return 0.0;
        }

        double I4_A1_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = u * 6.0 * m_v2 * (-1.0 * (2.0 * u - 1.0) * (q2 - m_B2 * sigmabar2) + 2.0 * m_B * m_v * sigmabar + m_v2 * (2.0 * u - 1.0))
                             / (m_B2 * power_of<5>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1A_A1_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_v2 * (m_B2 * (2.0 * m_v * omega_2
                             + 3.0 * omega_1 * (2.0 * omega_1 + omega_2)) * sigmabar2
                             - m_B3 * (4.0 * omega_1 + omega_2) * sigmabar3
                             + 5.0 * omega_1 * (2.0 * omega_1 + omega_2) * (m_v2 - q2)
                             + 2.0 * m_B2 * sigma2 * (5.0 * m_v2 + 3.0 * m_B2 * sigmabar2 - 5.0 * q2)
                             + m_B * (-(8.0 * m_v * omega_1 * omega_2) - m_v2 * (4.0 * omega_1 + omega_2)
                             + (4.0 * omega_1 + omega_2) * q2) * sigmabar
                             + m_B * sigma * (8.0 * m_B * m_v * omega_2 * sigmabar
                             + q2 * (20.0 * omega_1 + 5.0 * omega_2 - 4.0 * m_B * sigmabar)
                             + m_B2 * sigmabar2 * (-12 * omega_1 - 3.0 * omega_2 + 4.0 * m_B * sigmabar)
                             + m_v2 * (-20.0 * omega_1 - 5.0 * omega_2 + 4.0 * m_B * sigmabar)))
                             / (m_B2 * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1B_A1_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A1 proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = - 6.0 * m_v2 * (power_of<2>((m_B * sigmabar + m_v)) - q2) / (m_B * power_of<5>(sigmabar) * omega_2);

            return C_4 * chi_bar_bar_4;
        }

        double I4d1C_A1_3pt_chiA_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to chi_bar_bar_4

            return 0.0;
        }
        double I4d2A_A1_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 12.0 * m_v2 * (-(3.0 * m_B3 * (4.0 * omega_1 + omega_2) * sigmabar3)
                             + 2.0 * m_B4 * sigmabar4 + 15.0 * omega_1 * (2.0 * omega_1 + omega_2) * (m_v2 - q2)
                             + 2.0 * m_B2 * sigmabar2 * (m_v2 + 4.0 * m_v * omega_2
                             + 3.0 * omega_1 * (2.0 * omega_1 + omega_2) - q2)
                             + 6.0 * m_B2 * sigma2 * (5.0 * m_v2 + 2.0 * m_B2 * sigmabar2 - 5.0 * q2)
                             - 5.0 * m_B * (4.0 * m_v * omega_1 * (m_v + omega_2) + omega_2 * (m_v2 - q2)
                             - 4.0 * omega_1 * q2) * sigmabar + m_B * sigma
                             * (20.0 * m_B * m_v * omega_2 * sigmabar
                             + 6.0 * m_B2 * sigmabar2 * (-(4.0 * omega_1) - omega_2 + 2.0 * m_B * sigmabar)
                             -  5.0 * m_v2 * (12.0 * omega_1 + 3.0 * omega_2 - 4.0 * m_B * sigmabar)
                             + 5.0 * q2 * (12.0 * omega_1 + 3.0 * omega_2 - 4.0 * m_B * sigmabar)))
                             / (m_B2 * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2B_A1_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A1 proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_4     = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return  -(6.0 * m_v2 * (2.0 * (5.0 * omega_1 * q2 + m_B * (m_v2 + m_B2 * sigmabar2 - q2) * sigmabar
                    - omega_1 * (m_v + m_B * sigmabar) * (5.0 * m_v + 3.0 * m_B * sigmabar)
                    + m_B * sigma * (-(5.0 * q2) + (m_v + m_B * sigmabar) * (5.0 * m_v + 3.0 * m_B * sigmabar))) * chi_bar_bar_4
                    + m_B * (-omega_1 + m_B * sigma) * sigmabar * (-q2 + power_of<2>(m_v + m_B * sigmabar)) * chi_bar_4))
                    / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));
        }

        double I4d2C_A1_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * m_v2 * (power_of<2>(m_v - m_B * sigmabar) - q2) / (power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2D_A1_3pt_chiA_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to A1 proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_4     = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return    6.0 * m_v2 * pow(m_B,-2.0) * pow(sigmabar,-6.0)
                    * ((-m_v2 + m_B2 * sigmabar2 + q2) * chi_bar_bar_4
                    - m_B * sigmabar * (-q2 + power_of<2>(m_v + m_B * sigmabar))
                    * chi_bar_4)/ (m_B2 * power_of<6>(sigmabar));
        }

        double I2_A1_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to chi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_2 = 2.0 * u * (2.0 * m_B * sigmabar * (2.0 * u -1.0) - 3.0 * m_v) / (power_of<3>(m_B) * power_of<4>(sigmabar));

            return C_2 * chi_bar_bar_4;
        }

        double I3_A1_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * u * (m_v * (6.0 * q2 - 2.0 * m_B2 * sigmabar2) + 2.0 * m_B * sigmabar * (2.0 * u -1.0)
                             * (m_B2 * sigmabar2 - q2) + m_B * m_v2 * sigmabar * (1.0 - 2.0 * u) - 6.0 * m_v2 * m_v)
                             / (power_of<3>(m_B) * power_of<5>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1A_A1_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B),   m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(),   m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -(2.0 * (40.0 * m_B3 * m_v2 * sigma3
                             + 2.0 * m_B3 * (m_v * omega_2 - 2.0 * omega_1 * (2.0 * omega_1 + omega_2)) * sigmabar3
                             + 2.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar4
                             + 30.0 * m_v * omega_1 * omega_2 * (-m_v2 + q2)
                             - 4.0 * m_B2 * sigma2 * (10.0 * m_B * m_v2 + 5.0 * m_v2 * (4.0 * omega_1 + omega_2)
                             + 2.0 * m_B3 * sigmabar3 - 4.0 * m_B * (4.0 * m_v2 + q2) * sigmabar)
                             - m_B2 * sigmabar * (6.0 * m_v * omega_1 * omega_2 * sigmabar
                             + 2.0 * (4.0 * omega_1 + omega_2) * q2 * sigmabar
                             + m_v2 * (4.0 * omega_1 + omega_2) * (-4.0 + 5.0 * sigmabar))
                             + 2.0 * m_B * (3.0 * m_v3 * omega_2 * sigmabar - 3.0 * m_v * omega_2 * q2 * sigmabar
                             + 4.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar
                             + 2.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * (-5.0 + 6.0 * sigmabar))
                             + 2.0 * m_B * sigma * (2.0 * m_B3 * (4.0 * omega_1 + omega_2) * sigmabar3
                             - 4.0 * m_B4 * sigmabar4 + 5.0 * m_v
                             * (3.0 * m_v2 * omega_2 + 2.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2)
                             - 3.0 * omega_2 * q2) + m_B2 * sigmabar
                             * (3.0 * m_v * omega_2 * sigmabar + 4.0 * q2 * sigmabar
                             + 2.0 * m_v2 * (-4.0 + 5.0 * sigmabar))
                             - 2.0 * m_B * (4.0 * omega_1 + omega_2)
                             * (2.0 * q2 * sigmabar + m_v2 * (-5.0 + 7.0 * sigmabar)))))
                             / (m_B3 * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1B_A1_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A1 proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = (-2.0 * (-(6.0 * m_v3) - 2.0 * m_B2 * m_v * sigmabar2 + 2.0 * m_B3 * power_of<3>(sigmabar)
                             + 6.0 * m_v * q2 - m_B * (2.0 * q2 * sigmabar + m_v2 * (-4.0 + 4.0 * sigma + 5.0 * sigmabar))))
                             / (m_B2 * (-omega_1 + m_B * sigma) * power_of<5>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1C_A1_3pt_chiB_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to chi_bar_bar_4

            return 0.0;
        }

        double I4_A1_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * m_v * u * (m_B * m_v * sigmabar * (2.0 * u - 1.0) * (m_B2 *sigmabar2 - q2)
                             + power_of<2>(q2 - m_B2 * sigmabar2) + m_B * power_of<3>(m_v) *sigmabar * (2.0 * u - 1.0) + power_of<4>(m_v) - 2.0 * m_v2 * q2)
                             / (power_of<3>(m_B) * power_of<6>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1A_A1_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v), m_v5 = power_of<5>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar5 = power_of<5>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(2.0 * (-(4.0 * m_B2 * sigma4 * q2 * (12.0 * m_B * m_v2 + 3.0 * (4.0 * omega_1 + omega_2) * q2
                             + m_B * q2 * (6.0 - 11.0 * sigmabar))) + 24 * m_B3 * sigma5 * power_of<2>(q2)
                             + m_v * (3.0 * m_B5 * omega_2 * sigmabar5
                             + m_B3 * sigmabar2 * (-(6.0 * omega_2 * q2 * sigmabar)
                             + m_v * omega_1 * (2.0 * omega_1 + omega_2) * (-8.0 + 17.0 * sigmabar))
                             + m_B4 * sigmabar3 * (-(6.0 * omega_1 * omega_2 * sigmabar)
                             - m_v * (4.0 * omega_1 + omega_2) * (-2.0 + 5.0 * sigmabar))
                             + m_B2 * sigmabar * (24 * omega_1 * omega_2 * q2 * sigmabar
                             - m_v3 * (4.0 * omega_1 + omega_2) * (-2.0 + 5.0 * sigmabar)
                             + m_v * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (-2.0 + 5.0 * sigmabar))
                             - 18.0 * omega_1 * omega_2 * power_of<2>(m_v2 - q2)
                             + 3.0 * m_B * (m_v4 * omega_2 * sigmabar - 2.0 * m_v2 * omega_2 * q2 * sigmabar
                             - 5.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar * (-1 + 2.0 * sigmabar)
                             + m_v3 * omega_1 * (2.0 * omega_1 + omega_2) * (-4.0 + 9.0 * sigmabar)
                             + omega_2 * sigmabar * power_of<2>(q2)))
                             + 2.0 * m_B * sigma3 * (8.0 * m_B4 * m_v2 * sigmabar2
                             + 2.0 * m_B * (4.0 * omega_1 + omega_2) * q2
                             * (6.0 * m_v2 + q2 * (3.0 - 5.0 * sigmabar))
                             + 6.0 * omega_1 * (2.0 * omega_1 + omega_2) * power_of<2>(q2)
                             + m_B2 * (12.0 * m_v4 + m_v2 * q2 * (24 - 62 * sigmabar) + 5.0 * m_v * omega_2 * q2 * sigmabar
                             + 10.0 * (-1.0 + sigmabar) * sigmabar * power_of<2>(q2)))
                             + m_B * sigma * (-(m_B3 * m_v2 * (4.0 * omega_1 + omega_2) * sigmabar2
                             * (-8.0 + 19.0 * sigmabar))
                             + m_B * m_v * (-(10.0 * omega_1 * omega_2 * q2 * (-1.0 + sigmabar) * sigmabar)
                             - m_v3 * (4.0 * omega_1 + omega_2) * (-12.0 + 29.0 * sigmabar)
                             + m_v * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (-19.0 + 39.0 * sigmabar))
                             + 2.0 * m_B4 * m_v * sigmabar3
                             * (3.0 * omega_2 * sigmabar + 2.0 * m_v * (-2.0 + 5.0 * sigmabar))
                             + 2.0 * m_B2 * m_v * sigmabar * (omega_2 * q2 * sigmabar * (-13.0 + sigmabar)
                             + 2.0 * m_v3 * (-2.0 + 5.0 * sigmabar)
                             + 2.0 * m_v * sigmabar * (2.0 * omega_1 * (2.0 * omega_1 + omega_2)
                             + q2 * (2.0 - 5.0 * sigmabar)))
                             + 6.0 * (3.0 * m_v5 * omega_2 + 2.0 * m_v4 * omega_1 * (2.0 * omega_1 + omega_2)
                             - 6.0 * m_v3 * omega_2 * q2
                             - m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (-4.0 + 9.0 * sigmabar)
                             + 3.0 * m_v * omega_2 * power_of<2>(q2) +
                             + omega_1 * (2.0 * omega_1 + omega_2) * (-1.0 + sigmabar) * sigmabar * power_of<2>(q2)))
                             + 2.0 * m_B * sigma2 * (-(4.0 * m_B3 * m_v2 * (4.0 * omega_1 + omega_2) * sigmabar2)
                             + m_B4 * m_v2 * sigmabar2 * (-8.0 + 21.0 * sigmabar)
                             + 3.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2
                             * (-(4.0 * m_v2) + q2 * (-2.0 + 3.0 * sigmabar))
                             + m_B2 * m_v * (m_v * q2 * (23 - 48.0 * sigmabar) * sigmabar + m_v3 * (-12.0 + 31.0 * sigmabar)
                             + omega_2 * q2 * sigmabar * (-5.0 + 6.0 * sigmabar))
                             - m_B * (6.0 * m_v4 * (4.0 * omega_1 + omega_2)
                             + 5.0 * m_v * omega_1 * omega_2 * q2 * sigmabar
                             - m_v2 * (4.0 * omega_1 + omega_2) * q2 * (-12.0 + 29.0 * sigmabar)
                             + 4.0 * (4.0 * omega_1 + omega_2) * (-1.0 + sigmabar) * sigmabar * power_of<2>(q2)))))
                             / (m_B3 * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1B_A1_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A1 proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * (3.0 * m_B4 * m_v * sigmabar4 + m_B3 * m_v2 * sigmabar2
                             * (-2.0 + 2.0 * sigma + 5.0 * sigmabar)
                             + 2.0 * m_B2 * m_v * q2 * sigmabar * (-(3.0 * sigmabar) + sigma * (-1.0 + sigma + sigmabar))
                             + 3.0 * m_v * power_of<2>(m_v2 - q2)
                             + m_B * (m_v4 * (-2.0 + 2.0 * sigma + 5.0 * sigmabar)
                             + m_v2 * q2 * (-(5.0 * sigmabar2) - 4.0 * (-1.0 + sigma) * sigma + 2.0 * sigmabar
                             - 9.0 * sigma * sigmabar) + 2.0 * sigma2 * (-1.0 + sigma + sigmabar) * power_of<2>(q2)))
                             / (m_B2 * power_of<6>(sigmabar) * omega_2);

            return C_4 * chi_bar_bar_4;
        }

        double I4d1C_A1_3pt_chiB_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A1 proportional to chi_bar_bar_4

            return 0.0;
        }
        double I4d2A_A1_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v), m_v5 = power_of<5>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 =-(4.0 * (-(6.0 * m_B2 * sigma4 * q2 * (28 * m_B * m_v2 + 7.0 * (4.0 * omega_1 + omega_2) * q2
                             + 2.0 * m_B * q2 * (7.0 - 17.0 * sigmabar)))
                             + m_B4 * m_v * sigmabar3 * (-(9.0 * omega_1 * omega_2 * sigmabar)
                             - m_v * (4.0 * omega_1 + omega_2) * (-8.0 + 17.0 * sigmabar))
                             + 2.0 * m_B5 * m_v * sigmabar4 * (3.0 * omega_2 * sigmabar + m_v * (-2.0 + 5.0 * sigmabar))
                             + 2.0 * m_B3 * m_v * sigmabar2 * (-(12.0 * omega_2 * q2 * sigmabar)
                             + m_v * omega_1 * (2.0 * omega_1 + omega_2) * (-10.0 + 19.0 * sigmabar)
                             + m_v * q2 * sigmabar * (2.0 - 5.0 * sigmabar) + m_v3 * (-2.0 + 5.0 * sigmabar))
                             - 3.0 * m_B2 * m_v * sigmabar * (-(20.0 * omega_1 * omega_2 * q2 * sigmabar)
                             - 5.0 * m_v * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (-1.0 + 2.0 * sigmabar)
                             + m_v3 * (4.0 * omega_1 + omega_2) * (-4.0 + 9.0 * sigmabar))
                             - 63.0 * m_v * omega_1 * omega_2 * power_of<2>(m_v2 - q2) + 84.0 * m_B3 * sigma5 * power_of<2>(q2)
                             + m_B * (18.0 * m_v5 * omega_2 * sigmabar - 36.0 * m_v3 * omega_2 * q2 * sigmabar
                             + 3.0 * m_v4 * omega_1 * (2.0 * omega_1 + omega_2) * (-14.0 + 29.0 * sigmabar)
                             - 15.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar
                             * (-4.0 + 7.0 * sigmabar) + 4.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar2
                             * (-1.0 + sigmabar) * power_of<2>(q2) + 18.0 * m_v * omega_2 * sigmabar * power_of<2>(q2))
                             + m_B * sigma * (63.0 * m_v5 * omega_2 + 42.0 * m_v4 * omega_1 * (2.0 * omega_1 + omega_2)
                             - 126.0 * m_v3 * omega_2 * q2 - 2.0 * m_B3 * m_v2 * (4.0 * omega_1 + omega_2) * sigmabar2
                             * (-10.0 + 23.0 * sigmabar) - 21.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * q2
                             * (-4.0 + 9.0 * sigmabar) + 2.0 * m_B2 * m_v * sigmabar
                             * (m_v * (10.0 * omega_1 * (2.0 * omega_1 + omega_2) + q2 * (34.0 - 69.0 * sigmabar))
                             * sigmabar + 5.0 * omega_2 * q2 * sigmabar * (-7.0 + sigmabar)
                             + 8.0 * m_v3 * (-3.0 + 7.0 * sigmabar))
                             + m_B4 * m_v * sigmabar3 * (9.0 * omega_2 * sigmabar
                             + 8.0 * m_v * (-4.0 + 9.0 * sigmabar)) + 63 * m_v * omega_2 * power_of<2>(q2)
                             + 4.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar * (-9.0 + 10.0 * sigmabar)
                             * power_of<2>(q2) + m_B * (-30.0 * m_v * omega_1 * omega_2 * q2 * (-1.0 + sigmabar) * sigmabar
                             - 3.0 * m_v4 * (4.0 * omega_1 + omega_2) * (-14.0 + 33.0 * sigmabar)
                             + 3.0 * m_v2 * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (-28.0 + 53.0 * sigmabar)
                             - 10.0 * (4.0 * omega_1 + omega_2) * sigmabar2 * (-1.0 + sigmabar) * power_of<2>(q2)))
                             + m_B * sigma2 * (-(20.0 * m_B3 * m_v2 * (4.0 * omega_1 + omega_2) * sigmabar2)
                             + 4.0 * m_B4 * m_v2 * sigmabar2 * (-10.0 + 27.0 * sigmabar)
                             + 6.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2
                             * (-(7.0 * (2.0 * m_v2 + q2)) + 13.0 * q2 * sigmabar)
                             + m_B2 * (2.0 * m_v2 * q2 * (108.0 - 217.0 * sigmabar) * sigmabar
                             + 6.0 * m_v4 * (-14.0 + 37.0 * sigmabar)
                             + 10.0 * m_v * omega_2 * q2 * sigmabar * (-3.0 + 4.0 * sigmabar)
                             + 36.0 * sigmabar2 * (-1.0 + sigmabar) * power_of<2>(q2))
                             - m_B * (42.0 * m_v4 * (4.0 * omega_1 + omega_2)
                             + 30.0 * m_v * omega_1 * omega_2 * q2 * sigmabar
                             - 3.0 * m_v2 * (4.0 * omega_1 + omega_2) * q2 * (-28.0 + 71.0 * sigmabar)
                             + 2.0 * (4.0 * omega_1 + omega_2) * sigmabar * (-24.0 + 29.0 * sigmabar) * power_of<2>(q2)))
                             + 2.0 * m_B * sigma3 * (20.0 * m_B4 * m_v2 * sigmabar2
                             + 3.0 * m_B * (4.0 * omega_1 + omega_2) * q2
                             * (14.0 * m_v2 + q2 * (7.0 - 15.0 * sigmabar))
                             + 21.0 * omega_1 * (2.0 * omega_1 + omega_2) * power_of<2>(q2)
                             + 3.0 * m_B2 * (14.0 * m_v4 + m_v2 * q2 * (28.0 - 79.0 * sigmabar)
                             + 5.0 * m_v * omega_2 * q2 * sigmabar
                             + 2.0 * sigmabar * (-10.0 + 13.0 * sigmabar) * power_of<2>(q2)))))
                             / (m_B3 * power_of<2>(omega_2) * power_of<8>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2B_A1_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A1 proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double chi_bar_4     = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return  (4.0 * chi_bar_bar_4 * (2.0 * m_B * sigma3 * q2 * (-(6.0 * omega_1 * q2) - 6.0 * m_B * (2.0 * m_v2 + q2)
                   + 5.0 * m_B * (m_B * m_v + 2.0 * q2) * sigmabar)
                   + m_v * (m_B2 * m_v * sigmabar * (-2.0 + 5.0 * sigmabar)
                   * (m_v2 + sigmabar * (-q2 + m_B2 * sigmabar))
                   + omega_1 * (-(6.0 * m_B4 * sigmabar4) + 24.0 * m_B2 * sigmabar2 * q2
                   + m_B3 * m_v * sigmabar2 * (8.0 - 17.0 * sigmabar)
                   + 3.0 * m_B * m_v * (5.0 * q2 * sigmabar * (-1.0 + 2.0 * sigmabar)
                   + m_v2 * (4.0 - 9.0 * sigmabar)) - 18.0 * power_of<2>(m_v2 - q2)))
                   + 12.0 * m_B2 * sigma4 * power_of<2>(q2)
                   + m_B * sigma * (6.0 * m_B4 * m_v * sigmabar4
                   - 8.0 * m_B2 * m_v * sigmabar2 * (m_v * omega_1 + 3.0 * q2)
                   + m_B3 * m_v2 * sigmabar2 * (-8.0 + 19.0 * sigmabar)
                   + m_B * m_v * (m_v * q2 * (19.0 - 39.0 * sigmabar) * sigmabar
                   - 10.0 * omega_1 * q2 * (-1.0 + sigmabar) * sigmabar + m_v3 * (-12.0 + 29.0 * sigmabar))
                   + 18.0 * m_v * power_of<2>(m_v2 - q2)
                   - 6.0 * omega_1 * (2.0 * m_v4 + m_v2 * q2 * (4.0 - 9.0 * sigmabar)
                   + (-1.0 + sigmabar) * sigmabar * power_of<2>(q2)))
                   + 2.0 * m_B * sigma2 * (omega_1 * q2
                   * (12.0 * m_v2 - 5.0 * m_B * m_v * sigmabar + q2 * (6.0 - 9.0 * sigmabar))
                   + m_B * (6.0 * m_v4 + m_v2 * (4.0 * m_B2 * sigmabar2 + q2 * (12.0 - 29.0 * sigmabar))
                   + 5.0 * m_B * m_v * q2 * (-1.0 + sigmabar) * sigmabar
                   + 4.0 * (-1.0 + sigmabar) * sigmabar * power_of<2>(q2))))
                   + 2.0 * m_B * (-omega_1 + m_B * sigma) * sigmabar
                   * (3.0 * m_B4 * m_v * sigmabar4
                   + m_B3 * m_v2 * sigmabar2 * (-2.0 + 2.0 * sigma + 5.0 * sigmabar)
                   + 2.0 * m_B2 * m_v * q2 * sigmabar * (-(3.0 * sigmabar) + sigma * (-1.0 + sigma + sigmabar))
                   + 3.0 * m_v * power_of<2>(m_v2 - q2)
                   + m_B * (m_v4 * (-2.0 + 2.0 * sigma + 5.0 * sigmabar)
                   + m_v2 * q2 * (-(5.0 * sigmabar2) - 4.0 * (-1.0 + sigma) * sigma + 2.0 * sigmabar
                   - 9.0 * sigma * sigmabar) + 2.0 * sigma2 * (-1.0 + sigma + sigmabar) * power_of<2>(q2))) * chi_bar_4)
                   / (m_B2 * power_of<2>(omega_2) * power_of<7>(sigmabar));
        }

        double I4d2C_A1_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A1 proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(2.0 * (3.0 * m_B4 * m_v * sigmabar4 + m_B3 * m_v2 * sigmabar2
                             * (2.0 - 2.0 * sigma - 5.0 * sigmabar)
                             + 2.0 * m_B2 * m_v * q2 * sigmabar * (-(3.0 * sigmabar) + sigma * (-1.0 + sigma + sigmabar))
                             + 3.0 * m_v * power_of<2>(m_v2 - q2)
                             + m_B * (m_v4 * (2.0 - 2.0 * sigma - 5.0 * sigmabar)
                             + m_v2 * q2 * (5.0 * sigmabar2 + 4.0 * (-1.0 + sigma) * sigma
                             + (-2.0 + 9.0 * sigma) * sigmabar) - 2.0 * sigma2 * (-1.0 + sigma + sigmabar) * power_of<2>(q2))))
                             / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2D_A1_3pt_chiB_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to A1 proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double chi_bar_4     = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return   2.0 * (chi_bar_bar_4 * (-(3.0 * m_B3 * m_v2 * sigmabar3) - 6.0 * m_B4 * m_v * sigmabar4
                   + 2.0 * m_B2 * m_v * q2 * sigma * sigmabar * (-1.0 + sigma + sigmabar)
                   + 6.0 * m_v * power_of<2>(m_v2 - q2)
                   + m_B * (m_v4 * (-4.0 + 4.0 * sigma + 7.0 * sigmabar)
                   + m_v2 * q2 * (7.0 * sigmabar - 2.0
                   * (5.0 * sigmabar2 + 4.0 * (-1.0 + sigma) * sigma + 9.0 * sigma * sigmabar))
                   + 2.0 * sigma * (-1.0 + sigma + sigmabar) * (2.0 * sigma + 3.0 * sigmabar) * power_of<2>(q2)))
                   + m_B * sigmabar * (3.0 * m_B4 * m_v * sigmabar4
                   + m_B3 * m_v2 * sigmabar2 * (-2.0 + 2.0 * sigma + 5.0 * sigmabar)
                   + 2.0 * m_B2 * m_v * q2 * sigmabar * (-(3.0 * sigmabar) + sigma * (-1.0 + sigma + sigmabar))
                   + 3.0 * m_v * power_of<2>(m_v2 - q2)
                   + m_B * (m_v4 * (-2.0 + 2.0 * sigma + 5.0 * sigmabar)
                   + m_v2 * q2 * (-(5.0 * sigmabar2) - 4.0 * (-1.0 + sigma) * sigma + 2.0 * sigmabar
                   - 9.0 * sigma * sigmabar) + 2.0 * sigma2 * (-1.0 + sigma + sigmabar) * power_of<2>(q2))) * chi_bar_4)
                   / (m_B3 * power_of<7>(sigmabar));
        }

        double I2_A1_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + 0.0                                                       - I2_A1_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3_A1_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I3_A1_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2)    - I3_A1_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1A_A1_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I3d1A_A1_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I3d1A_A1_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1B_A1_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return + I3d1B_A1_3pt_chiA_bar_bar_4( sigma, omega_1, q2)          - I3d1B_A1_3pt_chiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I3d1C_A1_3pt_chi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return + I3d1C_A1_3pt_chiA_bar_bar_4( sigma, omega_2, q2)          - I3d1C_A1_3pt_chiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4_A1_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I4_A1_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2)    - I4_A1_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1A_A1_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I4d1A_A1_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d1A_A1_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1B_A1_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return + I4d1B_A1_3pt_chiA_bar_bar_4( sigma, omega_1, q2)          - I4d1B_A1_3pt_chiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d1C_A1_3pt_chi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return + I4d1C_A1_3pt_chiA_bar_bar_4( sigma, omega_2, q2)          - I4d1C_A1_3pt_chiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2A_A1_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I4d2A_A1_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d2A_A1_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d2B_A1_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return + I4d2B_A1_3pt_chiA_bar_bar_4( sigma, omega_1, q2)          - I4d2B_A1_3pt_chiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d2C_A1_3pt_chi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return + I4d2C_A1_3pt_chiA_bar_bar_4( sigma, omega_2, q2)          - I4d2C_A1_3pt_chiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2D_A1_3pt_chi_bar_bar_4(const double & sigma, const double & q2) const
        {
            return + I4d2D_A1_3pt_chiA_bar_bar_4( sigma, q2)                   - I4d2D_A1_3pt_chiB_bar_bar_4(sigma, q2);
        }
        // }}}

        /* A1 : integrands and surface terms */
        // {{{
        double integrand_A1_2pt_disp(const double & sigma, const double & q2) const
        {
            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);
            const double etad3    = 24.0 * (eta - 1.0) * power_of<2>(eta) * (2.0 * eta - 1.0) / power_of<3>(sigmabar);

            const double I1   = I1_A1_2pt_phi_p(sigma, q2)     + I1_A1_2pt_phi_bar(sigma, q2)  + I1_A1_2pt_g_p(sigma, q2);
            const double I2   = I2_A1_2pt_phi_bar(sigma, q2)   + I2_A1_2pt_g_p(sigma, q2)      + I2_A1_2pt_g_bar(sigma, q2);
            const double I2d1 = I2d1_A1_2pt_phi_bar(sigma, q2) + I2d1_A1_2pt_g_p(sigma, q2)    + I2d1_A1_2pt_g_bar(sigma, q2);
            const double I3   = I3_A1_2pt_g_p(sigma, q2)       + I3_A1_2pt_g_bar(sigma, q2);
            const double I3d1 = I3d1_A1_2pt_g_p(sigma, q2)     + I3d1_A1_2pt_g_bar(sigma, q2);
            const double I3d2 = I3d2_A1_2pt_g_p(sigma, q2)     + I3d2_A1_2pt_g_bar(sigma, q2);
            const double I4   = I4_A1_2pt_g_bar(sigma, q2);
            const double I4d1 = I4d1_A1_2pt_g_bar(sigma, q2);
            const double I4d2 = I4d2_A1_2pt_g_bar(sigma, q2);
            const double I4d3 = I4d3_A1_2pt_g_bar(sigma, q2);

            double result = 0.0;
            result += -1.0 * I1;
            result += (etad1 * I2 + eta * I2d1) / m_B2;
            result += -1.0 * (I3 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I3d1 * eta * etad1 + I3d2 * power_of<2>(eta)) / (2.0 * m_B4);
            result += I4 * (power_of<2>(eta) * etad3 + 4.0 * eta * etad1 * etad2 + power_of<3>(etad1)) / (6.0 * m_B6);
            result += I4d1 * eta * (4.0 * eta * etad2 + 7.0 * power_of<2>(etad1)) / (6.0 * m_B6);
            result += I4d2 * 6.0 * power_of<2>(eta) * etad1 / (6.0 * m_B6);
            result += I4d3 * power_of<3>(eta) / (6.0 * m_B6);
            result *= exp;

            return result;
        }

        double integrand_A1_2pt_borel(const double & sigma, const double & q2) const
        {
            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double I1   = I1_A1_2pt_phi_p(sigma, q2)     + I1_A1_2pt_phi_bar(sigma, q2)  + I1_A1_2pt_g_p(sigma, q2);
            const double I2   = I2_A1_2pt_phi_bar(sigma, q2)   + I2_A1_2pt_g_p(sigma, q2)      + I2_A1_2pt_g_bar(sigma, q2);
            const double I3   = I3_A1_2pt_g_p(sigma, q2)       + I3_A1_2pt_g_bar(sigma, q2);
            const double I4   = I4_A1_2pt_g_bar(sigma, q2);

            double result = 0.0;
            result += - I1;
            result +=   I2 / M2;
            result += - I3 / (2.0 * M4);
            result +=   I4 / (6.0 * M6);
            result *= exp;

            return result;
        }

        double surface_A1_2pt(const double & sigma, const double & q2) const
        {
            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_A1_2pt_phi_bar(sigma, q2)   + I2_A1_2pt_g_p(sigma, q2)      + I2_A1_2pt_g_bar(sigma, q2);
            const double I3   = I3_A1_2pt_g_p(sigma, q2)       + I3_A1_2pt_g_bar(sigma, q2);
            const double I3d1 = I3d1_A1_2pt_g_p(sigma, q2)     + I3d1_A1_2pt_g_bar(sigma, q2);
            const double I4   = I4_A1_2pt_g_bar(sigma, q2);
            const double I4d1 = I4d1_A1_2pt_g_bar(sigma, q2);
            const double I4d2 = I4d2_A1_2pt_g_bar(sigma, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result += 0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / (power_of<2>( M2())));
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;

            return result;
        }

        /*
         * rewrite integration ranges such that:
         * 1.)
         *    0 <= x_1 <= 1,     and    0 <= x_2 <= 1,
         * 2.)
         *    x_1 and x_2 integration boundaries do not depend on the other variables
         *
         * We obtain the integrand
         *
         *    sigma m_B f(sigma m_B x_1, sigma m_B (xbar_1 xbar_2 + x_2) / xbar_2) / (xbar_1 xbar_2^2 + x_2 xbar_2),
         *
         * where
         *
         *    xbar_1 = 1.0 - x_1,    and    xbar_2 = 1.0 - x_2.
         */
        double integrand_A1_3pt(const std::array<double, 3> & args, const double & q2) const
        {
            const double sigma  = args[0];
            const double x_1    = args[1];
            const double x_2    = args[2];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double I1 = I1_A1_3pt_phi_3(sigma, omega_1, omega_2, q2)         + I1_A1_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                            + I1_A1_3pt_phi_4(sigma, omega_1, omega_2, q2)         + I1_A1_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                            + I1_A1_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I1_A1_3pt_chi_bar_4(sigma, omega_1, omega_2, q2);
            const double I2 = I2_A1_3pt_phi_3(sigma, omega_1, omega_2, q2)         + I2_A1_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                            + I2_A1_3pt_phi_4(sigma, omega_1, omega_2, q2)         + I2_A1_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_A1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_A1_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I2_A1_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_A1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I2_A1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3 = I3_A1_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)     + I3_A1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)
                            + I3_A1_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3_A1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I3_A1_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3_A1_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                            + I3_A1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3_A1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4 = I4_A1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4_A1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I4_A1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4_A1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result = 0.0;
            result += - I1;
            result +=   I2 / M2;
            result += - I3 / (2.0 * M4);
            result +=   I4 / (6.0 * M6);
            result *=   prefactor * exp;

            return result;
        }

        double surface_A1_3pt_A(const std::array<double, 2> & args, const double & sigma, const double & q2) const
        {
            const double x_1    = args[0];
            const double x_2    = args[1];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_A1_3pt_phi_3(sigma, omega_1, omega_2, q2)            + I2_A1_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                              + I2_A1_3pt_phi_4(sigma, omega_1, omega_2, q2)            + I2_A1_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_A1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_A1_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I2_A1_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_A1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I2_A1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3   = I3_A1_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)        + I3_A1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)
                              + I3_A1_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)        + I3_A1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_A1_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I3_A1_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_A1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I3_A1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3d1 = I3d1A_A1_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)     + I3d1A_A1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)
                              + I3d1A_A1_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_A1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_A1_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_A1_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_A1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3d1A_A1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4   = I4_A1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)    + I4_A1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4_A1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I4_A1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d1 = I4d1A_A1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d1A_A1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d1A_A1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d1A_A1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d2 = I4d2A_A1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d2A_A1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d2A_A1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d2A_A1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        double surface_A1_3pt_B(const double & x_1, const double & sigma, const double & q2) const
        {
            // this ONLY includes the Jacobian from the transformation (omega_1 -> x_1).
            const double prefactor = sigma * m_B();

            const double omega_1 = sigma * m_B() * x_1;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1B_A1_3pt_phi_bar_3(sigma, omega_1, q2)     + I3d1B_A1_3pt_phi_bar_bar_3(sigma, omega_1, q2)
                                  + I3d1B_A1_3pt_phi_bar_4(sigma, omega_1, q2)     + I3d1B_A1_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I3d1B_A1_3pt_psi_bar_4(sigma, omega_1, q2)     + I3d1B_A1_3pt_chi_bar_4(sigma, omega_1, q2)
                                  + I3d1B_A1_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I3d1B_A1_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1B_A1_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d1B_A1_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d1B_A1_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d1B_A1_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            const     double I4d2 = I4d2B_A1_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d2B_A1_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d2B_A1_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d2B_A1_3pt_chi_bar_bar_4(sigma, omega_1, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        double surface_A1_3pt_C(const double & x_2, const double & sigma, const double & q2) const
        {
            const double xbar_2 = 1.0 - x_2;

            // this ONLY includes the Jacobian from the transformation (omega_2 -> x_2).
            const double prefactor = sigma * m_B() / (xbar_2 * xbar_2);

            const double omega_2 = sigma * m_B() * (x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1C_A1_3pt_phi_bar_3(sigma, omega_2, q2)     + I3d1C_A1_3pt_phi_bar_bar_3(sigma, omega_2, q2)
                                  + I3d1C_A1_3pt_phi_bar_4(sigma, omega_2, q2)     + I3d1C_A1_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I3d1C_A1_3pt_psi_bar_4(sigma, omega_2, q2)     + I3d1C_A1_3pt_chi_bar_4(sigma, omega_2, q2)
                                  + I3d1C_A1_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I3d1C_A1_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1C_A1_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d1C_A1_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d1C_A1_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d1C_A1_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            const     double I4d2 = I4d2C_A1_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d2C_A1_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d2C_A1_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d2C_A1_3pt_chi_bar_bar_4(sigma, omega_2, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        double surface_A1_3pt_D(const double & sigma, const double & q2) const
        {
            // this does NOT includes the original factor of 1 / omega_2
            const double prefactor = 1.0;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);


            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            constexpr double I3d1 = 0.0;
            constexpr double I4   = 0.0;
            constexpr double I4d1 = 0.0;
            const     double I4d2 = I4d2D_A1_3pt_phi_bar_bar_3(sigma, q2) + I4d2D_A1_3pt_phi_bar_bar_4(sigma, q2)
                                  + I4d2D_A1_3pt_psi_bar_bar_4(sigma, q2) + I4d2D_A1_3pt_chi_bar_bar_4(sigma, q2);


            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        /*
         * Integrands for the first moments. Only the borel method is implemented
         */

        double integrand_A1_2pt_borel_m1(const double & sigma, const double & q2) const
        {
            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double I1   = I1_A1_2pt_phi_p(sigma, q2)     + I1_A1_2pt_phi_bar(sigma, q2)  + I1_A1_2pt_g_p(sigma, q2);
            const double I2   = I2_A1_2pt_phi_bar(sigma, q2)   + I2_A1_2pt_g_p(sigma, q2)      + I2_A1_2pt_g_bar(sigma, q2);
            const double I3   = I3_A1_2pt_g_p(sigma, q2)       + I3_A1_2pt_g_bar(sigma, q2);
            const double I4   = I4_A1_2pt_g_bar(sigma, q2);

            double result1 = 0.0;
            result1 += - I1;
            result1 +=   I2 / M2;
            result1 += - I3 / (2.0 * M4);
            result1 +=   I4 / (6.0 * M6);
            result1 *=   exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - I2;
            result2 +=   I3 / M2;
            result2 += - I4 / (2.0 * M4);
            result2 *=   exp;

            return result1 + result2;
        }

        double surface_A1_2pt_m1(const double & sigma, const double & q2) const
        {
            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double m_V2 = power_of<2>(m_V());
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_A1_2pt_phi_bar(sigma, q2)   + I2_A1_2pt_g_p(sigma, q2)      + I2_A1_2pt_g_bar(sigma, q2);
            const double I3   = I3_A1_2pt_g_p(sigma, q2)       + I3_A1_2pt_g_bar(sigma, q2);
            const double I3d1 = I3d1_A1_2pt_g_p(sigma, q2)     + I3d1_A1_2pt_g_bar(sigma, q2);
            const double I4   = I4_A1_2pt_g_bar(sigma, q2);
            const double I4d1 = I4d1_A1_2pt_g_bar(sigma, q2);
            const double I4d2 = I4d2_A1_2pt_g_bar(sigma, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return result1 + result2;
        }
        double integrand_A1_3pt_m1(const std::array<double, 3> & args, const double & q2) const
        {
            const double sigma  = args[0];
            const double x_1    = args[1];
            const double x_2    = args[2];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double I1 = I1_A1_3pt_phi_3(sigma, omega_1, omega_2, q2)         + I1_A1_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                            + I1_A1_3pt_phi_4(sigma, omega_1, omega_2, q2)         + I1_A1_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                            + I1_A1_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I1_A1_3pt_chi_bar_4(sigma, omega_1, omega_2, q2);
            const double I2 = I2_A1_3pt_phi_3(sigma, omega_1, omega_2, q2)         + I2_A1_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                            + I2_A1_3pt_phi_4(sigma, omega_1, omega_2, q2)         + I2_A1_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_A1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_A1_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I2_A1_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_A1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I2_A1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3 = I3_A1_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)     + I3_A1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)
                            + I3_A1_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3_A1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I3_A1_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3_A1_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                            + I3_A1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3_A1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4 = I4_A1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4_A1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I4_A1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4_A1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result1 = 0.0;
            result1 += - I1;
            result1 +=   I2 / M2;
            result1 += - I3 / (2.0 * M4);
            result1 +=   I4 / (6.0 * M6);
            result1 *=   exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - I2;
            result2 +=   I3 / M2;
            result2 += - I4 / (2.0 * M4);
            result2 *=   exp;

            return (result1 + result2) * prefactor;
        }

        double surface_A1_3pt_A_m1(const std::array<double, 2> & args, const double & sigma, const double & q2) const
        {
            const double x_1    = args[0];
            const double x_2    = args[1];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_A1_3pt_phi_3(sigma, omega_1, omega_2, q2)            + I2_A1_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                              + I2_A1_3pt_phi_4(sigma, omega_1, omega_2, q2)            + I2_A1_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_A1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_A1_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I2_A1_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_A1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I2_A1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3   = I3_A1_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)        + I3_A1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)
                              + I3_A1_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)        + I3_A1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_A1_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I3_A1_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_A1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I3_A1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3d1 = I3d1A_A1_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)     + I3d1A_A1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)
                              + I3d1A_A1_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_A1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_A1_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_A1_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_A1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3d1A_A1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4   = I4_A1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)    + I4_A1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4_A1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I4_A1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d1 = I4d1A_A1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d1A_A1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d1A_A1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d1A_A1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d2 = I4d2A_A1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d2A_A1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d2A_A1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d2A_A1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }

        double surface_A1_3pt_B_m1(const double & x_1, const double & sigma, const double & q2) const
        {
            // this ONLY includes the Jacobian from the transformation (omega_1 -> x_1).
            const double prefactor = sigma * m_B();

            const double omega_1 = sigma * m_B() * x_1;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1B_A1_3pt_phi_bar_3(sigma, omega_1, q2)     + I3d1B_A1_3pt_phi_bar_bar_3(sigma, omega_1, q2)
                                  + I3d1B_A1_3pt_phi_bar_4(sigma, omega_1, q2)     + I3d1B_A1_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I3d1B_A1_3pt_psi_bar_4(sigma, omega_1, q2)     + I3d1B_A1_3pt_chi_bar_4(sigma, omega_1, q2)
                                  + I3d1B_A1_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I3d1B_A1_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1B_A1_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d1B_A1_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d1B_A1_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d1B_A1_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            const     double I4d2 = I4d2B_A1_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d2B_A1_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d2B_A1_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d2B_A1_3pt_chi_bar_bar_4(sigma, omega_1, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }

        double surface_A1_3pt_C_m1(const double & x_2, const double & sigma, const double & q2) const
        {
            const double xbar_2 = 1.0 - x_2;

            // this ONLY includes the Jacobian from the transformation (omega_2 -> x_2).
            const double prefactor = sigma * m_B() / (xbar_2 * xbar_2);

            const double omega_2 = sigma * m_B() * (x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1C_A1_3pt_phi_bar_3(sigma, omega_2, q2)     + I3d1C_A1_3pt_phi_bar_bar_3(sigma, omega_2, q2)
                                  + I3d1C_A1_3pt_phi_bar_4(sigma, omega_2, q2)     + I3d1C_A1_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I3d1C_A1_3pt_psi_bar_4(sigma, omega_2, q2)     + I3d1C_A1_3pt_chi_bar_4(sigma, omega_2, q2)
                                  + I3d1C_A1_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I3d1C_A1_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1C_A1_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d1C_A1_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d1C_A1_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d1C_A1_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            const     double I4d2 = I4d2C_A1_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d2C_A1_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d2C_A1_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d2C_A1_3pt_chi_bar_bar_4(sigma, omega_2, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }

        double surface_A1_3pt_D_m1(const double & sigma, const double & q2) const
        {
            // this does NOT includes the original factor of 1 / omega_2
            const double prefactor = 1.0;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);


            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            constexpr double I3d1 = 0.0;
            constexpr double I4   = 0.0;
            constexpr double I4d1 = 0.0;
            const     double I4d2 = I4d2D_A1_3pt_phi_bar_bar_3(sigma, q2) + I4d2D_A1_3pt_phi_bar_bar_4(sigma, q2)
                                  + I4d2D_A1_3pt_psi_bar_bar_4(sigma, q2) + I4d2D_A1_3pt_chi_bar_bar_4(sigma, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }
        // }}}

        /* A1 : form factor and moments */
        // {{{
        double a_1(const double & q2) const
        {
            const double sigma_0 = this->sigma_0(q2, s0_0_A1(), s0_1_A1());

            const std::function<double (const double &)> integrand_2pt = std::bind(integrand_a1_2pt, this, std::placeholders::_1, q2);

            const double integral_2pt = integrate<GSL::QAGS>(integrand_2pt, 0.0, sigma_0);
            const double surface_2pt  = 0.0 - surface_A1_2pt(switch_borel ? sigma_0 : 0.0, q2);

            double integral_3pt = 0.0;
            double surface_3pt  = 0.0;

            if (switch_3pt != 0.0)
            {
                const std::function<double (const double &)> surface_3pt_B = std::bind(&Implementation::surface_A1_3pt_B, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const double &)> surface_3pt_C = std::bind(&Implementation::surface_A1_3pt_C, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const std::array<double, 3> &)> integrand_3pt = std::bind(&Implementation::integrand_A1_3pt, this, std::placeholders::_1, q2);
                const std::function<double (const std::array<double, 2> &)> surface_3pt_A = std::bind(&Implementation::surface_A1_3pt_A, this, std::placeholders::_1, sigma_0, q2);

                integral_3pt = integrate(integrand_3pt, { 0.0, 0.0, 0.0 }, { sigma_0, 1.0, 1.0 }, cubature::Config());
                surface_3pt  = 0.0
                             - integrate(surface_3pt_A, { 0.0, 0.0 }, { 1.0, 1.0 }, cubature::Config()) // integrate over x_1 and x_2
                             - integrate<GSL::QAGS>(surface_3pt_B, 0.0, 1.0)                            // integrate over x_1
                             - integrate<GSL::QAGS>(surface_3pt_C, 0.0, 1.0)                            // integrate over x_2
                             - surface_A1_3pt_D(sigma_0, q2);
            }

            return f_B() * power_of<3>(m_B()) / (2.0 * f_V() * m_V * (m_B + m_V)) * (integral_2pt + surface_2pt + integral_3pt + surface_3pt) / ( Process_::chi2);
        }

        double normalized_moment_1_a_1(const double & q2) const
        {
            const double sigma_0 = this->sigma_0(q2, s0_0_A1(), s0_1_A1()) ;

            const std::function<double (const double &)> integrand_2pt_m1 = std::bind(&Implementation::integrand_A1_2pt_borel_m1, this, std::placeholders::_1, q2);


            const std::function<double (const double &)> integrand_2pt    = std::bind(&Implementation::integrand_A1_2pt_borel, this, std::placeholders::_1, q2);

            const double integral_2pt_m1 = integrate<GSL::QAGS>(integrand_2pt_m1, 0.0, sigma_0);
            const double surface_2pt_m1  = 0.0 - surface_A1_2pt_m1(sigma_0, q2);

            double integral_3pt_m1 = 0.0;
            double surface_3pt_m1  = 0.0;

            if (switch_3pt != 0.0)
            {
                const std::function<double (const double &)> surface_3pt_B_m1 = std::bind(&Implementation::surface_A1_3pt_B_m1, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const double &)> surface_3pt_C_m1 = std::bind(&Implementation::surface_A1_3pt_C_m1, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const std::array<double, 3> &)> integrand_3pt_m1 = std::bind(&Implementation::integrand_A1_3pt_m1, this, std::placeholders::_1, q2);
                const std::function<double (const std::array<double, 2> &)> surface_3pt_A_m1 = std::bind(&Implementation::surface_A1_3pt_A_m1, this, std::placeholders::_1, sigma_0, q2);

                integral_3pt_m1 = integrate(integrand_3pt_m1, { 0.0, 0.0, 0.0 }, { sigma_0, 1.0, 1.0 }, cubature::Config());
                surface_3pt_m1  = 0.0
                                - integrate(surface_3pt_A_m1, { 0.0, 0.0 }, { 1.0, 1.0 }, cubature::Config()) // integrate over x_1 and x_2
                                - integrate<GSL::QAGS>(surface_3pt_B_m1, 0.0, 1.0)                            // integrate over x_1
                                - integrate<GSL::QAGS>(surface_3pt_C_m1, 0.0, 1.0)                            // integrate over x_2
                                - surface_A1_3pt_D_m1(sigma_0, q2);
            }
            const double numerator       = integral_2pt_m1 + surface_2pt_m1 + integral_3pt_m1 + surface_3pt_m1;

            const double integral_2pt    = integrate<GSL::QAGS>(integrand_2pt, 0.0, sigma_0);
            const double surface_2pt     = 0.0 - surface_A1_2pt(sigma_0, q2);

            double integral_3pt    = 0.0;
            double surface_3pt     = 0.0;

            if (switch_3pt != 0.0)
            {
                const std::function<double (const double &)> surface_3pt_B    = std::bind(&Implementation::surface_A1_3pt_B, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const double &)> surface_3pt_C    = std::bind(&Implementation::surface_A1_3pt_C, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const std::array<double, 3> &)> integrand_3pt = std::bind(&Implementation::integrand_A1_3pt, this, std::placeholders::_1, q2);
                const std::function<double (const std::array<double, 2> &)> surface_3pt_A = std::bind(&Implementation::surface_A1_3pt_A, this, std::placeholders::_1, sigma_0, q2);

                integral_3pt    = integrate(integrand_3pt, { 0.0, 0.0, 0.0 }, { sigma_0, 1.0, 1.0 }, cubature::Config());
                surface_3pt     = 0.0
                                - integrate(surface_3pt_A, { 0.0, 0.0 }, { 1.0, 1.0 }, cubature::Config()) // integrate over x_1 and x_2
                                - integrate<GSL::QAGS>(surface_3pt_B, 0.0, 1.0)                            // integrate over x_1
                                - integrate<GSL::QAGS>(surface_3pt_C, 0.0, 1.0)                            // integrate over x_2
                                - surface_A1_3pt_D(sigma_0, q2);
            }
            const double denominator     = integral_2pt + surface_2pt + integral_3pt + surface_3pt;

            return numerator / denominator;
        }
        // }}}

        /* A_2 */

        inline
        double I1_A2_2pt_phi_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A2 proportional to phi_+

            const double sigmabar = 1.0 - sigma;

            const double phi_plus  = this->phi_plus(sigma * m_B);

            const double C_1 =  1.0 / sigmabar - 2.0;

            return C_1 * phi_plus;
        }

        inline
        double I2_A2_2pt_phi_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A2 proportional to phibar
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v();

            const double phi_bar  = this->phi_bar(sigma * m_B);

            const double C_2 = (2.0 * m_B * sigma * sigmabar - m_v) / (power_of<2>(sigmabar));

            return C_2 * phi_bar;
        }

        inline
        double I2d1_A2_2pt_phi_bar(const double & sigma, const double & /*q2*/) const
        {
            // first derivative of two-particle contribution to A2 proportional to phibar
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v();

            const double phi_bar     = this->phi_bar(sigma * m_B);
            const double phi_bar_d1  = this->phi_bar_d1(sigma * m_B);

            const double C_2   = (2.0 * m_B * sigma * sigmabar - m_v) / (power_of<2>(sigmabar)) * m_B;
            const double C_2d1 = 2.0 * (m_B * sigmabar - m_v) / (power_of<3>(sigmabar));

            return C_2 * phi_bar_d1 + C_2d1 * phi_bar;
        }

        inline
        double I2_A2_2pt_g_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A2 proportional to g_+
            const double sigmabar = 1.0 - sigma;

            const double g_plus   = this->g_plus(sigma * m_B);

            const double C_2 = (4.0 - 8.0 * sigmabar) / (power_of<2>(sigmabar));

            return C_2 * g_plus;
        }

        inline
        double I2d1_A2_2pt_g_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A2 proportional to g_+
            const double sigmabar = 1.0 - sigma;

            const double g_plus    = this->g_plus(sigma * m_B);
            const double g_plus_d1 = this->g_plus_d1(sigma * m_B);

            const double C_2   = (4.0 - 8.0 * sigmabar) / (power_of<2>(sigmabar)) * m_B;
            const double C_2d1 = (8.0 - 8.0 * sigmabar) / (power_of<3>(sigmabar));

            return C_2  * g_plus_d1 + C_2d1 * g_plus;
        }

        inline
        double I3_A2_2pt_g_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A2 proportional to g_+
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_plus    = this->g_plus(sigma * m_B);

            const double C_3 = 8.0 * m_v2 * (2.0 * sigmabar - 1.0) / (power_of<3>(sigmabar));

            return C_3 * g_plus;
        }

        inline
        double I3d1_A2_2pt_g_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A2 proportional to g_+
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_plus    = this->g_plus(sigma * m_B);
            const double g_plus_d1 = this->g_plus_d1(sigma * m_B);

            const double C_3   = 8.0 * m_v2 * (2.0 * sigmabar - 1.0) / (power_of<3>(sigmabar)) * m_B;
            const double C_3d1 = 8.0 * m_v2 * (4.0 * sigmabar - 3.0) / (power_of<4>(sigmabar));

            return C_3 * g_plus_d1 + C_3d1 * g_plus;
        }

        inline
        double I3d2_A2_2pt_g_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A2 proportional to g_+
            const double sigmabar = 1.0 - sigma;
            const double m_B2 = power_of<2>(m_B);
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_plus    = this->g_plus(sigma * m_B);
            const double g_plus_d1 = this->g_plus_d1(sigma * m_B);
            const double g_plus_d2 = this->g_plus_d2(sigma * m_B);

            const double C_3   = 8.0 * m_v2 * (2.0 * sigmabar - 1.0) / (power_of<3>(sigmabar)) * m_B2;
            const double C_3d1 = 16.0 * m_v2 * (4.0 * sigmabar - 3.0) / (power_of<4>(sigmabar)) * m_B;
            const double C_3d2 = - 96.0 * m_v2 * sigma / (power_of<5>(sigmabar));

            return C_3 * g_plus_d2 + C_3d1 * g_plus_d1 + C_3d2 * g_plus;
        }

        inline
        double I3_A2_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A2 proportional to gbar
            const double sigmabar = 1.0 - sigma;

            const double g_bar    = this->g_bar(sigma * m_B);

            const double C_3 = 16.0 * sigma * m_B / (power_of<2>(sigmabar));

            return C_3 * g_bar;
        }

        inline
        double I3d1_A2_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A2 proportional to gbar
            const double sigmabar = 1.0 - sigma;

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);

            const double C_3   = 16.0 * sigma * m_B / (power_of<2>(sigmabar)) * m_B;
            const double C_3d1 = - 16.0 * (sigmabar - 2.0) * m_B / (power_of<3>(sigmabar));

            return C_3 * g_bar_d1 + C_3d1 * g_bar;
        }

        inline
        double I3d2_A2_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A2 proportional to gbar
            const double sigmabar = 1.0 - sigma;
            const double m_B2 = power_of<2>(m_B);

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);
            const double g_bar_d2 = this->g_bar_d2(sigma * m_B);

            const double C_3   = 16.0 * sigma * m_B / (power_of<2>(sigmabar)) * m_B2;
            const double C_3d1 = - 32.0 * (sigmabar - 2.0) * m_B2 / (power_of<3>(sigmabar));
            const double C_3d2 = - 32.0 * (sigmabar - 3.0) * m_B / (power_of<4>(sigmabar));

            return C_3 * g_bar_d2 + C_3d1 * g_bar_d1 + C_3d2 * g_bar;
        }

        inline
        double I4_A2_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A2 proportional to gbar
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);

            const double C_4 = 24.0 * m_v2 * (m_v - 2.0 * m_B * sigma * sigmabar) / (power_of<4>(sigmabar));

            return C_4 * g_bar;
        }

        inline
        double I4d1_A2_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A2 proportional to gbar
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);

            const double C_4   = 24.0 * m_v2 * (m_v - 2.0 * m_B * sigma * sigmabar) / (power_of<4>(sigmabar)) * m_B;
            const double C_4d1 = 48.0 * m_v2 * (m_B * sigmabar * (2.0 * sigmabar - 3.0) + 2.0 * m_v) / (power_of<5>(sigmabar));

            return C_4 * g_bar_d1 + C_4d1 * g_bar;
        }

        inline
        double I4d2_A2_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A2 proportional to gbar
            const double sigmabar = 1.0 - sigma;
            const double m_B2 = power_of<2>(m_B);
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);
            const double g_bar_d2 = this->g_bar_d2(sigma * m_B);

            const double C_4   = 24.0 * m_v2 * (m_v - 2.0 * m_B * sigma * sigmabar) / (power_of<4>(sigmabar)) * m_B2;
            const double C_4d1 = 96.0 * m_v2 * (m_B * sigmabar * (2.0 * sigmabar - 3.0) + 2.0 * m_v) / (power_of<5>(sigmabar)) * m_B;
            const double C_4d2 = 96.0 * m_v2 * (3.0 * m_B * sigmabar * (sigmabar - 2.0) + 5.0 * m_v) / (power_of<6>(sigmabar));

            return C_4 * g_bar_d2 + C_4d1 * g_bar_d1 + C_4d2 * g_bar;
        }

        inline
        double I4d3_A2_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A2 proportional to gbar
            const double sigmabar = 1.0 - sigma;
            const double m_B2 = power_of<2>(m_B);
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);
            const double g_bar_d2 = this->g_bar_d2(sigma * m_B);
            const double g_bar_d3 = this->g_bar_d3(sigma * m_B);

            const double C_4   = 24.0 * m_v2 * (m_v - 2.0 * m_B * sigma * sigmabar) / (power_of<4>(sigmabar)) * m_B2 * m_B;
            const double C_4d1 = 144.0 * m_v2 * (m_B * sigmabar * (2.0 * sigmabar - 3.0) + 2.0 * m_v) / (power_of<5>(sigmabar)) * m_B2;
            const double C_4d2 = 288.0 * m_v2 * (3.0 * m_B * sigmabar * (sigmabar - 2.0) + 5.0 * m_v) / (power_of<6>(sigmabar)) * m_B;
            const double C_4d3 = 576.0 * m_v2 * (m_B * sigmabar * (2.0 * sigmabar - 5.0) + 5.0 * m_v) / (power_of<7>(sigmabar));

            return C_4 * g_bar_d3 + C_4d1 * g_bar_d2 + C_4d2 * g_bar_d1 + C_4d3 * g_bar;
        }

        /* A2 : 3-particle functions */
        // {{{
        double I2_A2_3pt_phi_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to phi_3
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_3 = this->phi_3(omega_1, omega_2);

            const double C_2 = (4.0 * m_v - m_B * (2.0 * sigmabar + 1.0) * u) / (m_B * power_of<2>(sigmabar));

            return C_2 * phi_3;
        }

        double I2_A2_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to phi_bar_3
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_2 = -2.0 * sigma * u / (m_B * power_of<3>(sigmabar));

            return C_2 * phi_bar_3;
        }

        double I3_A2_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A2 proportional to phi_bar_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = -2.0 * (m_B2 * sigmabar2 * (2.0 * sigmabar - 3.0) * u + 4.0 * m_B * m_v * (1.0 -2.0 * sigmabar) * sigmabar
                             + m_v2 * (2.0 * sigmabar * u + u) + q2 * (2.0 * sigmabar - 1.0) *u)
                             / (m_B * power_of<4>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I3d1A_A2_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A2 proportional to phi_bar_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = -(2.0 * (omega_1 * (4.0 * sigma * (-m_v2 + q2 * sigma)
                             + sigmabar2 * (q2 + m_B2 * (1.0 - 4.0 * sigma))
                             + (-(10.0 * m_v2) + 3.0 * m_B2 * (1.0 - 2.0 * sigma2 + sigma) + q2 * (-3.0 + 5.0 * sigma))
                             * sigmabar) + m_B * (4.0 * sigma2 * (m_v2 - q2 * sigma)
                             + sigmabar2 * (3.0 * m_v2 + 8.0 * m_v * omega_2 + q2 - 2.0 * q2 * sigma
                             + m_B2 * (-1.0 + 6.0 * sigma2 - 2.0 * sigma))
                             + (12.0 * m_v * omega_2 * (-1.0 + 2.0 * sigma)
                             + sigma * (11.0 * m_v2 + 3.0 * q2 - 6.0 * q2 * sigma
                             + 3.0 * m_B2 * (-1.0 + sigma) * (1.0 + 2.0 * sigma))) * sigmabar)))
                             / (m_B * omega_2 * power_of<5>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I3d1B_A2_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A2 proportional to phi_bar_3
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = -(2.0 * (sigma * (-m_v2 + q2 * sigma)
                             + (-(3.0 * m_v2) + q2 * (-1.0 + sigma) + m_B2 * (1.0 - 2.0 * sigma2 + sigma)
                             + 4.0 * m_B * m_v * (1.0 - 2.0 * sigma)) * sigmabar))
                             / ((-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I3d1C_A2_3pt_phi_bar_3(const double & sigma, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to phi_bar_3
            const double omega_1  = m_B * sigma;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = 8.0 * m_B * m_v * (1.0 - 2.0 * sigma) / (omega_2 * power_of<3>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I4_A2_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to phi_bar_bar_3
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = -6.0 * m_v * u * (4.0 * m_B * sigma * sigmabar + m_v * (2.0 * sigmabar - 3.0) * (2.0 * u - 1.0))
                             / (power_of<4>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d1A_A2_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to phi_bar_bar_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = 6.0 * m_v * (16.0 * m_B2 * (m_v + omega_2) * sigma3
                             + m_B * (4.0 * omega_1 * omega_2 - m_v * (4.0 * omega_1 + omega_2)) * sigmabar
                             + 2.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * (2.0 + sigmabar)
                             + 4.0 * m_B * sigma2 * (-(4.0 * omega_1 * omega_2)
                             - 2.0 * m_v * (4.0 * omega_1 + omega_2) + 2.0 * m_B * (m_v - 2.0 * omega_2)
                             + 3.0 * m_B * (m_v + omega_2) * sigmabar)
                             + 4.0 * sigma * (2.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2)
                             + m_B2 * (m_v - 2.0 * omega_2) * sigmabar
                             - m_B * (m_v * (4.0 * omega_1 + omega_2) * (1.0 + sigmabar)
                             + 2.0 * omega_1 * omega_2 * (-2.0 + sigmabar))))
                             / (power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d1B_A2_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to phi_bar_bar_3
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = -6.0 * m_B * m_v * (2.0 * sigma * (2.0 * m_B * (sigma - 1.0) + m_v) + m_v)
                             / (power_of<4>(sigmabar) * omega_2);

            return C_4 * phi_bar_bar_3;
        }

        double I4d1C_A2_3pt_phi_bar_bar_3(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to phi_bar_bar_3

            return 0.0;
        }
        double I4d2A_A2_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to phi_bar_bar_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = 24.0 * m_v * (20.0 * m_B2 * (m_v + omega_2) * sigma3
                             + m_B2 * (m_v - 2.0 * omega_2) * sigmabar2
                             + m_v * omega_1 * (2.0 * omega_1 + omega_2) * (5.0 + 4.0 * sigmabar)
                             + 2.0 * m_B * sigma2 * (5.0 * m_B * (m_v - 2.0 * omega_2)
                             - 5.0 * (2.0 * omega_1 * omega_2 + m_v * (4.0 * omega_1 + omega_2))
                             + 12.0 * m_B * (m_v + omega_2) * sigmabar)
                             - m_B * sigmabar * (m_v * (4.0 * omega_1 + omega_2) * (2.0 + sigmabar)
                             + 2.0 * omega_1 * omega_2 * (-4.0 + sigmabar))
                             + sigma * (10.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2)
                             + 2.0 * m_B2 * sigmabar * (4.0 * m_v - 8.0 * omega_2 + 3.0 * (m_v + omega_2) * sigmabar)
                             - m_B * (4.0 * omega_1 * omega_2 * (-5.0 + 4.0 * sigmabar)
                             + m_v * (4.0 * omega_1 + omega_2) * (5.0 + 8.0 * sigmabar))))
                             / (power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d2B_A2_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to phi_bar_bar_3
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_3     = this->phi_bar_3(omega_1, omega_2);
            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            return  -(6.0 * m_B * m_v * (2.0 * (4.0 * m_B * sigma * (m_v + 2.0 * (m_v + 2.0 * m_B * (-1.0 + sigma)) * sigma)
                    + m_B * (m_v + 4.0 * sigma * (m_v + m_B * (-1 + 2.0 * sigma))) * sigmabar
                    - 2.0 * omega_1 * (8.0 * m_B * sigma2 - 2.0 * m_B * sigmabar + m_v * (2.0 + sigmabar)
                    + 4.0 * sigma * (m_v + m_B * (-2.0 + sigmabar)))) * phi_bar_bar_3
                    + m_B * (-omega_1 + m_B * sigma) * (m_v + 2.0 * (m_v + 2.0 * m_B * (-1.0 + sigma)) * sigma) * sigmabar * phi_bar_3))
                    / (power_of<2>(omega_2) * power_of<5>(sigmabar));
        }

        double I4d2C_A2_3pt_phi_bar_bar_3(const double & sigma, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to phi_bar_bar_3
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = 6.0 * m_B2 * m_v * (4.0 * m_B * (sigma - 1.0) * sigma - 2.0 * m_v * sigma - m_v) / (power_of<2>(omega_2) * power_of<4>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d2D_A2_3pt_phi_bar_bar_3(const double & sigma, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to phi_bar_bar_3
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_3     = this->phi_bar_3(omega_1, omega_2);
            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            return    -(6.0 * m_v * pow(sigmabar,-4.0) * (2.0 * (m_v + m_B * (-2.0 + 4.0 * sigma))
                      * phi_bar_bar_3 + m_B * (m_v + 2.0 * (m_v + 2.0 * m_B * (-1.0 + sigma)) * sigma) * phi_bar_3));
        }

        double I2_A2_3pt_phi_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to phi_4
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_4 = this->phi_4(omega_1, omega_2);

            const double C_2 = -(2.0 * sigmabar - 3.0) * (u - 1.0) / (power_of<2>(sigmabar));

            return C_2 * phi_4;
        }

        double I2_A2_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to phi_bar_4
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_2 = -2.0 * sigma * (u - 1.0) / (m_B * power_of<3>(sigmabar));

            return C_2 * phi_bar_4;
        }

        double I3_A2_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A2 proportional to phi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(),  m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma,  sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * (m_B2 * sigmabar2 * (-2.0 * sigmabar * u + u + 1.0) + m_B * m_v * sigmabar * (4.0 * sigmabar - 3.0)
                             + m_v2 * (2.0 * sigmabar + 1.0) * (u-1) + q2 * (2.0 * sigmabar - 1.0) * (u - 1.0))
                             / (m_B * power_of<4>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I3d1A_A2_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A2 proportional to phi_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (sigma3 * (4.0 * m_B * q2 + 6.0 * m_B3 * sigmabar)
                             + sigma2 * (-(4.0 * (omega_1 + omega_2) * q2) - 6.0 * m_B2 * omega_1 * sigmabar
                             + 3.0 * m_B3 * sigmabar * (-3.0 + 2.0 * sigmabar) + m_B * (-(4.0 * m_v2) + 6.0 * q2 * sigmabar))
                             + sigmabar * (m_B3 * sigmabar
                             + (omega_1 + omega_2) * (10.0 * m_v2 + 3.0 * q2 - q2 * sigmabar)
                             - m_B * (3.0 * m_v * omega_2 + (3.0 * m_v2 - 4.0 * m_v * omega_2 + q2) * sigmabar)
                             + m_B2 * (3.0 * omega_1 * (-1.0 + sigmabar) + omega_2 * (-3.0 + sigmabar)))
                             + sigma * (12.0 * m_B * m_v * omega_2 * sigmabar
                             + m_v2 * (4.0 * omega_1 + 4.0 * omega_2 - 11.0 * m_B * sigmabar)
                             + sigmabar * (-(5.0 * (omega_1 + omega_2) * q2) + m_B * q2 * (-3.0 + 2.0 * sigmabar)
                             + m_B3 * (3.0 - 6.0 * sigmabar)
                             + m_B2 * (9.0 * omega_1 + 3.0 * omega_2 - 4.0 * omega_1 * sigmabar))))
                             / (m_B * omega_2 * power_of<5>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I3d1B_A2_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to phi_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * m_B * (2.0 * sigma * (-m_B * sigma + m_B - 2.0 * m_v) + m_v)
                             / ((-omega_1 + m_B * sigma) * power_of<3>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I3d1C_A2_3pt_phi_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A2 proportional to phi_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (sigmabar * (m_B2 * (sigma - 1.0) + m_B * m_v * (4.0 * sigma - 1.0) + 3.0 * m_v2 - q2 * sigma + q2)
                             + sigma * (m_v2 - q2 * sigma))
                             / (omega_2 * power_of<4>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I3_A2_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to phi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * u * (2.0 * m_B * (sigmabar - 2.0) * sigmabar * (2.0 * u - 1.0) + m_v * (9.0 - 4.0 * sigmabar))
                             / (m_B * power_of<4>(sigmabar));

            return C_3 * phi_bar_bar_4;
        }

        double I3d1A_A2_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B),   m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma), sigma4   = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (-(8.0 * m_B * omega_1 * (2.0 * omega_1 + omega_2)) + 16.0 * m_B3 * sigma4
                             + 5.0 * m_B * m_v * omega_2 * sigmabar + 2.0 * m_B2 * (4.0 * omega_1 + omega_2) * sigmabar
                             - 4.0 * m_v * omega_1 * omega_2 * (5.0 + sigmabar)
                             + 8.0 * m_B2 * sigma3 * (-(4.0 * omega_1) - omega_2 + 2.0 * m_B * sigmabar)
                             + 2.0 * m_B * sigma2 * (-(8.0 * m_B2) + 8.0 * m_v * omega_2
                             + 4.0 * omega_1 * (2.0 * omega_1 + omega_2)
                             - 3.0 * m_B * (4.0 * omega_1 + omega_2) * sigmabar)
                             + 4.0 * sigma * (-(4.0 * m_v * omega_1 * omega_2) + 2.0 * m_B2 * (4.0 * omega_1 + omega_2)
                             - 2.0 * m_B3 * sigmabar + m_B * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar
                             + m_B * m_v * omega_2 * (5.0 + 2.0 * sigmabar)))
                             / (m_B * power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_3 * phi_bar_bar_4;
        }

        double I3d1B_A2_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to phi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * (2.0 * m_B * (sigma2 - 1.0) + m_v * (4.0 * sigma + 5.0))
                             / ((-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * phi_bar_bar_4;
        }

        double I3d1C_A2_3pt_phi_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to phi_bar_bar_4

            return 0.0;
        }

        double I4_A2_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A2 proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * u * (m_v * (4.0 * sigmabar - 3.0) * (q2 - m_B2 * sigmabar2) - 2.0 * m_B * sigma * sigmabar * (2.0 * u - 1.0)
                             * ( m_B2 * sigmabar2 - q2) + 3.0 * m_B * m_v2 * sigmabar * (1.0 - 2.0 * u) + 3.0 * m_v2 * m_v)
                             / (m_B * power_of<5>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d1A_A2_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A2 proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * (-(3.0 * m_B3 * (m_v * omega_2 * sigmabar2
                             + 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar4)) - 20.0 * m_B3 * sigma5 * q2
                             - m_v * omega_1 * omega_2 * (q2 * sigmabar * (7.0 - 4.0 * sigmabar)
                             + 5.0 * m_v2 * (5.0 + 4.0 * sigmabar)) + m_B * (3.0 * m_v * omega_2 * sigmabar2 * q2
                             + 2.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * (-5.0 + sigmabar2 - 14.0 * sigmabar)
                             + 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar * (1 + 2.0 * sigmabar)
                             + m_v3 * omega_2 * sigmabar * (5.0 + 4.0 * sigmabar)) + m_B2 * m_v * sigmabar * (3.0 * omega_1 * omega_2 * (4.0 - 5.0 * sigmabar)
                             + m_v * (4.0 * omega_1 + omega_2) * (2.0 + 7.0 * sigmabar)) + 2.0 * m_B2 * sigma4 * (5.0 * (4.0 * omega_1 + omega_2) * q2
                             + 2.0 * m_B * (5.0 * m_v2 - 8.0 * q2 * sigmabar))
                             + sigma2 * (12.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar3 - 36 * m_B5 * sigmabar4 + 20.0 * m_v * omega_1 * omega_2 * q2
                             + m_B * (20.0 * m_v3 * omega_2 + 10.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2)
                             - 12.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar - m_v * omega_2 * q2 * (25 + 28 * sigmabar))
                             + 4.0 * m_B3 * (m_v2 * (-5.0 + 3.0 * sigmabar2 - 14.0 * sigmabar) + 3.0 * q2 * sigmabar * (1 + 2.0 * sigmabar)
                             + 3.0 * m_v * omega_2 * sigmabar * (5.0 - 3.0 * sigmabar))
                             + 2.0 * m_B2 * (m_v * (24 * omega_1 * omega_2 - 7.0 * m_v * (4.0 * omega_1 + omega_2))
                             * sigmabar + (4.0 * omega_1 + omega_2) * q2 * (-5.0 + 2.0 * sigmabar2 - 7.0 * sigmabar)))
                             - 2.0 * m_B * sigma3 * (12.0 * m_B4 * sigmabar3 + 5.0 * (2.0 * m_v * omega_2 + omega_1 * (2.0 * omega_1 + omega_2)) * q2
                             + m_B * (4.0 * omega_1 + omega_2) * (5.0 * m_v2 - 7.0 * q2 * sigmabar)
                             + 2.0 * m_B2 * (4.0 * m_v * (-(2.0 * m_v) + 3.0 * omega_2) * sigmabar + q2 * (-5.0 + 3.0 * sigmabar2 - 7.0 * sigmabar)))
                             + sigma * (12.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar4
                             + m_v * omega_1 * omega_2 * (-(20.0 * m_v2) + q2 * (25 + 24 * sigmabar))
                             - 2.0 * m_B2 * (m_v2 * (4.0 * omega_1 + omega_2) * (-5.0 + 2.0 * sigmabar2 - 14.0 * sigmabar)
                             + 2.0 * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (1 + 2.0 * sigmabar)
                             - 6.0 * m_v * omega_1 * omega_2 * sigmabar * (-5.0 + 2.0 * sigmabar))
                             + m_B * (12.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar + m_v3 * omega_2 * (25 + 24 * sigmabar)
                             + 2.0 * m_v * omega_2 * q2 * sigmabar * (1 - 4.0 * sigmabar)
                             - 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (-5.0 + sigmabar2 - 7.0 * sigmabar))
                             - 2.0 * m_B3 * sigmabar * (6.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar2
                             + 3.0 * m_v * omega_2 * (2.0 - 5.0 * sigmabar) + 2.0 * m_v2 * (2.0 + 7.0 * sigmabar))))
                             / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d1B_A2_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A2 proportional to phi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar3 = power_of<3>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * (6.0 * m_B3 * sigmabar3 * sigma + 3.0 * m_B2 * m_v * (1 + 4.0 * sigma2 - 5.0 * sigma) * sigmabar
                             - m_v3 * (5.0 + 4.0 * sigma + 4.0 * sigmabar)
                             + 2.0 * m_B * q2 * sigma * (-1.0 + sigma2 - 2.0 * sigmabar + sigma * sigmabar)
                             + m_B * m_v2 * (2.0 - 2.0 * sigma2 + 7.0 * sigmabar - 2.0 * sigma * sigmabar)
                             + m_v * q2 * (4.0 * sigma2 - 3.0 * sigmabar + sigma * (5.0 + 4.0 * sigmabar)))
                             / (power_of<5>(sigmabar) * omega_2);

            return C_4 * phi_bar_bar_4;
        }

        double I4d1C_A2_3pt_phi_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to phi_bar_bar_4

            return 0.0;
        }
        double I4d2A_A2_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A2 proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar), sigmabar5 = power_of<5>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 =-(4.0 * (-(6.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar5) + 60.0 * m_B3 * sigma5 * q2
                             + 5.0 * m_v * omega_1 * omega_2 * (q2 * sigmabar * (1.0 - 4.0 * sigmabar) + 3.0 * m_v2 * (5.0 + 4.0 * sigmabar))
                             + m_B3 * sigmabar2 * (12.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar2
                             + 3.0 * m_v * omega_2 * (4.0 - 5.0 * sigmabar) + 2.0 * m_v2 * (2.0 + 7.0 * sigmabar))
                             - 30.0 * m_B2 * sigma4 * ((4.0 * omega_1 + omega_2) * q2 + 2.0 * m_B * (m_v2 - 2.0 * q2 * sigmabar))
                             + 2.0 * m_B2 * sigmabar * ((4.0 * omega_1 + omega_2) * q2 * sigmabar * (1.0 + 2.0 * sigmabar)
                             + m_v2 * (4.0 * omega_1 + omega_2) * (-5.0 + sigmabar * (-14.0 + sigmabar))
                             - 3.0 * m_v * omega_1 * omega_2 * (5.0 + 2.0 * sigmabar * (-5.0 + sigmabar)))
                             - m_B * (m_v * omega_2 * sigmabar2 * q2 * (7.0 - 4.0 * sigmabar)
                             + 5.0 * m_v3 * omega_2 * sigmabar * (5.0 + 4.0 * sigmabar)
                             + 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar * (5.0 + 7.0 * sigmabar)
                             + 10.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * (-3.0 + sigmabar * (-7.0 + sigmabar)))
                             + sigma * (-24.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar4 + 36.0 * m_B5 * sigmabar5
                             + 5.0 * m_v * omega_1 * omega_2 * (12.0 * m_v2 - q2 * (15.0 + 16.0 * sigmabar))
                             + 2.0 * m_B3 * sigmabar * (9.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar2
                             + m_v2 * (20.0 - 6.0 * sigmabar2 + 56.0 * sigmabar) - 6.0 * q2 * sigmabar * (1.0 + 2.0 * sigmabar)
                             + 3.0 * m_v * omega_2 * (5.0 + 6.0 * sigmabar2 - 20.0 * sigmabar))
                             + m_B * (-40.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar
                             + 4.0 * m_v * omega_2 * q2 * sigmabar * (5.0 + 11.0 * sigmabar)
                             - 5.0 * m_v3 * omega_2 * (15.0 + 16.0 * sigmabar)
                             + 10.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (-3.0 + sigmabar * (-3.0 + sigmabar)))
                             + 2.0 * m_B2 * (3.0 * m_v * omega_1 * omega_2 * sigmabar * (25.0 - 16.0 * sigmabar)
                             - (4.0 * omega_1 + omega_2) * q2 * sigmabar * (-10.0 + sigmabar * (-14.0 + sigmabar))
                             + m_v2 * (4.0 * omega_1 + omega_2) * (-15.0 + sigmabar * (-35.0 + 11.0 * sigmabar))))
                             + sigma2 * (-(18.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar3) + 72 * m_B5 * sigmabar4
                             - 60.0 * m_v * omega_1 * omega_2 * q2 + 5.0 * m_B
                             * (-(12.0 * m_v3 * omega_2) - 6.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2)
                             + 8.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar + 5.0 * m_v * omega_2 * q2 * (3.0 + 4.0 * sigmabar))
                             - 2.0 * m_B3 * (m_v2 * (-30.0 + 36.0 * sigmabar2 - 70.0 * sigmabar)
                             + 3.0 * m_v * omega_2 * (25.0 - 24.0 * sigmabar) * sigmabar - 6.0 * q2 * sigmabar * (-5.0 + sigmabar * (-7.0 + sigmabar)))
                             + 2.0 * m_B2 * (5.0 * m_v * (-(12.0 * omega_1 * omega_2) + 5.0 * m_v * (4.0 * omega_1 + omega_2))
                             * sigmabar - (4.0 * omega_1 + omega_2) * q2 * (-15.0 + sigmabar * (-15.0 + 11.0 * sigmabar))))
                             + 2.0 * m_B * sigma3 * (18.0 * m_B4 * sigmabar3 + 15.0 * (2.0 * m_v * omega_2 + omega_1 * (2.0 * omega_1 + omega_2)) * q2
                             + 5.0 * m_B * (4.0 * omega_1 + omega_2) * (3.0 * m_v2 - 5.0 * q2 * sigmabar)
                             + 6.0 * m_B2 * (10.0 * m_v * (-m_v + omega_2) * sigmabar + q2 * (-5.0 + sigmabar * (-5.0 + 6.0 * sigmabar))))))
                             / (m_B * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d2B_A2_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A2 proportional to phi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double phi_bar_4     = this->phi_bar_4(omega_1, omega_2);
            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            return  pow(omega_1 - m_B * sigma,-2.0) * pow(sigmabar,-6.0)
                    * (4.0 * (-(6.0 * m_B3 * omega_1 * sigmabar4) + 10.0 * m_B2 * sigma4 * q2
                    + 2.0 * m_B * sigma3 * (-(5.0 * m_B * m_v2) + 10.0 * m_v * q2 - 5.0 * omega_1 * q2 + 24.0 * m_B2 * m_v * sigmabar
                    + 7.0 * m_B * q2 * sigmabar) + m_v * omega_1
                    * (q2 * sigmabar * (7.0 - 4.0 * sigmabar) + 5.0 * m_v2 * (5.0 + 4.0 * sigmabar))
                    + m_B2 * m_v * sigmabar * (3.0 * omega_1 * (-4.0 + 5.0 * sigmabar) + m_v * (2.0 + 7.0 * sigmabar))
                    + 2.0 * m_B * omega_1 * (q2 * sigmabar * (1 + 2.0 * sigmabar) + m_v2 * (-5.0 + sigmabar * (-14.0 + sigmabar)))
                    + sigma * (12.0 * m_B4 * sigmabar4 + m_v * omega_1 * (20.0 * m_v2 - q2 * (25 + 24 * sigmabar))
                    - 3.0 * m_B3 * sigmabar * (4.0 * omega_1 * sigmabar2 + m_v * (-4.0 + 5.0 * sigmabar))
                    + m_B * (12.0 * m_v2 * omega_1 * sigmabar - 5.0 * m_v3 * (5.0 + 4.0 * sigmabar)
                    + m_v * q2 * sigmabar * (-7.0 + 4.0 * sigmabar) - 2.0 * omega_1 * q2 * (-5.0 + sigmabar * (-7.0 + sigmabar)))
                    - 2.0 * m_B2 * (2.0 * q2 * sigmabar * (1 + 2.0 * sigmabar)
                    + 6.0 * m_v * omega_1 * sigmabar * (-5.0 + 2.0 * sigmabar)
                    + m_v2 * (-5.0 + 2.0 * sigmabar * (-7.0 + sigmabar))))
                    + sigma2 * (12.0 * m_B4 * sigmabar3 - 20.0 * m_v * omega_1 * q2
                    + 12.0 * m_B3 * m_v * sigmabar * (-5.0 + 2.0 * sigmabar)
                    + m_B * (-(20.0 * m_v3) + 10.0 * m_v2 * omega_1 - 12.0 * omega_1 * q2 * sigmabar
                    + m_v * q2 * (25.0 + 24.0 * sigmabar)) - 2.0 * m_B2
                    * (m_v * (7.0 * m_v + 24.0 * omega_1) * sigmabar + q2 * (5.0 + sigmabar * (7.0 - 2.0 * sigmabar))))) * phi_bar_bar_4
                    + 2.0 * m_B * (-omega_1 + m_B * sigma) * sigmabar
                    * (6.0 * m_B3 * sigmabar3 * sigma + 3.0 * m_B2 * m_v * (-1.0 + sigma) * (-1.0 + 4.0 * sigma) * sigmabar
                    - m_v3 * (5.0 + 4.0 * sigma + 4.0 * sigmabar) + 2.0 * m_B * q2 * sigma * (-1.0 + sigma2 + (-2.0 + sigma) * sigmabar)
                    + m_B * m_v2 * (2.0 + 7.0 * sigmabar - 2.0 * sigma * (sigma + sigmabar))
                    + m_v * q2 * (-(3.0 * sigmabar) + sigma * (5.0 + 4.0 * sigma + 4.0 * sigmabar))) * phi_bar_4);
        }

        double I4d2C_A2_3pt_phi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A2 proportional to phi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar3 = power_of<3>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * m_B * (6.0 * m_B3 * sigmabar3 * sigma
                             + (-m_v2 + q2 * sigma) * (2.0 * m_B * (-1.0 + sigma2) - m_v * (5.0 + 4.0 * sigma))
                             + (4.0 * m_v3 + 2.0 * m_B * q2 * sigma * (-2.0 + sigma) + m_B * m_v2 * (7.0 - 2.0 * sigma)
                             + m_v * q2 * (3.0 - 4.0 * sigma) - 3.0 * m_B2 * m_v * (-1.0 + sigma) * (-1 + 4.0 * sigma)) * sigmabar)
                             / (power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d2D_A2_3pt_phi_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to A2 proportional to phi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double phi_bar_4     = this->phi_bar_4(omega_1, omega_2);
            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            return    2.0 * pow(m_B,-1) * pow(sigmabar,-6.0) * ((3.0 * m_B2 * m_v * sigmabar2 * (-5.0 + 8.0 * sigma)
                    + 6.0 * m_B3 * sigmabar3 * (-(2.0 * sigma) + sigmabar)
                    + m_v * (5.0 + 4.0 * sigma + 4.0 * sigmabar) * (-m_v2 + q2 * (sigma + sigmabar))
                    + 2.0 * m_B * (-(m_v2 * (-1.0 + sigma + sigmabar) * (1.0 + sigma + sigmabar))
                    + q2 * (sigma3 - sigma + sigmabar2 * (-2.0 + sigma) + (-1 + 2.0 * sigma2 + sigma) * sigmabar))) * phi_bar_bar_4 + m_B * sigmabar
                    * (6.0 * m_B3 * sigmabar3 * sigma + (-m_v2 + q2 * sigma) * (2.0 * m_B * (-1.0 + sigma2) + m_v * (5.0 + 4.0 * sigma))
                    + (-(4.0 * m_v3) + 2.0 * m_B * q2 * sigma * (-2.0 + sigma) + m_B * m_v2 * (7.0 - 2.0 * sigma)
                    + 3.0 * m_B2 * m_v * (-1.0 + sigma) * (-1 + 4.0 * sigma) + m_v * q2 * (-3.0 + 4.0 * sigma)) * sigmabar) * phi_bar_4);
        }

        double I2_A2_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to psi_bar_4
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_2 = 2.0 * sigma * (2.0 * u - 1.0) / (m_B * power_of<3>(sigmabar));

            return C_2 * psi_bar_4;
        }

        double I3_A2_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A2 proportional to psi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * ((2.0 * sigmabar - 1.0) * (2.0 * u - 1.0) * (m_B2 * sigmabar2 - q2) + 2.0 * m_B * m_v * sigmabar
                             + m_v2 * (2.0 * sigmabar + 1.0) * (-(2.0 * u - 1.0)))
                             / (m_B * power_of<4>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I3d1A_A2_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A2 proportional to psi_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = -(2.0 * (4.0 * sigma3 * (2.0 * m_B * q2 + 3.0 * m_B3 * sigmabar)
                             + sigmabar * (6.0 * m_B * m_v * omega_2 + 3.0 * m_B2 * (2.0 * omega_1 + omega_2) * (-1.0 + sigmabar)
                             + 2.0 * m_B3 * sigmabar - 2.0 * m_B * (3.0 * m_v2 + q2) * sigmabar
                             + (2.0 * omega_1 + omega_2) * (10.0 * m_v2 + 3.0 * q2 - q2 * sigmabar))
                             + 2.0 * sigma2 * (-(2.0 * (2.0 * omega_1 + omega_2) * q2) - 3.0 * m_B2 * (2.0 * omega_1 + omega_2) * sigmabar
                             + 3.0 * m_B3 * sigmabar * (-3.0 + 2.0 * sigmabar) + m_B * (-(4.0 * m_v2) + 6.0 * q2 * sigmabar))
                             + sigma * (m_v2 * (8.0 * omega_1 + 4.0 * omega_2 - 22 * m_B * sigmabar)
                             - sigmabar * (5.0 * (2.0 * omega_1 + omega_2) * q2 + 2.0 * m_B * q2 * (3.0 - 2.0 * sigmabar)
                             + 6.0 * m_B3 * (-1.0 + 2.0 * sigmabar) + m_B2 * (2.0 * omega_1 + omega_2) * (-9.0 + 4.0 * sigmabar)))))
                             / (m_B * omega_2 * power_of<5>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I3d1B_A2_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A2 proportional to psi_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (sigmabar * (m_B2 * (sigma - 1.0) * (2.0 * sigma - 1.0) + 2.0 * m_B * m_v - 3.0 * m_v2
                             + q2 * (sigma - 1.0)) + sigma * (q2 * sigma - m_v2))
                             / ((-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I3d1C_A2_3pt_psi_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A2 proportional to psi_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (sigmabar * (m_B2 * (sigma - 1.0) * (2.0 * sigma - 1.0) - 2.0 * m_B * m_v - 3.0 * m_v2
                             + q2 * (sigma -1.0)) + sigma * (q2 * sigma - m_v2))
                             / (omega_2 * power_of<4>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I4_A2_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to psi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * m_v * u * (4.0 * m_B * sigma * sigmabar + m_v * (2.0 * sigmabar - 3.0) * (2.0 * u - 1.0))
                             / (power_of<4>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1A_A2_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_v * (16.0 * m_B2 * (m_v + omega_2) * sigma3
                             + m_B * (4.0 * omega_1 * omega_2 - m_v * (4.0 * omega_1 + omega_2)) * sigmabar
                             + 2.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * (2.0 + sigmabar)
                             + 4.0 * m_B * sigma2 * (-(4.0 * omega_1 * omega_2)
                             - 2.0 * m_v * (4.0 * omega_1 + omega_2) + 2.0 * m_B * (m_v - 2.0 * omega_2)
                             + 3.0 * m_B * (m_v + omega_2) * sigmabar)
                             + 4.0 * sigma * (2.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2)
                             + m_B2 * (m_v - 2.0 * omega_2) * sigmabar
                             - m_B * (m_v * (4.0 * omega_1 + omega_2) * (1.0 + sigmabar)
                             + 2.0 * omega_1 * omega_2 * (-2.0 + sigmabar))))
                             / (power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1B_A2_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * m_B * m_v * (2.0 * sigma * (2.0 * m_B * (sigma - 1.0) + m_v) + m_v)
                             / (power_of<4>(sigmabar) * omega_2);

            return C_4 * psi_bar_bar_4;
        }

        double I4d1C_A2_3pt_psiA_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to psi_bar_bar_4

            return 0.0;
        }
        double I4d2A_A2_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 24.0 * m_v * (20.0 * m_B2 * (m_v + omega_2) * sigma3
                             + m_B2 * (m_v - 2.0 * omega_2) * sigmabar2
                             + m_v * omega_1 * (2.0 * omega_1 + omega_2) * (5.0 + 4.0 * sigmabar)
                             + 2.0 * m_B * sigma2 * (5.0 * m_B * (m_v - 2.0 * omega_2)
                             - 5.0 * (2.0 * omega_1 * omega_2 + m_v * (4.0 * omega_1 + omega_2))
                             + 12.0 * m_B * (m_v + omega_2) * sigmabar)
                             - m_B * sigmabar * (m_v * (4.0 * omega_1 + omega_2) * (2.0 + sigmabar)
                             + 2.0 * omega_1 * omega_2 * (-4.0 + sigmabar))
                             + sigma * (10.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2)
                             + 2.0 * m_B2 * sigmabar * (4.0 * m_v - 8.0 * omega_2 + 3.0 * (m_v + omega_2) * sigmabar)
                             - m_B * (4.0 * omega_1 * omega_2 * (-5.0 + 4.0 * sigmabar)
                             + m_v * (4.0 * omega_1 + omega_2) * (5.0 + 8.0 * sigmabar))))
                             / (power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2B_A2_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_4     = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return  -(6.0 * m_B * m_v * (2.0 * (4.0 * m_B * sigma * (m_v + 2.0 * (m_v + 2.0 * m_B * (-1.0 + sigma)) * sigma)
                    + m_B * (m_v + 4.0 * sigma * (m_v + m_B * (-1 + 2.0 * sigma))) * sigmabar
                    - 2.0 * omega_1 * (8.0 * m_B * sigma2 - 2.0 * m_B * sigmabar + m_v * (2.0 + sigmabar)
                    + 4.0 * sigma * (m_v + m_B * (-2.0 + sigmabar)))) * psi_bar_bar_4
                    + m_B * (-omega_1 + m_B * sigma) * (m_v + 2.0 * (m_v + 2.0 * m_B * (-1.0 + sigma)) * sigma) * sigmabar * psi_bar_4))
                    / (power_of<2>(omega_2) * power_of<5>(sigmabar));
        }

        double I4d2C_A2_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_B2 * m_v * (4.0 * m_B * (sigma - 1.0) * sigma - 2.0 * m_v * sigma - m_v) / (power_of<2>(omega_2) * power_of<4>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2D_A2_3pt_psiA_bar_bar_4(const double & sigma, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_4     = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return    -(6.0 * m_v * pow(sigmabar,-4.0) * (2.0 * (m_v + m_B * (-2.0 + 4.0 * sigma))
                      * psi_bar_bar_4 + m_B * (m_v + 2.0 * (m_v + 2.0 * m_B * (-1.0 + sigma)) * sigma) * psi_bar_4));
        }

        double I3_A2_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to psi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * u * (2.0 * m_B * (sigmabar - 2.0) * sigmabar * (2.0 * u - 1.0) + m_v * (9.0 - 4.0 * sigmabar))
                             / (m_B * power_of<4>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1A_A2_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B),   m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma), sigma4   = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (-(8.0 * m_B * omega_1 * (2.0 * omega_1 + omega_2)) + 16.0 * m_B3 * sigma4
                             + 5.0 * m_B * m_v * omega_2 * sigmabar + 2.0 * m_B2 * (4.0 * omega_1 + omega_2) * sigmabar
                             - 4.0 * m_v * omega_1 * omega_2 * (5.0 + sigmabar)
                             + 8.0 * m_B2 * sigma3 * (-(4.0 * omega_1) - omega_2 + 2.0 * m_B * sigmabar)
                             + 2.0 * m_B * sigma2 * (-(8.0 * m_B2) + 8.0 * m_v * omega_2
                             + 4.0 * omega_1 * (2.0 * omega_1 + omega_2)
                             - 3.0 * m_B * (4.0 * omega_1 + omega_2) * sigmabar)
                             + 4.0 * sigma * (-(4.0 * m_v * omega_1 * omega_2) + 2.0 * m_B2 * (4.0 * omega_1 + omega_2)
                             - 2.0 * m_B3 * sigmabar + m_B * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar
                             + m_B * m_v * omega_2 * (5.0 + 2.0 * sigmabar)))
                             / (m_B * power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1B_A2_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * (2.0 * m_B * (sigma2 - 1.0) + m_v * (4.0 * sigma + 5.0))
                             / ((-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1C_A2_3pt_psiB_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to psi_bar_bar_4

            return 0.0;
        }

        double I4_A2_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A2 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * u * (m_v * (4.0 * sigmabar - 3.0) * (q2 - m_B2 * sigmabar2) - 2.0 * m_B * sigma * sigmabar * (2.0 * u - 1.0)
                             * ( m_B2 * sigmabar2 - q2) + 3.0 * m_B * m_v2 * sigmabar * (1.0 - 2.0 * u) + 3.0 * m_v2 * m_v)
                             / (m_B * power_of<5>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1A_A2_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A2 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * (-(3.0 * m_B3 * (m_v * omega_2 * sigmabar2
                             + 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar4)) - 20.0 * m_B3 * sigma5 * q2
                             - m_v * omega_1 * omega_2 * (q2 * sigmabar * (7.0 - 4.0 * sigmabar)
                             + 5.0 * m_v2 * (5.0 + 4.0 * sigmabar)) + m_B * (3.0 * m_v * omega_2 * sigmabar2 * q2
                             + 2.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * (-5.0 + sigmabar2 - 14.0 * sigmabar)
                             + 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar * (1 + 2.0 * sigmabar)
                             + m_v3 * omega_2 * sigmabar * (5.0 + 4.0 * sigmabar)) + m_B2 * m_v * sigmabar * (3.0 * omega_1 * omega_2 * (4.0 - 5.0 * sigmabar)
                             + m_v * (4.0 * omega_1 + omega_2) * (2.0 + 7.0 * sigmabar)) + 2.0 * m_B2 * sigma4 * (5.0 * (4.0 * omega_1 + omega_2) * q2
                             + 2.0 * m_B * (5.0 * m_v2 - 8.0 * q2 * sigmabar))
                             + sigma2 * (12.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar3 - 36 * m_B5 * sigmabar4 + 20.0 * m_v * omega_1 * omega_2 * q2
                             + m_B * (20.0 * m_v3 * omega_2 + 10.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2)
                             - 12.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar - m_v * omega_2 * q2 * (25 + 28 * sigmabar))
                             + 4.0 * m_B3 * (m_v2 * (-5.0 + 3.0 * sigmabar2 - 14.0 * sigmabar) + 3.0 * q2 * sigmabar * (1 + 2.0 * sigmabar)
                             + 3.0 * m_v * omega_2 * sigmabar * (5.0 - 3.0 * sigmabar))
                             + 2.0 * m_B2 * (m_v * (24 * omega_1 * omega_2 - 7.0 * m_v * (4.0 * omega_1 + omega_2))
                             * sigmabar + (4.0 * omega_1 + omega_2) * q2 * (-5.0 + 2.0 * sigmabar2 - 7.0 * sigmabar)))
                             - 2.0 * m_B * sigma3 * (12.0 * m_B4 * sigmabar3 + 5.0 * (2.0 * m_v * omega_2 + omega_1 * (2.0 * omega_1 + omega_2)) * q2
                             + m_B * (4.0 * omega_1 + omega_2) * (5.0 * m_v2 - 7.0 * q2 * sigmabar)
                             + 2.0 * m_B2 * (4.0 * m_v * (-(2.0 * m_v) + 3.0 * omega_2) * sigmabar + q2 * (-5.0 + 3.0 * sigmabar2 - 7.0 * sigmabar)))
                             + sigma * (12.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar4
                             + m_v * omega_1 * omega_2 * (-(20.0 * m_v2) + q2 * (25 + 24 * sigmabar))
                             - 2.0 * m_B2 * (m_v2 * (4.0 * omega_1 + omega_2) * (-5.0 + 2.0 * sigmabar2 - 14.0 * sigmabar)
                             + 2.0 * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (1 + 2.0 * sigmabar)
                             - 6.0 * m_v * omega_1 * omega_2 * sigmabar * (-5.0 + 2.0 * sigmabar))
                             + m_B * (12.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar + m_v3 * omega_2 * (25 + 24 * sigmabar)
                             + 2.0 * m_v * omega_2 * q2 * sigmabar * (1 - 4.0 * sigmabar)
                             - 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (-5.0 + sigmabar2 - 7.0 * sigmabar))
                             - 2.0 * m_B3 * sigmabar * (6.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar2
                             + 3.0 * m_v * omega_2 * (2.0 - 5.0 * sigmabar) + 2.0 * m_v2 * (2.0 + 7.0 * sigmabar))))
                             / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1B_A2_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A2 proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar3 = power_of<3>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * (6.0 * m_B3 * sigmabar3 * sigma + 3.0 * m_B2 * m_v * (1 + 4.0 * sigma2 - 5.0 * sigma) * sigmabar
                             - m_v3 * (5.0 + 4.0 * sigma + 4.0 * sigmabar)
                             + 2.0 * m_B * q2 * sigma * (-1.0 + sigma2 - 2.0 * sigmabar + sigma * sigmabar)
                             + m_B * m_v2 * (2.0 - 2.0 * sigma2 + 7.0 * sigmabar - 2.0 * sigma * sigmabar)
                             + m_v * q2 * (4.0 * sigma2 - 3.0 * sigmabar + sigma * (5.0 + 4.0 * sigmabar)))
                             / (power_of<5>(sigmabar) * omega_2);

            return C_4 * psi_bar_bar_4;
        }

        double I4d1C_A2_3pt_psiB_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to psi_bar_bar_4

            return 0.0;
        }
        double I4d2A_A2_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A2 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar), sigmabar5 = power_of<5>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 =-(4.0 * (-(6.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar5) + 60.0 * m_B3 * sigma5 * q2
                             + 5.0 * m_v * omega_1 * omega_2 * (q2 * sigmabar * (1.0 - 4.0 * sigmabar) + 3.0 * m_v2 * (5.0 + 4.0 * sigmabar))
                             + m_B3 * sigmabar2 * (12.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar2
                             + 3.0 * m_v * omega_2 * (4.0 - 5.0 * sigmabar) + 2.0 * m_v2 * (2.0 + 7.0 * sigmabar))
                             - 30.0 * m_B2 * sigma4 * ((4.0 * omega_1 + omega_2) * q2 + 2.0 * m_B * (m_v2 - 2.0 * q2 * sigmabar))
                             + 2.0 * m_B2 * sigmabar * ((4.0 * omega_1 + omega_2) * q2 * sigmabar * (1.0 + 2.0 * sigmabar)
                             + m_v2 * (4.0 * omega_1 + omega_2) * (-5.0 + sigmabar * (-14.0 + sigmabar))
                             - 3.0 * m_v * omega_1 * omega_2 * (5.0 + 2.0 * sigmabar * (-5.0 + sigmabar)))
                             - m_B * (m_v * omega_2 * sigmabar2 * q2 * (7.0 - 4.0 * sigmabar)
                             + 5.0 * m_v3 * omega_2 * sigmabar * (5.0 + 4.0 * sigmabar)
                             + 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar * (5.0 + 7.0 * sigmabar)
                             + 10.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * (-3.0 + sigmabar * (-7.0 + sigmabar)))
                             + sigma * (-24.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar4 + 36.0 * m_B5 * sigmabar5
                             + 5.0 * m_v * omega_1 * omega_2 * (12.0 * m_v2 - q2 * (15.0 + 16.0 * sigmabar))
                             + 2.0 * m_B3 * sigmabar * (9.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar2
                             + m_v2 * (20.0 - 6.0 * sigmabar2 + 56.0 * sigmabar) - 6.0 * q2 * sigmabar * (1.0 + 2.0 * sigmabar)
                             + 3.0 * m_v * omega_2 * (5.0 + 6.0 * sigmabar2 - 20.0 * sigmabar))
                             + m_B * (-40.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar
                             + 4.0 * m_v * omega_2 * q2 * sigmabar * (5.0 + 11.0 * sigmabar)
                             - 5.0 * m_v3 * omega_2 * (15.0 + 16.0 * sigmabar)
                             + 10.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (-3.0 + sigmabar * (-3.0 + sigmabar)))
                             + 2.0 * m_B2 * (3.0 * m_v * omega_1 * omega_2 * sigmabar * (25.0 - 16.0 * sigmabar)
                             - (4.0 * omega_1 + omega_2) * q2 * sigmabar * (-10.0 + sigmabar * (-14.0 + sigmabar))
                             + m_v2 * (4.0 * omega_1 + omega_2) * (-15.0 + sigmabar * (-35.0 + 11.0 * sigmabar))))
                             + sigma2 * (-(18.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar3) + 72 * m_B5 * sigmabar4
                             - 60.0 * m_v * omega_1 * omega_2 * q2 + 5.0 * m_B
                             * (-(12.0 * m_v3 * omega_2) - 6.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2)
                             + 8.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar + 5.0 * m_v * omega_2 * q2 * (3.0 + 4.0 * sigmabar))
                             - 2.0 * m_B3 * (m_v2 * (-30.0 + 36.0 * sigmabar2 - 70.0 * sigmabar)
                             + 3.0 * m_v * omega_2 * (25.0 - 24.0 * sigmabar) * sigmabar - 6.0 * q2 * sigmabar * (-5.0 + sigmabar * (-7.0 + sigmabar)))
                             + 2.0 * m_B2 * (5.0 * m_v * (-(12.0 * omega_1 * omega_2) + 5.0 * m_v * (4.0 * omega_1 + omega_2))
                             * sigmabar - (4.0 * omega_1 + omega_2) * q2 * (-15.0 + sigmabar * (-15.0 + 11.0 * sigmabar))))
                             + 2.0 * m_B * sigma3 * (18.0 * m_B4 * sigmabar3 + 15.0 * (2.0 * m_v * omega_2 + omega_1 * (2.0 * omega_1 + omega_2)) * q2
                             + 5.0 * m_B * (4.0 * omega_1 + omega_2) * (3.0 * m_v2 - 5.0 * q2 * sigmabar)
                             + 6.0 * m_B2 * (10.0 * m_v * (-m_v + omega_2) * sigmabar + q2 * (-5.0 + sigmabar * (-5.0 + 6.0 * sigmabar))))))
                             / (m_B * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2B_A2_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A2 proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double psi_bar_4     = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return  pow(omega_1 - m_B * sigma,-2.0) * pow(sigmabar,-6.0)
                    * (4.0 * (-(6.0 * m_B3 * omega_1 * sigmabar4) + 10.0 * m_B2 * sigma4 * q2
                    + 2.0 * m_B * sigma3 * (-(5.0 * m_B * m_v2) + 10.0 * m_v * q2 - 5.0 * omega_1 * q2 + 24.0 * m_B2 * m_v * sigmabar
                    + 7.0 * m_B * q2 * sigmabar) + m_v * omega_1
                    * (q2 * sigmabar * (7.0 - 4.0 * sigmabar) + 5.0 * m_v2 * (5.0 + 4.0 * sigmabar))
                    + m_B2 * m_v * sigmabar * (3.0 * omega_1 * (-4.0 + 5.0 * sigmabar) + m_v * (2.0 + 7.0 * sigmabar))
                    + 2.0 * m_B * omega_1 * (q2 * sigmabar * (1 + 2.0 * sigmabar) + m_v2 * (-5.0 + sigmabar * (-14.0 + sigmabar)))
                    + sigma * (12.0 * m_B4 * sigmabar4 + m_v * omega_1 * (20.0 * m_v2 - q2 * (25 + 24 * sigmabar))
                    - 3.0 * m_B3 * sigmabar * (4.0 * omega_1 * sigmabar2 + m_v * (-4.0 + 5.0 * sigmabar))
                    + m_B * (12.0 * m_v2 * omega_1 * sigmabar - 5.0 * m_v3 * (5.0 + 4.0 * sigmabar)
                    + m_v * q2 * sigmabar * (-7.0 + 4.0 * sigmabar) - 2.0 * omega_1 * q2 * (-5.0 + sigmabar * (-7.0 + sigmabar)))
                    - 2.0 * m_B2 * (2.0 * q2 * sigmabar * (1 + 2.0 * sigmabar)
                    + 6.0 * m_v * omega_1 * sigmabar * (-5.0 + 2.0 * sigmabar)
                    + m_v2 * (-5.0 + 2.0 * sigmabar * (-7.0 + sigmabar))))
                    + sigma2 * (12.0 * m_B4 * sigmabar3 - 20.0 * m_v * omega_1 * q2
                    + 12.0 * m_B3 * m_v * sigmabar * (-5.0 + 2.0 * sigmabar)
                    + m_B * (-(20.0 * m_v3) + 10.0 * m_v2 * omega_1 - 12.0 * omega_1 * q2 * sigmabar
                    + m_v * q2 * (25.0 + 24.0 * sigmabar)) - 2.0 * m_B2
                    * (m_v * (7.0 * m_v + 24.0 * omega_1) * sigmabar + q2 * (5.0 + sigmabar * (7.0 - 2.0 * sigmabar))))) * psi_bar_bar_4
                    + 2.0 * m_B * (-omega_1 + m_B * sigma) * sigmabar
                    * (6.0 * m_B3 * sigmabar3 * sigma + 3.0 * m_B2 * m_v * (-1.0 + sigma) * (-1.0 + 4.0 * sigma) * sigmabar
                    - m_v3 * (5.0 + 4.0 * sigma + 4.0 * sigmabar) + 2.0 * m_B * q2 * sigma * (-1.0 + sigma2 + (-2.0 + sigma) * sigmabar)
                    + m_B * m_v2 * (2.0 + 7.0 * sigmabar - 2.0 * sigma * (sigma + sigmabar))
                    + m_v * q2 * (-(3.0 * sigmabar) + sigma * (5.0 + 4.0 * sigma + 4.0 * sigmabar))) * psi_bar_4);
        }

        double I4d2C_A2_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A2 proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar3 = power_of<3>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * m_B * (6.0 * m_B3 * sigmabar3 * sigma
                             + (-m_v2 + q2 * sigma) * (2.0 * m_B * (-1.0 + sigma2) - m_v * (5.0 + 4.0 * sigma))
                             + (4.0 * m_v3 + 2.0 * m_B * q2 * sigma * (-2.0 + sigma) + m_B * m_v2 * (7.0 - 2.0 * sigma)
                             + m_v * q2 * (3.0 - 4.0 * sigma) - 3.0 * m_B2 * m_v * (-1.0 + sigma) * (-1 + 4.0 * sigma)) * sigmabar)
                             / (power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2D_A2_3pt_psiB_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to A2 proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double psi_bar_4     = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return    2.0 * pow(m_B,-1) * pow(sigmabar,-6.0) * ((3.0 * m_B2 * m_v * sigmabar2 * (-5.0 + 8.0 * sigma)
                    + 6.0 * m_B3 * sigmabar3 * (-(2.0 * sigma) + sigmabar)
                    + m_v * (5.0 + 4.0 * sigma + 4.0 * sigmabar) * (-m_v2 + q2 * (sigma + sigmabar))
                    + 2.0 * m_B * (-(m_v2 * (-1.0 + sigma + sigmabar) * (1.0 + sigma + sigmabar))
                    + q2 * (sigma3 - sigma + sigmabar2 * (-2.0 + sigma) + (-1 + 2.0 * sigma2 + sigma) * sigmabar))) * psi_bar_bar_4 + m_B * sigmabar
                    * (6.0 * m_B3 * sigmabar3 * sigma + (-m_v2 + q2 * sigma) * (2.0 * m_B * (-1.0 + sigma2) + m_v * (5.0 + 4.0 * sigma))
                    + (-(4.0 * m_v3) + 2.0 * m_B * q2 * sigma * (-2.0 + sigma) + m_B * m_v2 * (7.0 - 2.0 * sigma)
                    + 3.0 * m_B2 * m_v * (-1.0 + sigma) * (-1 + 4.0 * sigma) + m_v * q2 * (-3.0 + 4.0 * sigma)) * sigmabar) * psi_bar_4);
        }

        double I3_A2_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - 0.0                                                       - I3_A2_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1A_A2_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - 0.0                                                       - I3d1A_A2_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1B_A2_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return - 0.0                                                       - I3d1B_A2_3pt_psiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I3d1C_A2_3pt_psi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return - 0.0                                                       - I3d1C_A2_3pt_psiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4_A2_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I4_A2_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2)    - I4_A2_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1A_A2_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I4d1A_A2_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d1A_A2_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1B_A2_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return - I4d1B_A2_3pt_psiA_bar_bar_4( sigma, omega_1, q2)          - I4d1B_A2_3pt_psiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d1C_A2_3pt_psi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return - I4d1C_A2_3pt_psiA_bar_bar_4( sigma, omega_2, q2)          - I4d1C_A2_3pt_psiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2A_A2_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I4d2A_A2_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d2A_A2_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d2B_A2_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return - I4d2B_A2_3pt_psiA_bar_bar_4( sigma, omega_1, q2)          - I4d2B_A2_3pt_psiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d2C_A2_3pt_psi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return - I4d2C_A2_3pt_psiA_bar_bar_4( sigma, omega_2, q2)          - I4d2C_A2_3pt_psiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2D_A2_3pt_psi_bar_bar_4(const double & sigma, const double & q2) const
        {
            return - I4d2D_A2_3pt_psiA_bar_bar_4( sigma, q2)                   - I4d2D_A2_3pt_psiB_bar_bar_4(sigma, q2);
        }

        double I2_A2_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to chi_bar_4
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_2 = -2.0 * sigma / (m_B * power_of<3>(sigmabar));

            return C_2 * chi_bar_4;
        }

        double I3_A2_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A2 proportional to chi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * (m_B2 * sigmabar2 * (-2.0 * sigmabar - 4.0 * sigma * u + 1.0) + 4.0 * m_B * m_v * (1.0 - 2.0 * sigmabar) * sigmabar
                             + m_v2 * (2.0 * sigmabar + 1.0) + q2 * (2.0 * sigmabar - 1.0))
                             / (m_B * power_of<4>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I3d1A_A2_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A2 proportional to chi_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = -(2.0 * (12.0 * m_B3 * sigma3 * sigmabar - 2.0 * sigma2
                             * (2.0 * omega_2 * q2 + 3.0 * m_B2 * sigmabar * (2.0 * m_B + 2.0 * omega_1 + omega_2 - 2.0 * m_B * sigmabar))
                             + sigmabar * (4.0 * m_B2 * omega_1 * sigmabar
                             + omega_2 * (10.0 * m_v2 + 3.0 * q2 + 3.0 * m_B2 * (-1.0 + sigmabar) - q2 * sigmabar
                             + 4.0 * m_B * m_v * (-3.0 + 2.0 * sigmabar)))
                             + sigma * (4.0 * m_v2 * omega_2 + 24.0 * m_B * m_v * omega_2 * sigmabar
                             - sigmabar * (5.0 * omega_2 * q2 + 8.0 * m_B3 * sigmabar
                             + m_B2 * (-(12.0 * omega_1) - 9.0 * omega_2 + 8.0 * omega_1 * sigmabar + 4.0 * omega_2 * sigmabar)))))
                             / (m_B * omega_2 * power_of<5>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I3d1B_A2_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A2 proportional to chi_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * (sigmabar * (m_B2 * (-2.0 * sigma2 + sigma + 1.0) + 4.0 * m_B * m_v * (1.0 - 2.0 * sigma)
                             - 3.0 * m_v2 + q2 * (sigma - 1.0)) + sigma * (q2 * sigma - m_v2))
                             / ((-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I3d1C_A2_3pt_chi_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A2 proportional to chi_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (sigmabar * (m_B2 * (sigma - 1.0) * (2.0 * sigma - 1.0) + 4.0 * m_B * m_v * (1.0 - 2.0 * sigma)
                             - 3.0 * m_v2 + q2 * (sigma - 1.0)) + sigma * (q2 * sigma - m_v2))
                             / (omega_2 * power_of<4>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I4_A2_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to chi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * m_v * u * (4.0 * m_B * sigma * sigmabar + m_v * (2.0 * sigmabar - 3.0) * (2.0 * u - 1.0))
                             / (power_of<4>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1A_A2_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_v * (16.0 * m_B2 * (m_v + omega_2) * sigma3
                             + m_B * (4.0 * omega_1 * omega_2 - m_v * (4.0 * omega_1 + omega_2)) * sigmabar
                             + 2.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * (2.0 + sigmabar)
                             + 4.0 * m_B * sigma2 * (-(4.0 * omega_1 * omega_2)
                             - 2.0 * m_v * (4.0 * omega_1 + omega_2) + 2.0 * m_B * (m_v - 2.0 * omega_2)
                             + 3.0 * m_B * (m_v + omega_2) * sigmabar)
                             + 4.0 * sigma * (2.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2)
                             + m_B2 * (m_v - 2.0 * omega_2) * sigmabar
                             - m_B * (m_v * (4.0 * omega_1 + omega_2) * (1.0 + sigmabar)
                             + 2.0 * omega_1 * omega_2 * (-2.0 + sigmabar))))
                             / (power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1B_A2_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * m_B * m_v * (2.0 * sigma * (2.0 * m_B * (sigma - 1.0) + m_v) + m_v)
                             / (power_of<4>(sigmabar) * omega_2);

            return C_4 * chi_bar_bar_4;
        }

        double I4d1C_A2_3pt_chiA_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to chi_bar_bar_4

            return 0.0;
        }
        double I4d2A_A2_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 24.0 * m_v * (20.0 * m_B2 * (m_v + omega_2) * sigma3
                             + m_B2 * (m_v - 2.0 * omega_2) * sigmabar2
                             + m_v * omega_1 * (2.0 * omega_1 + omega_2) * (5.0 + 4.0 * sigmabar)
                             + 2.0 * m_B * sigma2 * (5.0 * m_B * (m_v - 2.0 * omega_2)
                             - 5.0 * (2.0 * omega_1 * omega_2 + m_v * (4.0 * omega_1 + omega_2))
                             + 12.0 * m_B * (m_v + omega_2) * sigmabar)
                             - m_B * sigmabar * (m_v * (4.0 * omega_1 + omega_2) * (2.0 + sigmabar)
                             + 2.0 * omega_1 * omega_2 * (-4.0 + sigmabar))
                             + sigma * (10.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2)
                             + 2.0 * m_B2 * sigmabar * (4.0 * m_v - 8.0 * omega_2 + 3.0 * (m_v + omega_2) * sigmabar)
                             - m_B * (4.0 * omega_1 * omega_2 * (-5.0 + 4.0 * sigmabar)
                             + m_v * (4.0 * omega_1 + omega_2) * (5.0 + 8.0 * sigmabar))))
                             / (power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2B_A2_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_4     = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return  -(6.0 * m_B * m_v * (2.0 * (4.0 * m_B * sigma * (m_v + 2.0 * (m_v + 2.0 * m_B * (-1.0 + sigma)) * sigma)
                    + m_B * (m_v + 4.0 * sigma * (m_v + m_B * (-1 + 2.0 * sigma))) * sigmabar
                    - 2.0 * omega_1 * (8.0 * m_B * sigma2 - 2.0 * m_B * sigmabar + m_v * (2.0 + sigmabar)
                    + 4.0 * sigma * (m_v + m_B * (-2.0 + sigmabar)))) * chi_bar_bar_4
                    + m_B * (-omega_1 + m_B * sigma) * (m_v + 2.0 * (m_v + 2.0 * m_B * (-1.0 + sigma)) * sigma) * sigmabar * chi_bar_4))
                    / (power_of<2>(omega_2) * power_of<5>(sigmabar));
        }

        double I4d2C_A2_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_B2 * m_v * (4.0 * m_B * (sigma - 1.0) * sigma - 2.0 * m_v * sigma - m_v) / (power_of<2>(omega_2) * power_of<4>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2D_A2_3pt_chiA_bar_bar_4(const double & sigma, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_4     = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return    -(6.0 * m_v * pow(sigmabar,-4.0) * (2.0 * (m_v + m_B * (-2.0 + 4.0 * sigma))
                      * chi_bar_bar_4 + m_B * (m_v + 2.0 * (m_v + 2.0 * m_B * (-1.0 + sigma)) * sigma) * chi_bar_4));
        }

        double I3_A2_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to chi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * u * (2.0 * m_B * (sigmabar - 2.0) * sigmabar * (2.0 * u - 1.0) + m_v * (9.0 - 4.0 * sigmabar))
                             / (m_B * power_of<4>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1A_A2_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B),   m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma), sigma4   = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (-(8.0 * m_B * omega_1 * (2.0 * omega_1 + omega_2)) + 16.0 * m_B3 * sigma4
                             + 5.0 * m_B * m_v * omega_2 * sigmabar + 2.0 * m_B2 * (4.0 * omega_1 + omega_2) * sigmabar
                             - 4.0 * m_v * omega_1 * omega_2 * (5.0 + sigmabar)
                             + 8.0 * m_B2 * sigma3 * (-(4.0 * omega_1) - omega_2 + 2.0 * m_B * sigmabar)
                             + 2.0 * m_B * sigma2 * (-(8.0 * m_B2) + 8.0 * m_v * omega_2
                             + 4.0 * omega_1 * (2.0 * omega_1 + omega_2)
                             - 3.0 * m_B * (4.0 * omega_1 + omega_2) * sigmabar)
                             + 4.0 * sigma * (-(4.0 * m_v * omega_1 * omega_2) + 2.0 * m_B2 * (4.0 * omega_1 + omega_2)
                             - 2.0 * m_B3 * sigmabar + m_B * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar
                             + m_B * m_v * omega_2 * (5.0 + 2.0 * sigmabar)))
                             / (m_B * power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1B_A2_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * (2.0 * m_B * (sigma2 - 1.0) + m_v * (4.0 * sigma + 5.0))
                             / ((-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1C_A2_3pt_chiB_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to chi_bar_bar_4

            return 0.0;
        }

        double I4_A2_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A2 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * u * (m_v * (4.0 * sigmabar - 3.0) * (q2 - m_B2 * sigmabar2) - 2.0 * m_B * sigma * sigmabar * (2.0 * u - 1.0)
                             * ( m_B2 * sigmabar2 - q2) + 3.0 * m_B * m_v2 * sigmabar * (1.0 - 2.0 * u) + 3.0 * m_v2 * m_v)
                             / (m_B * power_of<5>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1A_A2_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A2 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * (-(3.0 * m_B3 * (m_v * omega_2 * sigmabar2
                             + 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar4)) - 20.0 * m_B3 * sigma5 * q2
                             - m_v * omega_1 * omega_2 * (q2 * sigmabar * (7.0 - 4.0 * sigmabar)
                             + 5.0 * m_v2 * (5.0 + 4.0 * sigmabar)) + m_B * (3.0 * m_v * omega_2 * sigmabar2 * q2
                             + 2.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * (-5.0 + sigmabar2 - 14.0 * sigmabar)
                             + 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar * (1 + 2.0 * sigmabar)
                             + m_v3 * omega_2 * sigmabar * (5.0 + 4.0 * sigmabar)) + m_B2 * m_v * sigmabar * (3.0 * omega_1 * omega_2 * (4.0 - 5.0 * sigmabar)
                             + m_v * (4.0 * omega_1 + omega_2) * (2.0 + 7.0 * sigmabar)) + 2.0 * m_B2 * sigma4 * (5.0 * (4.0 * omega_1 + omega_2) * q2
                             + 2.0 * m_B * (5.0 * m_v2 - 8.0 * q2 * sigmabar))
                             + sigma2 * (12.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar3 - 36 * m_B5 * sigmabar4 + 20.0 * m_v * omega_1 * omega_2 * q2
                             + m_B * (20.0 * m_v3 * omega_2 + 10.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2)
                             - 12.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar - m_v * omega_2 * q2 * (25 + 28 * sigmabar))
                             + 4.0 * m_B3 * (m_v2 * (-5.0 + 3.0 * sigmabar2 - 14.0 * sigmabar) + 3.0 * q2 * sigmabar * (1 + 2.0 * sigmabar)
                             + 3.0 * m_v * omega_2 * sigmabar * (5.0 - 3.0 * sigmabar))
                             + 2.0 * m_B2 * (m_v * (24 * omega_1 * omega_2 - 7.0 * m_v * (4.0 * omega_1 + omega_2))
                             * sigmabar + (4.0 * omega_1 + omega_2) * q2 * (-5.0 + 2.0 * sigmabar2 - 7.0 * sigmabar)))
                             - 2.0 * m_B * sigma3 * (12.0 * m_B4 * sigmabar3 + 5.0 * (2.0 * m_v * omega_2 + omega_1 * (2.0 * omega_1 + omega_2)) * q2
                             + m_B * (4.0 * omega_1 + omega_2) * (5.0 * m_v2 - 7.0 * q2 * sigmabar)
                             + 2.0 * m_B2 * (4.0 * m_v * (-(2.0 * m_v) + 3.0 * omega_2) * sigmabar + q2 * (-5.0 + 3.0 * sigmabar2 - 7.0 * sigmabar)))
                             + sigma * (12.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar4
                             + m_v * omega_1 * omega_2 * (-(20.0 * m_v2) + q2 * (25 + 24 * sigmabar))
                             - 2.0 * m_B2 * (m_v2 * (4.0 * omega_1 + omega_2) * (-5.0 + 2.0 * sigmabar2 - 14.0 * sigmabar)
                             + 2.0 * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (1 + 2.0 * sigmabar)
                             - 6.0 * m_v * omega_1 * omega_2 * sigmabar * (-5.0 + 2.0 * sigmabar))
                             + m_B * (12.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar + m_v3 * omega_2 * (25 + 24 * sigmabar)
                             + 2.0 * m_v * omega_2 * q2 * sigmabar * (1 - 4.0 * sigmabar)
                             - 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (-5.0 + sigmabar2 - 7.0 * sigmabar))
                             - 2.0 * m_B3 * sigmabar * (6.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar2
                             + 3.0 * m_v * omega_2 * (2.0 - 5.0 * sigmabar) + 2.0 * m_v2 * (2.0 + 7.0 * sigmabar))))
                             / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1B_A2_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A2 proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar3 = power_of<3>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * (6.0 * m_B3 * sigmabar3 * sigma + 3.0 * m_B2 * m_v * (1 + 4.0 * sigma2 - 5.0 * sigma) * sigmabar
                             - m_v3 * (5.0 + 4.0 * sigma + 4.0 * sigmabar)
                             + 2.0 * m_B * q2 * sigma * (-1.0 + sigma2 - 2.0 * sigmabar + sigma * sigmabar)
                             + m_B * m_v2 * (2.0 - 2.0 * sigma2 + 7.0 * sigmabar - 2.0 * sigma * sigmabar)
                             + m_v * q2 * (4.0 * sigma2 - 3.0 * sigmabar + sigma * (5.0 + 4.0 * sigmabar)))
                             / (power_of<5>(sigmabar) * omega_2);

            return C_4 * chi_bar_bar_4;
        }

        double I4d1C_A2_3pt_chiB_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A2 proportional to chi_bar_bar_4

            return 0.0;
        }
        double I4d2A_A2_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A2 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar), sigmabar5 = power_of<5>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 =-(4.0 * (-(6.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar5) + 60.0 * m_B3 * sigma5 * q2
                             + 5.0 * m_v * omega_1 * omega_2 * (q2 * sigmabar * (1.0 - 4.0 * sigmabar) + 3.0 * m_v2 * (5.0 + 4.0 * sigmabar))
                             + m_B3 * sigmabar2 * (12.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar2
                             + 3.0 * m_v * omega_2 * (4.0 - 5.0 * sigmabar) + 2.0 * m_v2 * (2.0 + 7.0 * sigmabar))
                             - 30.0 * m_B2 * sigma4 * ((4.0 * omega_1 + omega_2) * q2 + 2.0 * m_B * (m_v2 - 2.0 * q2 * sigmabar))
                             + 2.0 * m_B2 * sigmabar * ((4.0 * omega_1 + omega_2) * q2 * sigmabar * (1.0 + 2.0 * sigmabar)
                             + m_v2 * (4.0 * omega_1 + omega_2) * (-5.0 + sigmabar * (-14.0 + sigmabar))
                             - 3.0 * m_v * omega_1 * omega_2 * (5.0 + 2.0 * sigmabar * (-5.0 + sigmabar)))
                             - m_B * (m_v * omega_2 * sigmabar2 * q2 * (7.0 - 4.0 * sigmabar)
                             + 5.0 * m_v3 * omega_2 * sigmabar * (5.0 + 4.0 * sigmabar)
                             + 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar * (5.0 + 7.0 * sigmabar)
                             + 10.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * (-3.0 + sigmabar * (-7.0 + sigmabar)))
                             + sigma * (-24.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar4 + 36.0 * m_B5 * sigmabar5
                             + 5.0 * m_v * omega_1 * omega_2 * (12.0 * m_v2 - q2 * (15.0 + 16.0 * sigmabar))
                             + 2.0 * m_B3 * sigmabar * (9.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar2
                             + m_v2 * (20.0 - 6.0 * sigmabar2 + 56.0 * sigmabar) - 6.0 * q2 * sigmabar * (1.0 + 2.0 * sigmabar)
                             + 3.0 * m_v * omega_2 * (5.0 + 6.0 * sigmabar2 - 20.0 * sigmabar))
                             + m_B * (-40.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar
                             + 4.0 * m_v * omega_2 * q2 * sigmabar * (5.0 + 11.0 * sigmabar)
                             - 5.0 * m_v3 * omega_2 * (15.0 + 16.0 * sigmabar)
                             + 10.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (-3.0 + sigmabar * (-3.0 + sigmabar)))
                             + 2.0 * m_B2 * (3.0 * m_v * omega_1 * omega_2 * sigmabar * (25.0 - 16.0 * sigmabar)
                             - (4.0 * omega_1 + omega_2) * q2 * sigmabar * (-10.0 + sigmabar * (-14.0 + sigmabar))
                             + m_v2 * (4.0 * omega_1 + omega_2) * (-15.0 + sigmabar * (-35.0 + 11.0 * sigmabar))))
                             + sigma2 * (-(18.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar3) + 72 * m_B5 * sigmabar4
                             - 60.0 * m_v * omega_1 * omega_2 * q2 + 5.0 * m_B
                             * (-(12.0 * m_v3 * omega_2) - 6.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2)
                             + 8.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar + 5.0 * m_v * omega_2 * q2 * (3.0 + 4.0 * sigmabar))
                             - 2.0 * m_B3 * (m_v2 * (-30.0 + 36.0 * sigmabar2 - 70.0 * sigmabar)
                             + 3.0 * m_v * omega_2 * (25.0 - 24.0 * sigmabar) * sigmabar - 6.0 * q2 * sigmabar * (-5.0 + sigmabar * (-7.0 + sigmabar)))
                             + 2.0 * m_B2 * (5.0 * m_v * (-(12.0 * omega_1 * omega_2) + 5.0 * m_v * (4.0 * omega_1 + omega_2))
                             * sigmabar - (4.0 * omega_1 + omega_2) * q2 * (-15.0 + sigmabar * (-15.0 + 11.0 * sigmabar))))
                             + 2.0 * m_B * sigma3 * (18.0 * m_B4 * sigmabar3 + 15.0 * (2.0 * m_v * omega_2 + omega_1 * (2.0 * omega_1 + omega_2)) * q2
                             + 5.0 * m_B * (4.0 * omega_1 + omega_2) * (3.0 * m_v2 - 5.0 * q2 * sigmabar)
                             + 6.0 * m_B2 * (10.0 * m_v * (-m_v + omega_2) * sigmabar + q2 * (-5.0 + sigmabar * (-5.0 + 6.0 * sigmabar))))))
                             / (m_B * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2B_A2_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A2 proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double chi_bar_4     = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return  pow(omega_1 - m_B * sigma,-2.0) * pow(sigmabar,-6.0)
                    * (4.0 * (-(6.0 * m_B3 * omega_1 * sigmabar4) + 10.0 * m_B2 * sigma4 * q2
                    + 2.0 * m_B * sigma3 * (-(5.0 * m_B * m_v2) + 10.0 * m_v * q2 - 5.0 * omega_1 * q2 + 24.0 * m_B2 * m_v * sigmabar
                    + 7.0 * m_B * q2 * sigmabar) + m_v * omega_1
                    * (q2 * sigmabar * (7.0 - 4.0 * sigmabar) + 5.0 * m_v2 * (5.0 + 4.0 * sigmabar))
                    + m_B2 * m_v * sigmabar * (3.0 * omega_1 * (-4.0 + 5.0 * sigmabar) + m_v * (2.0 + 7.0 * sigmabar))
                    + 2.0 * m_B * omega_1 * (q2 * sigmabar * (1 + 2.0 * sigmabar) + m_v2 * (-5.0 + sigmabar * (-14.0 + sigmabar)))
                    + sigma * (12.0 * m_B4 * sigmabar4 + m_v * omega_1 * (20.0 * m_v2 - q2 * (25 + 24 * sigmabar))
                    - 3.0 * m_B3 * sigmabar * (4.0 * omega_1 * sigmabar2 + m_v * (-4.0 + 5.0 * sigmabar))
                    + m_B * (12.0 * m_v2 * omega_1 * sigmabar - 5.0 * m_v3 * (5.0 + 4.0 * sigmabar)
                    + m_v * q2 * sigmabar * (-7.0 + 4.0 * sigmabar) - 2.0 * omega_1 * q2 * (-5.0 + sigmabar * (-7.0 + sigmabar)))
                    - 2.0 * m_B2 * (2.0 * q2 * sigmabar * (1 + 2.0 * sigmabar)
                    + 6.0 * m_v * omega_1 * sigmabar * (-5.0 + 2.0 * sigmabar)
                    + m_v2 * (-5.0 + 2.0 * sigmabar * (-7.0 + sigmabar))))
                    + sigma2 * (12.0 * m_B4 * sigmabar3 - 20.0 * m_v * omega_1 * q2
                    + 12.0 * m_B3 * m_v * sigmabar * (-5.0 + 2.0 * sigmabar)
                    + m_B * (-(20.0 * m_v3) + 10.0 * m_v2 * omega_1 - 12.0 * omega_1 * q2 * sigmabar
                    + m_v * q2 * (25.0 + 24.0 * sigmabar)) - 2.0 * m_B2
                    * (m_v * (7.0 * m_v + 24.0 * omega_1) * sigmabar + q2 * (5.0 + sigmabar * (7.0 - 2.0 * sigmabar))))) * chi_bar_bar_4
                    + 2.0 * m_B * (-omega_1 + m_B * sigma) * sigmabar
                    * (6.0 * m_B3 * sigmabar3 * sigma + 3.0 * m_B2 * m_v * (-1.0 + sigma) * (-1.0 + 4.0 * sigma) * sigmabar
                    - m_v3 * (5.0 + 4.0 * sigma + 4.0 * sigmabar) + 2.0 * m_B * q2 * sigma * (-1.0 + sigma2 + (-2.0 + sigma) * sigmabar)
                    + m_B * m_v2 * (2.0 + 7.0 * sigmabar - 2.0 * sigma * (sigma + sigmabar))
                    + m_v * q2 * (-(3.0 * sigmabar) + sigma * (5.0 + 4.0 * sigma + 4.0 * sigmabar))) * chi_bar_4);
        }

        double I4d2C_A2_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A2 proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar3 = power_of<3>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * m_B * (6.0 * m_B3 * sigmabar3 * sigma
                             + (-m_v2 + q2 * sigma) * (2.0 * m_B * (-1.0 + sigma2) - m_v * (5.0 + 4.0 * sigma))
                             + (4.0 * m_v3 + 2.0 * m_B * q2 * sigma * (-2.0 + sigma) + m_B * m_v2 * (7.0 - 2.0 * sigma)
                             + m_v * q2 * (3.0 - 4.0 * sigma) - 3.0 * m_B2 * m_v * (-1.0 + sigma) * (-1 + 4.0 * sigma)) * sigmabar)
                             / (power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2D_A2_3pt_chiB_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to A2 proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double chi_bar_4     = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return    2.0 * pow(m_B,-1) * pow(sigmabar,-6.0) * ((3.0 * m_B2 * m_v * sigmabar2 * (-5.0 + 8.0 * sigma)
                    + 6.0 * m_B3 * sigmabar3 * (-(2.0 * sigma) + sigmabar)
                    + m_v * (5.0 + 4.0 * sigma + 4.0 * sigmabar) * (-m_v2 + q2 * (sigma + sigmabar))
                    + 2.0 * m_B * (-(m_v2 * (-1.0 + sigma + sigmabar) * (1.0 + sigma + sigmabar))
                    + q2 * (sigma3 - sigma + sigmabar2 * (-2.0 + sigma) + (-1 + 2.0 * sigma2 + sigma) * sigmabar))) * chi_bar_bar_4 + m_B * sigmabar
                    * (6.0 * m_B3 * sigmabar3 * sigma + (-m_v2 + q2 * sigma) * (2.0 * m_B * (-1.0 + sigma2) + m_v * (5.0 + 4.0 * sigma))
                    + (-(4.0 * m_v3) + 2.0 * m_B * q2 * sigma * (-2.0 + sigma) + m_B * m_v2 * (7.0 - 2.0 * sigma)
                    + 3.0 * m_B2 * m_v * (-1.0 + sigma) * (-1 + 4.0 * sigma) + m_v * q2 * (-3.0 + 4.0 * sigma)) * sigmabar) * chi_bar_4);
        }

        double I3_A2_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + 0.0                                                       - I3_A2_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1A_A2_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + 0.0                                                       - I3d1A_A2_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1B_A2_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return + 0.0                                                       - I3d1B_A2_3pt_chiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I3d1C_A2_3pt_chi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return + 0.0                                                       - I3d1C_A2_3pt_chiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4_A2_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I4_A2_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2)    - I4_A2_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1A_A2_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I4d1A_A2_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d1A_A2_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1B_A2_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return + I4d1B_A2_3pt_chiA_bar_bar_4( sigma, omega_1, q2)          - I4d1B_A2_3pt_chiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d1C_A2_3pt_chi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return + I4d1C_A2_3pt_chiA_bar_bar_4( sigma, omega_2, q2)          - I4d1C_A2_3pt_chiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2A_A2_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I4d2A_A2_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d2A_A2_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d2B_A2_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return + I4d2B_A2_3pt_chiA_bar_bar_4( sigma, omega_1, q2)          - I4d2B_A2_3pt_chiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d2C_A2_3pt_chi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return + I4d2C_A2_3pt_chiA_bar_bar_4( sigma, omega_2, q2)          - I4d2C_A2_3pt_chiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2D_A2_3pt_chi_bar_bar_4(const double & sigma, const double & q2) const
        {
            return + I4d2D_A2_3pt_chiA_bar_bar_4( sigma, q2)                   - I4d2D_A2_3pt_chiB_bar_bar_4(sigma, q2);
        }
        // }}}

        /* A2 : integrands and surface terms */
        // {{{
        double integrand_A2_2pt_disp(const double & sigma, const double & q2) const
        {
            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);
            const double etad3    = 24.0 * (eta - 1.0) * power_of<2>(eta) * (2.0 * eta - 1.0) / power_of<3>(sigmabar);

            const double I1   = I1_A2_2pt_phi_p(sigma, q2);
            const double I2   = I2_A2_2pt_phi_bar(sigma, q2)   + I2_A2_2pt_g_p(sigma, q2);
            const double I2d1 = I2d1_A2_2pt_phi_bar(sigma, q2) + I2d1_A2_2pt_g_p(sigma, q2);
            const double I3   = I3_A2_2pt_g_p(sigma, q2)       + I3_A2_2pt_g_bar(sigma, q2);
            const double I3d1 = I3d1_A2_2pt_g_p(sigma, q2)     + I3d1_A2_2pt_g_bar(sigma, q2);
            const double I3d2 = I3d2_A2_2pt_g_p(sigma, q2)     + I3d2_A2_2pt_g_bar(sigma, q2);
            const double I4   = I4_A2_2pt_g_bar(sigma, q2);
            const double I4d1 = I4d1_A2_2pt_g_bar(sigma, q2);
            const double I4d2 = I4d2_A2_2pt_g_bar(sigma, q2);
            const double I4d3 = I4d3_A2_2pt_g_bar(sigma, q2);

            double result = 0.0;
            result += -1.0 * I1;
            result += (etad1 * I2 + eta * I2d1) / m_B2;
            result += -1.0 * (I3 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I3d1 * eta * etad1 + I3d2 * power_of<2>(eta)) / (2.0 * m_B4);
            result += I4 * (power_of<2>(eta) * etad3 + 4.0 * eta * etad1 * etad2 + power_of<3>(etad1)) / (6.0 * m_B6);
            result += I4d1 * eta * (4.0 * eta * etad2 + 7.0 * power_of<2>(etad1)) / (6.0 * m_B6);
            result += I4d2 * 6.0 * power_of<2>(eta) * etad1 / (6.0 * m_B6);
            result += I4d3 * power_of<3>(eta) / (6.0 * m_B6);
            result *= exp;

            return result;
        }

        double integrand_A2_2pt_borel(const double & sigma, const double & q2) const
        {
            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double I1   = I1_A2_2pt_phi_p(sigma, q2);
            const double I2   = I2_A2_2pt_phi_bar(sigma, q2)   + I2_A2_2pt_g_p(sigma, q2);
            const double I3   = I3_A2_2pt_g_p(sigma, q2)       + I3_A2_2pt_g_bar(sigma, q2);
            const double I4   = I4_A2_2pt_g_bar(sigma, q2);

            double result = 0.0;
            result += - I1;
            result +=   I2 / M2;
            result += - I3 / (2.0 * M4);
            result +=   I4 / (6.0 * M6);
            result *= exp;

            return result;
        }

        double surface_A2_2pt(const double & sigma, const double & q2) const
        {
            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_A2_2pt_phi_bar(sigma, q2)   + I2_A2_2pt_g_p(sigma, q2);
            const double I3   = I3_A2_2pt_g_p(sigma, q2)       + I3_A2_2pt_g_bar(sigma, q2);
            const double I3d1 = I3d1_A2_2pt_g_p(sigma, q2)     + I3d1_A2_2pt_g_bar(sigma, q2);
            const double I4   = I4_A2_2pt_g_bar(sigma, q2);
            const double I4d1 = I4d1_A2_2pt_g_bar(sigma, q2);
            const double I4d2 = I4d2_A2_2pt_g_bar(sigma, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / (power_of<2>( M2())));
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;

            return result;
        }

        /*
         * rewrite integration ranges such that:
         * 1.)
         *    0 <= x_1 <= 1,     and    0 <= x_2 <= 1,
         * 2.)
         *    x_1 and x_2 integration boundaries do not depend on the other variables
         *
         * We obtain the integrand
         *
         *    sigma m_B f(sigma m_B x_1, sigma m_B (xbar_1 xbar_2 + x_2) / xbar_2) / (xbar_1 xbar_2^2 + x_2 xbar_2),
         *
         * where
         *
         *    xbar_1 = 1.0 - x_1,    and    xbar_2 = 1.0 - x_2.
         */
        double integrand_A2_3pt(const std::array<double, 3> & args, const double & q2) const
        {
            const double sigma  = args[0];
            const double x_1    = args[1];
            const double x_2    = args[2];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            constexpr double I1 = 0.0;
            const     double I2 = I2_A2_3pt_phi_3(sigma, omega_1, omega_2, q2)         + I2_A2_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                                + I2_A2_3pt_phi_4(sigma, omega_1, omega_2, q2)         + I2_A2_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                                + I2_A2_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I2_A2_3pt_chi_bar_4(sigma, omega_1, omega_2, q2);
            const     double I3 = I3_A2_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                                + I3_A2_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3_A2_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                                + I3_A2_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3_A2_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                                + I3_A2_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3_A2_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const     double I4 = I4_A2_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4_A2_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                                + I4_A2_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4_A2_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result = 0.0;
            result += - I1;
            result +=   I2 / M2;
            result += - I3 / (2.0 * M4);
            result +=   I4 / (6.0 * M6);
            result *=   prefactor * exp;

            return result;
        }

        double surface_A2_3pt_A(const std::array<double, 2> & args, const double & sigma, const double & q2) const
        {
            const double x_1    = args[0];
            const double x_2    = args[1];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_A2_3pt_phi_3(sigma, omega_1, omega_2, q2)            + I2_A2_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                              + I2_A2_3pt_phi_4(sigma, omega_1, omega_2, q2)            + I2_A2_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_A2_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I2_A2_3pt_chi_bar_4(sigma, omega_1, omega_2, q2);
            const double I3   = I3_A2_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                              + I3_A2_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)        + I3_A2_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_A2_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I3_A2_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_A2_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I3_A2_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3d1 = I3d1A_A2_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                              + I3d1A_A2_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_A2_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_A2_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_A2_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_A2_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3d1A_A2_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4   = I4_A2_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)    + I4_A2_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4_A2_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I4_A2_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d1 = I4d1A_A2_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d1A_A2_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d1A_A2_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d1A_A2_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d2 = I4d2A_A2_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d2A_A2_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d2A_A2_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d2A_A2_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        double surface_A2_3pt_B(const double & x_1, const double & sigma, const double & q2) const
        {
            // this ONLY includes the Jacobian from the transformation (omega_1 -> x_1).
            const double prefactor = sigma * m_B();

            const double omega_1 = sigma * m_B() * x_1;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1B_A2_3pt_phi_bar_3(sigma, omega_1, q2)
                                  + I3d1B_A2_3pt_phi_bar_4(sigma, omega_1, q2)     + I3d1B_A2_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I3d1B_A2_3pt_psi_bar_4(sigma, omega_1, q2)     + I3d1B_A2_3pt_chi_bar_4(sigma, omega_1, q2)
                                  + I3d1B_A2_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I3d1B_A2_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1B_A2_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d1B_A2_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d1B_A2_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d1B_A2_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            const     double I4d2 = I4d2B_A2_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d2B_A2_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d2B_A2_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d2B_A2_3pt_chi_bar_bar_4(sigma, omega_1, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        double surface_A2_3pt_C(const double & x_2, const double & sigma, const double & q2) const
        {
            const double xbar_2 = 1.0 - x_2;

            // this ONLY includes the Jacobian from the transformation (omega_2 -> x_2).
            const double prefactor = sigma * m_B() / (xbar_2 * xbar_2);

            const double omega_2 = sigma * m_B() * (x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1C_A2_3pt_phi_bar_3(sigma, omega_2, q2)
                                  + I3d1C_A2_3pt_phi_bar_4(sigma, omega_2, q2)     + I3d1C_A2_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I3d1C_A2_3pt_psi_bar_4(sigma, omega_2, q2)     + I3d1C_A2_3pt_chi_bar_4(sigma, omega_2, q2)
                                  + I3d1C_A2_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I3d1C_A2_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1C_A2_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d1C_A2_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d1C_A2_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d1C_A2_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            const     double I4d2 = I4d2C_A2_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d2C_A2_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d2C_A2_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d2C_A2_3pt_chi_bar_bar_4(sigma, omega_2, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }
        double surface_A2_3pt_D(const double & sigma, const double & q2) const
        {
            // this does NOT includes the original factor of 1 / omega_2
            const double prefactor = 1.0;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);


            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            constexpr double I3d1 = 0.0;
            constexpr double I4   = 0.0;
            constexpr double I4d1 = 0.0;
            const     double I4d2 = I4d2D_A2_3pt_phi_bar_bar_3(sigma, q2) + I4d2D_A2_3pt_phi_bar_bar_4(sigma, q2)
                                  + I4d2D_A2_3pt_psi_bar_bar_4(sigma, q2) + I4d2D_A2_3pt_chi_bar_bar_4(sigma, q2);


            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        /*
         * Integrands for the first moments. Only the borel method is implemented
         */

        double integrand_A2_2pt_borel_m1(const double & sigma, const double & q2) const
        {
            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double I1   = I1_A2_2pt_phi_p(sigma, q2);
            const double I2   = I2_A2_2pt_phi_bar(sigma, q2)   + I2_A2_2pt_g_p(sigma, q2);
            const double I3   = I3_A2_2pt_g_p(sigma, q2)       + I3_A2_2pt_g_bar(sigma, q2);
            const double I4   = I4_A2_2pt_g_bar(sigma, q2);

            double result1 = 0.0;
            result1 += - I1;
            result1 +=   I2 / M2;
            result1 += - I3 / (2.0 * M4);
            result1 +=   I4 / (6.0 * M6);
            result1 *=   exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - I2;
            result2 +=   I3 / M2;
            result2 += - I4 / (2.0 * M4);
            result2 *=   exp;

            return result1 + result2;
        }

        double surface_A2_2pt_m1(const double & sigma, const double & q2) const
        {
            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double m_V2 = power_of<2>(m_V());
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_A2_2pt_phi_bar(sigma, q2)   + I2_A2_2pt_g_p(sigma, q2);
            const double I3   = I3_A2_2pt_g_p(sigma, q2)       + I3_A2_2pt_g_bar(sigma, q2);
            const double I3d1 = I3d1_A2_2pt_g_p(sigma, q2)     + I3d1_A2_2pt_g_bar(sigma, q2);
            const double I4   = I4_A2_2pt_g_bar(sigma, q2);
            const double I4d1 = I4d1_A2_2pt_g_bar(sigma, q2);
            const double I4d2 = I4d2_A2_2pt_g_bar(sigma, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return result1 + result2;
        }
        double integrand_A2_3pt_m1(const std::array<double, 3> & args, const double & q2) const
        {
            const double sigma  = args[0];
            const double x_1    = args[1];
            const double x_2    = args[2];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double I1 = 0.0;
            const double I2 = I2_A2_3pt_phi_3(sigma, omega_1, omega_2, q2)         + I2_A2_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                            + I2_A2_3pt_phi_4(sigma, omega_1, omega_2, q2)         + I2_A2_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_A2_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I2_A2_3pt_chi_bar_4(sigma, omega_1, omega_2, q2);
            const double I3 = I3_A2_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                            + I3_A2_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3_A2_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I3_A2_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3_A2_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                            + I3_A2_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3_A2_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4 = I4_A2_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4_A2_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I4_A2_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4_A2_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result1 = 0.0;
            result1 += - I1;
            result1 +=   I2 / M2;
            result1 += - I3 / (2.0 * M4);
            result1 +=   I4 / (6.0 * M6);
            result1 *=   exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - I2;
            result2 +=   I3 / M2;
            result2 += - I4 / (2.0 * M4);
            result2 *=   exp;

            return (result1 + result2) * prefactor;
        }

        double surface_A2_3pt_A_m1(const std::array<double, 2> & args, const double & sigma, const double & q2) const
        {
            const double x_1    = args[0];
            const double x_2    = args[1];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_A2_3pt_phi_3(sigma, omega_1, omega_2, q2)            + I2_A2_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                              + I2_A2_3pt_phi_4(sigma, omega_1, omega_2, q2)            + I2_A2_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_A2_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I2_A2_3pt_chi_bar_4(sigma, omega_1, omega_2, q2);
            const double I3   = I3_A2_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                              + I3_A2_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)        + I3_A2_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_A2_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I3_A2_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_A2_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I3_A2_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3d1 = I3d1A_A2_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                              + I3d1A_A2_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_A2_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_A2_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_A2_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_A2_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3d1A_A2_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4   = I4_A2_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)    + I4_A2_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4_A2_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I4_A2_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d1 = I4d1A_A2_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d1A_A2_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d1A_A2_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d1A_A2_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d2 = I4d2A_A2_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d2A_A2_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d2A_A2_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d2A_A2_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }

        double surface_A2_3pt_B_m1(const double & x_1, const double & sigma, const double & q2) const
        {
            // this ONLY includes the Jacobian from the transformation (omega_1 -> x_1).
            const double prefactor = sigma * m_B();

            const double omega_1 = sigma * m_B() * x_1;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1B_A2_3pt_phi_bar_3(sigma, omega_1, q2)
                                  + I3d1B_A2_3pt_phi_bar_4(sigma, omega_1, q2)     + I3d1B_A2_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I3d1B_A2_3pt_psi_bar_4(sigma, omega_1, q2)     + I3d1B_A2_3pt_chi_bar_4(sigma, omega_1, q2)
                                  + I3d1B_A2_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I3d1B_A2_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1B_A2_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d1B_A2_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d1B_A2_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d1B_A2_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            const     double I4d2 = I4d2B_A2_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d2B_A2_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d2B_A2_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d2B_A2_3pt_chi_bar_bar_4(sigma, omega_1, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }

        double surface_A2_3pt_C_m1(const double & x_2, const double & sigma, const double & q2) const
        {
            const double xbar_2 = 1.0 - x_2;

            // this ONLY includes the Jacobian from the transformation (omega_2 -> x_2).
            const double prefactor = sigma * m_B() / (xbar_2 * xbar_2);

            const double omega_2 = sigma * m_B() * (x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1C_A2_3pt_phi_bar_3(sigma, omega_2, q2)
                                  + I3d1C_A2_3pt_phi_bar_4(sigma, omega_2, q2)     + I3d1C_A2_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I3d1C_A2_3pt_psi_bar_4(sigma, omega_2, q2)     + I3d1C_A2_3pt_chi_bar_4(sigma, omega_2, q2)
                                  + I3d1C_A2_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I3d1C_A2_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1C_A2_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d1C_A2_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d1C_A2_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d1C_A2_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            const     double I4d2 = I4d2C_A2_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d2C_A2_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d2C_A2_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d2C_A2_3pt_chi_bar_bar_4(sigma, omega_2, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }

        double surface_A2_3pt_D_m1(const double & sigma, const double & q2) const
        {
            // this does NOT includes the original factor of 1 / omega_2
            const double prefactor = 1.0;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);


            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            constexpr double I3d1 = 0.0;
            constexpr double I4   = 0.0;
            constexpr double I4d1 = 0.0;
            const     double I4d2 = I4d2D_A2_3pt_phi_bar_bar_3(sigma, q2) + I4d2D_A2_3pt_phi_bar_bar_4(sigma, q2)
                                  + I4d2D_A2_3pt_psi_bar_bar_4(sigma, q2) + I4d2D_A2_3pt_chi_bar_bar_4(sigma, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }
        // }}}

        /* A2 : form factor and moments */
        // {{{
        double a_2(const double & q2) const
        {
            const double sigma_0 = this->sigma_0(q2, s0_0_A2(), s0_1_A2());

            const std::function<double (const double &)> integrand_2pt = std::bind(integrand_a2_2pt, this, std::placeholders::_1, q2);

            const double integral_2pt = integrate<GSL::QAGS>(integrand_2pt, 0.0, sigma_0);
            const double surface_2pt  = 0.0 - surface_A2_2pt(switch_borel ? sigma_0 : 0.0, q2);

            double integral_3pt = 0.0;
            double surface_3pt  = 0.0;

            if (switch_3pt != 0.0)
            {
                const std::function<double (const double &)> surface_3pt_B = std::bind(&Implementation::surface_A2_3pt_B, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const double &)> surface_3pt_C = std::bind(&Implementation::surface_A2_3pt_C, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const std::array<double, 3> &)> integrand_3pt = std::bind(&Implementation::integrand_A2_3pt, this, std::placeholders::_1, q2);
                const std::function<double (const std::array<double, 2> &)> surface_3pt_A = std::bind(&Implementation::surface_A2_3pt_A, this, std::placeholders::_1, sigma_0, q2);

                integral_3pt = integrate(integrand_3pt, { 0.0, 0.0, 0.0 }, { sigma_0, 1.0, 1.0 }, cubature::Config());
                surface_3pt  = 0.0
                             - integrate(surface_3pt_A, { 0.0, 0.0 }, { 1.0, 1.0 }, cubature::Config()) // integrate over x_1 and x_2
                             - integrate<GSL::QAGS>(surface_3pt_B, 0.0, 1.0)                            // integrate over x_1
                             - integrate<GSL::QAGS>(surface_3pt_C, 0.0, 1.0)                            // integrate over x_2
                             - surface_A2_3pt_D(sigma_0, q2);
            }

            return f_B() * m_B() * (m_B + m_V) / (2.0 * f_V() * m_V) * (integral_2pt + surface_2pt + integral_3pt + surface_3pt) / ( Process_::chi2);
        }

        double normalized_moment_1_a_2(const double & q2) const
        {
            const double sigma_0 = this->sigma_0(q2, s0_0_A2(), s0_1_A2());

            const std::function<double (const double &)> integrand_2pt_m1 = std::bind(&Implementation::integrand_A2_2pt_borel_m1, this, std::placeholders::_1, q2);


            const std::function<double (const double &)> integrand_2pt    = std::bind(&Implementation::integrand_A2_2pt_borel, this, std::placeholders::_1, q2);

            const double integral_2pt_m1 = integrate<GSL::QAGS>(integrand_2pt_m1, 0.0, sigma_0);
            const double surface_2pt_m1  = 0.0 - surface_A2_2pt_m1(sigma_0, q2);

            double integral_3pt_m1 = 0.0;
            double surface_3pt_m1  = 0.0;

            if (switch_3pt != 0.0)
            {
                const std::function<double (const double &)> surface_3pt_B_m1 = std::bind(&Implementation::surface_A2_3pt_B_m1, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const double &)> surface_3pt_C_m1 = std::bind(&Implementation::surface_A2_3pt_C_m1, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const std::array<double, 3> &)> integrand_3pt_m1 = std::bind(&Implementation::integrand_A2_3pt_m1, this, std::placeholders::_1, q2);
                const std::function<double (const std::array<double, 2> &)> surface_3pt_A_m1 = std::bind(&Implementation::surface_A2_3pt_A_m1, this, std::placeholders::_1, sigma_0, q2);

                integral_3pt_m1 = integrate(integrand_3pt_m1, { 0.0, 0.0, 0.0 }, { sigma_0, 1.0, 1.0 }, cubature::Config());
                surface_3pt_m1  = 0.0
                                - integrate(surface_3pt_A_m1, { 0.0, 0.0 }, { 1.0, 1.0 }, cubature::Config()) // integrate over x_1 and x_2
                                - integrate<GSL::QAGS>(surface_3pt_B_m1, 0.0, 1.0)                            // integrate over x_1
                                - integrate<GSL::QAGS>(surface_3pt_C_m1, 0.0, 1.0)                            // integrate over x_2
                                - surface_A2_3pt_D_m1(sigma_0, q2);
            }
            const double numerator       = integral_2pt_m1 + surface_2pt_m1 + integral_3pt_m1 + surface_3pt_m1;

            const double integral_2pt    = integrate<GSL::QAGS>(integrand_2pt, 0.0, sigma_0);
            const double surface_2pt     = 0.0 - surface_A2_2pt(sigma_0, q2);

            double integral_3pt    = 0.0;
            double surface_3pt     = 0.0;

            if (switch_3pt != 0.0)
            {
                const std::function<double (const double &)> surface_3pt_B    = std::bind(&Implementation::surface_A2_3pt_B, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const double &)> surface_3pt_C    = std::bind(&Implementation::surface_A2_3pt_C, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const std::array<double, 3> &)> integrand_3pt = std::bind(&Implementation::integrand_A2_3pt, this, std::placeholders::_1, q2);
                const std::function<double (const std::array<double, 2> &)> surface_3pt_A = std::bind(&Implementation::surface_A2_3pt_A, this, std::placeholders::_1, sigma_0, q2);

                integral_3pt    = integrate(integrand_3pt, { 0.0, 0.0, 0.0 }, { sigma_0, 1.0, 1.0 }, cubature::Config());
                surface_3pt     = 0.0
                                - integrate(surface_3pt_A, { 0.0, 0.0 }, { 1.0, 1.0 }, cubature::Config()) // integrate over x_1 and x_2
                                - integrate<GSL::QAGS>(surface_3pt_B, 0.0, 1.0)                            // integrate over x_1
                                - integrate<GSL::QAGS>(surface_3pt_C, 0.0, 1.0)                            // integrate over x_2
                                - surface_A2_3pt_D(sigma_0, q2);
            }
            const double denominator     = integral_2pt + surface_2pt + integral_3pt + surface_3pt;

            return numerator / denominator;
        }
        // }}}

        /* A_3 - A_0 */

        inline
        double I1_A30_2pt_phi_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A30 proportional to phi_+

            const double sigmabar = 1.0 - sigma;

            const double phi_plus  = this->phi_plus(sigma * m_B);

            const double C_1 =  3.0 / sigmabar - 2.0;

            return C_1 * phi_plus;
        }

        inline
        double I2_A30_2pt_phi_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A30 proportional to phibar
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double m_v = this->m_v();

            const double phi_bar  = this->phi_bar(sigma * m_B);

            const double C_2 = (m_v - 2.0 * m_B * (sigmabar2 - 3.0 * sigmabar + 2.0)) / (power_of<2>(sigmabar));

            return C_2 * phi_bar;
        }

        inline
        double I2d1_A30_2pt_phi_bar(const double & sigma, const double & /*q2*/) const
        {
            // first derivative of two-particle contribution to A30 proportional to phibar
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double m_v = this->m_v();

            const double phi_bar     = this->phi_bar(sigma * m_B);
            const double phi_bar_d1  = this->phi_bar_d1(sigma * m_B);

            const double C_2   = (m_v - 2.0 * m_B * (sigmabar2 - 3.0 * sigmabar + 2.0)) / (power_of<2>(sigmabar)) * m_B;
            const double C_2d1 = 2.0 * (m_v + m_B * (3.0 * sigmabar - 4.0)) / (power_of<3>(sigmabar));

            return C_2 * phi_bar_d1 + C_2d1 * phi_bar;
        }

        inline
        double I2_A30_2pt_g_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A30 proportional to g_+
            const double sigmabar = 1.0 - sigma;

            const double g_plus   = this->g_plus(sigma * m_B);

            const double C_2 = (12.0 - 8.0 * sigmabar) / (power_of<2>(sigmabar));

            return C_2 * g_plus;
        }

        inline
        double I2d1_A30_2pt_g_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A30 proportional to g_+
            const double sigmabar = 1.0 - sigma;

            const double g_plus    = this->g_plus(sigma * m_B);
            const double g_plus_d1 = this->g_plus_d1(sigma * m_B);

            const double C_2   = (12.0 - 8.0 * sigmabar) / (power_of<2>(sigmabar)) * m_B;
            const double C_2d1 = - 8.0 * (sigmabar - 3.0) / (power_of<3>(sigmabar));

            return C_2  * g_plus_d1 + C_2d1 * g_plus;
        }

        inline
        double I3_A30_2pt_g_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A30 proportional to g_+
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_plus    = this->g_plus(sigma * m_B);

            const double C_3 = 8.0 * m_v2 * (2.0 * sigmabar - 3.0) / (power_of<3>(sigmabar));

            return C_3 * g_plus;
        }

        inline
        double I3d1_A30_2pt_g_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A30 proportional to g_+
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_plus    = this->g_plus(sigma * m_B);
            const double g_plus_d1 = this->g_plus_d1(sigma * m_B);

            const double C_3   = 8.0 * m_v2 * (2.0 * sigmabar - 3.0) / (power_of<3>(sigmabar)) * m_B;
            const double C_3d1 = 8.0 * m_v2 * (4.0 * sigmabar - 9.0) / (power_of<4>(sigmabar));

            return C_3 * g_plus_d1 + C_3d1 * g_plus;
        }

        inline
        double I3d2_A30_2pt_g_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A30 proportional to g_+
            const double sigmabar = 1.0 - sigma;
            const double m_B2 = power_of<2>(m_B);
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_plus    = this->g_plus(sigma * m_B);
            const double g_plus_d1 = this->g_plus_d1(sigma * m_B);
            const double g_plus_d2 = this->g_plus_d2(sigma * m_B);

            const double C_3   = 8.0 * m_v2 * (2.0 * sigmabar - 3.0) / (power_of<3>(sigmabar)) * m_B2;
            const double C_3d1 = 16.0 * m_v2 * (4.0 * sigmabar - 9.0) / (power_of<4>(sigmabar)) * m_B;
            const double C_3d2 = 96.0 * m_v2 * (sigmabar - 3.0) / (power_of<5>(sigmabar));

            return C_3 * g_plus_d2 + C_3d1 * g_plus_d1 + C_3d2 * g_plus;
        }

        inline
        double I3_A30_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A30 proportional to gbar
            const double sigmabar = 1.0 - sigma;

            const double g_bar    = this->g_bar(sigma * m_B);

            const double C_3 = 16.0 * m_B * sigma * (sigmabar - 2) / (power_of<3>(sigmabar));

            return C_3 * g_bar;
        }

        inline
        double I3d1_A30_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A30 proportional to gbar
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double m_B2 = power_of<2>(m_B);

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);

            const double C_3   = - 16.0 * (sigmabar2 -3.0 * sigmabar + 2.0) / (power_of<3>(sigmabar)) * m_B2;
            const double C_3d1 = - 16.0 * (sigmabar2 -6.0 * sigmabar + 6.0) / (power_of<4>(sigmabar)) * m_B;

            return C_3 * g_bar_d1 + C_3d1 * g_bar;
        }

        inline
        double I3d2_A30_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A30 proportional to gbar
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double m_B2 = power_of<2>(m_B);

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);
            const double g_bar_d2 = this->g_bar_d2(sigma * m_B);

            const double C_3   = - 16.0 * (sigmabar2 -3.0 * sigmabar + 2.0) / (power_of<3>(sigmabar)) * m_B2 * m_B;
            const double C_3d1 = - 32.0 * (sigmabar2 -6.0 * sigmabar + 6.0) / (power_of<4>(sigmabar)) * m_B2;
            const double C_3d2 = - 32.0 * (sigmabar2 -9.0 * sigmabar + 12.0) / (power_of<5>(sigmabar)) * m_B;

            return C_3 * g_bar_d2 + C_3d1 * g_bar_d1 + C_3d2 * g_bar;
        }

        inline
        double I4_A30_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A30 proportional to gbar
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);

            const double C_4 = - 24.0 * m_v2 * (m_v - 2.0 * m_B * (sigmabar2 - 3.0 * sigmabar + 2.0)) / (power_of<4>(sigmabar));

            return C_4 * g_bar;
        }

        inline
        double I4d1_A30_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A30 proportional to gbar
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);

            const double C_4   = - 24.0 * m_v2 * (m_v - 2.0 * m_B * (sigmabar2 - 3.0 * sigmabar + 2.0)) / (power_of<4>(sigmabar)) * m_B;
            const double C_4d1 = - 48.0 * m_v2 * (m_B * (- 2.0 * sigmabar2 + 9.0 * sigmabar - 8.0) + 2.0 * m_v) / (power_of<5>(sigmabar));

            return C_4 * g_bar_d1 + C_4d1 * g_bar;
        }

        inline
        double I4d2_A30_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A30 proportional to gbar
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double m_B2 = power_of<2>(m_B);
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);
            const double g_bar_d2 = this->g_bar_d2(sigma * m_B);

            const double C_4   = - 24.0 * m_v2 * (m_v - 2.0 * m_B * (sigmabar2 - 3.0 * sigmabar + 2.0)) / (power_of<4>(sigmabar)) * m_B2;
            const double C_4d1 = - 96.0 * m_v2 * (m_B * (- 2.0 * sigmabar2 + 9.0 * sigmabar - 8.0) + 2.0 * m_v) / (power_of<5>(sigmabar)) * m_B;
            const double C_4d2 = - 96.0 * m_v2 * (m_B * (- 3.0 * sigmabar2 + 18.0 * sigmabar - 20.0) + 5.0 * m_v) / (power_of<6>(sigmabar));

            return C_4 * g_bar_d2 + C_4d1 * g_bar_d1 + C_4d2 * g_bar;
        }

        inline
        double I4d3_A30_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to A30 proportional to gbar
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double m_B2 = power_of<2>(m_B);
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);
            const double g_bar_d2 = this->g_bar_d2(sigma * m_B);
            const double g_bar_d3 = this->g_bar_d3(sigma * m_B);

            const double C_4   = - 24.0 * m_v2 * (m_v - 2.0 * m_B * (sigmabar2 - 3.0 * sigmabar + 2.0)) / (power_of<4>(sigmabar)) * m_B2 * m_B;
            const double C_4d1 = - 144.0 * m_v2 * (m_B * (- 2.0 * sigmabar2 + 9.0 * sigmabar - 8.0) + 2.0 * m_v) / (power_of<5>(sigmabar)) * m_B2;
            const double C_4d2 = - 288.0 * m_v2 * (m_B * (- 3.0 * sigmabar2 + 18.0 * sigmabar - 20.0) + 5.0 * m_v) / (power_of<6>(sigmabar)) * m_B;
            const double C_4d3 = - 576.0 * m_v2 * (m_B * (- 2.0 * sigmabar2 + 15.0 * sigmabar - 20.0) + 5.0 * m_v) / (power_of<7>(sigmabar));

            return C_4 * g_bar_d3 + C_4d1 * g_bar_d2 + C_4d2 * g_bar_d1 + C_4d3 * g_bar;
        }

        /* A3 - A0 : 3-particle functions */
        // {{{
        double I2_A30_3pt_phi_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to phi_3
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_3 = this->phi_3(omega_1, omega_2);

            const double C_2 = (m_B * (5.0 - 2.0 * sigmabar) * u + 4.0 * m_v) / (m_B * power_of<2>(sigmabar));

            return C_2 * phi_3;
        }

        double I2_A30_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to phi_bar_3
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_2 = 2.0 * (sigmabar - 3.0) * u / (m_B * power_of<3>(sigmabar));

            return C_2 * phi_bar_3;
        }

        double I3_A30_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A30 proportional to phi_bar_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = -2.0 * (m_B2 * sigmabar * (2.0 * sigmabar2 - 9.0 * sigmabar + 8.0) * u + 4.0 * m_B * m_v * (3.0 - 2.0 * sigmabar) * sigmabar
                             + m_v2 * (2.0 * sigmabar + 3.0) * u + q2 * (2.0 * sigmabar - 3.0) * u)
                             / (m_B * power_of<4>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I3d1A_A30_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A30 proportional to phi_bar_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = -(2.0 * (m_B * (4.0 * sigma * (-(3.0 * q2 * sigma) + m_v2 * (2.0 + sigma))
                             + sigmabar2 * (3.0 * m_v2 + 8.0 * m_v * omega_2 - q2 + m_B2 * (1 + 2.0 * sigma * (5.0 + 3.0 * sigma)))
                             + (2.0 * m_v2 + 12.0 * m_v * omega_2 * (1 + 2.0 * sigma)
                             + sigma * (11.0 * m_v2 - 9.0 * q2 + 3.0 * m_B2 * (1.0 + sigma * (5.0 + 2.0 * sigma)))) * sigmabar)
                             - omega_1 * (-(12.0 * q2 * sigma) + m_B2 * sigmabar2 * (5.0 + 4.0 * sigma) - 6.0 * q2 * sigmabar
                             + 3.0 * m_B2 * (1.0 + sigma * (5.0 + 2.0 * sigma)) * sigmabar + 2.0 * m_v2 * (4.0 + 2.0 * sigma + 5.0 * sigmabar))))
                             / (m_B * omega_2 * power_of<5>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I3d1B_A30_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A30 proportional to phi_bar_3
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = 2.0 * (sigmabar * (m_B2 * (sigma * (2.0 * sigma + 5.0) + 1.0) + 4.0 * m_B * (2.0 * m_v * sigma + m_v)
                             + 3.0 * m_v2 - q2) + m_v2 * sigma + 2.0 * m_v2 - 3.0 * q2 * sigma)
                             / ((-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I3d1C_A30_3pt_phi_bar_3(const double & sigma, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to phi_bar_3
            const double omega_1  = m_B * sigma;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = -8.0 * m_B * (2.0 * m_v * sigma + m_v) / (omega_2 * power_of<3>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I4_A30_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to phi_bar_bar_3
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = -6.0 * m_v * u * (m_v * (2.0 * sigmabar - 1.0) * (2.0 * u - 1.0) - 4.0 * m_B * (sigmabar2 - 3.0 * sigmabar + 2.0))
                             / (power_of<4>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d1A_A30_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to phi_bar_bar_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = 6.0 * m_v * (16.0 * m_B2 * (m_v + omega_2) * sigma3
                             + m_B * (-(4.0 * omega_1 * omega_2) + m_v * (4.0 * omega_1 + omega_2)) * sigmabar
                             + 2.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * (-2.0 + sigmabar)
                             + 4.0 * m_B * sigma2 * (-(2.0 * m_B * m_v) + 4.0 * m_B * omega_2 - 4.0 * omega_1 * omega_2
                             - 2.0 * m_v * (4.0 * omega_1 + omega_2) + 3.0 * m_B * (m_v + omega_2) * sigmabar)
                             - 4.0 * sigma * (-(2.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2))
                             + m_B * m_v * (4.0 * omega_1 + omega_2) * (-1.0 + sigmabar) + m_B2 * (m_v - 2.0 * omega_2) * sigmabar
                             + 2.0 * m_B * omega_1 * omega_2 * (2.0 + sigmabar)))
                             / (power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d1B_A30_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to phi_bar_bar_3
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = -6.0 * m_B * m_v * (4.0 * m_B * sigma * (sigma + 1.0) + m_v * (2.0 * sigma - 1.0))
                             / (power_of<4>(sigmabar) * omega_2);

            return C_4 * phi_bar_bar_3;
        }

        double I4d1C_A30_3pt_phi_bar_bar_3(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to phi_bar_bar_3

            return 0.0;
        }
        double I4d2A_A30_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to phi_bar_bar_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = 24.0 * m_v * (20.0 * m_B2 * (m_v + omega_2) * sigma3 - m_B2 * (m_v - 2.0 * omega_2) * sigmabar2
                             + m_v * omega_1 * (2.0 * omega_1 + omega_2) * (-5.0 + 4.0 * sigmabar)
                             + 2.0 * m_B * sigma2 * (-(5.0 * m_B * (m_v - 2.0 * omega_2))
                             - 5.0 * (2.0 * omega_1 * omega_2 + m_v * (4.0 * omega_1 + omega_2)) + 12.0 * m_B * (m_v + omega_2) * sigmabar)
                             - m_B * sigmabar * (m_v * (4.0 * omega_1 + omega_2) * (-2.0 + sigmabar)
                             + 2.0 * omega_1 * omega_2 * (4.0 + sigmabar))
                             + sigma * (10.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2)
                             + 2.0 * m_B2 * sigmabar * (-(4.0 * m_v) + 8.0 * omega_2 + 3.0 * (m_v + omega_2) * sigmabar)
                             - m_B * (4.0 * omega_1 * omega_2 * (5.0 + 4.0 * sigmabar)
                             + m_v * (4.0 * omega_1 + omega_2) * (-5.0 + 8.0 * sigmabar))))
                             / (power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d2B_A30_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to phi_bar_bar_3
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_3     = this->phi_bar_3(omega_1, omega_2);
            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            return  -(6.0 * m_B * m_v * (2.0 * (4.0 * m_B * sigma * (4.0 * m_B * sigma * (1.0 + sigma) + m_v * (-1 + 2.0 * sigma))
                    + m_B * (-m_v + 4.0 * sigma * (m_B + m_v + 2.0 * m_B * sigma)) * sigmabar
                    - 2.0 * omega_1 * (8.0 * m_B * sigma2 + 2.0 * m_B * sigmabar + m_v * (-2.0 + sigmabar)
                    + 4.0 * sigma * (m_v + m_B * (2.0 + sigmabar)))) * phi_bar_bar_3
                    + m_B * (-omega_1 + m_B * sigma) * (4.0 * m_B * sigma * (1.0 + sigma) + m_v * (-1 + 2.0 * sigma)) * sigmabar * phi_bar_3))
                    / (power_of<2>(omega_2) * power_of<5>(sigmabar));
        }

        double I4d2C_A30_3pt_phi_bar_bar_3(const double & sigma, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to phi_bar_bar_3
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = 6.0 * m_B2 * m_v * (4.0 * m_B * (sigma + 1.0) * sigma - 2.0 * m_v * sigma + m_v) / (power_of<2>(omega_2) * power_of<4>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d2D_A30_3pt_phi_bar_bar_3(const double & sigma, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to phi_bar_bar_3
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_3     = this->phi_bar_3(omega_1, omega_2);
            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            return    -(6.0 * m_v * pow(sigmabar,-4.0) * (2.0 * (m_v + m_B * (2.0 + 4.0 * sigma)) * phi_bar_bar_3
                      + m_B * (4.0 * m_B * sigma * (1.0 + sigma) + m_v * (-1 + 2.0 * sigma)) * phi_bar_3));
        }

        double I2_A30_3pt_phi_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to phi_4
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_4 = this->phi_4(omega_1, omega_2);

            const double C_2 = -(2.0 * sigmabar - 1.0) * (u - 1.0) / (power_of<2>(sigmabar));

            return C_2 * phi_4;
        }

        double I2_A30_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to phi_bar_4
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_2 = 2.0 * (sigmabar - 3.0) * (u - 1.0) / (m_B * power_of<3>(sigmabar));

            return C_2 * phi_bar_4;
        }

        double I3_A30_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A30 proportional to phi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(),  m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma,  sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (m_B2 * sigmabar * (2.0 * sigmabar2 * u - 3.0 * sigmabar * (u + 1.0) + 4.0) + m_B * m_v * sigmabar * (5.0 - 4.0 * sigmabar)
                             - m_v2 * (2.0 * sigmabar + 3.0) * (u - 1.0) - q2 * (2.0 * sigmabar - 3.0) * (u - 1.0))
                             / (m_B * power_of<4>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I3d1A_A30_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A30 proportional to phi_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (6.0 * m_B3 * sigma3 * sigmabar + m_B * m_v * omega_2 * sigmabar * (3.0 + 4.0 * sigmabar)
                             + m_v2 * (-(m_B * sigmabar * (2.0 + 3.0 * sigmabar)) + 2.0 * omega_1 * (4.0 + 5.0 * sigmabar)
                             + 2.0 * omega_2 * (4.0 + 5.0 * sigmabar))
                             + m_B * sigma2 * (-(4.0 * m_v2) + 12.0 * q2
                             + 3.0 * m_B * sigmabar * (-m_B - 2.0 * omega_1 + 2.0 * m_B * sigmabar))
                             + sigmabar * (-(6.0 * (omega_1 + omega_2) * q2) - m_B3 * sigmabar + m_B * q2 * sigmabar
                             + m_B2 * (3.0 * omega_2 * (1.0 + sigmabar) + omega_1 * (3.0 + sigmabar)))
                             + sigma * (4.0 * (omega_1 + omega_2) * (m_v2 - 3.0 * q2) - m_B3 * sigmabar * (3.0 + 2.0 * sigmabar)
                             + m_B * (12.0 * m_v * omega_2 * sigmabar + 9.0 * q2 * sigmabar - m_v2 * (8.0 + 11.0 * sigmabar))
                             + m_B2 * sigmabar * (9.0 * omega_2 + omega_1 * (3.0 - 4.0 * sigmabar))))
                             / (m_B * omega_2 * power_of<5>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I3d1B_A30_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to phi_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = - 2.0 * m_B * (2.0 * sigma * (m_B * sigma + m_B + 2.0 * m_v) + m_v)
                             / ((-omega_1 + m_B * sigma) * power_of<3>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I3d1C_A30_3pt_phi_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A30 proportional to phi_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (3.0 * m_B2 * sigma * sigmabar + m_B2 * sigmabar + m_B * m_v * (4.0 * sigma + 1.0) * sigmabar
                             + m_v2 * (sigma + 3.0 * sigmabar + 2.0) - 3.0 * q2 * sigma - q2 * sigmabar)
                             / (omega_2 * power_of<4>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I3_A30_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to phi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * u * (2.0 * m_B * (sigmabar2 - 6.0 * sigmabar + 6.0) * (2.0 * u - 1.0) + m_v * (15.0 - 4.0 * sigmabar))
                             / (m_B * power_of<4>(sigmabar));

            return C_3 * phi_bar_bar_4;
        }

        double I3d1A_A30_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B),   m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma), sigma4   = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (16.0 * m_B3 * sigma4 + 11.0 * m_B * m_v * omega_2 * sigmabar
                             - 2.0 * m_B2 * (4.0 * omega_1 + omega_2) * sigmabar
                             + 8.0 * m_B * omega_1 * (2.0 * omega_1 + omega_2) * (1.0 + sigmabar)
                             - 4.0 * m_v * omega_1 * omega_2 * (11.0 + sigmabar)
                             + 8.0 * m_B2 * sigma3 * (-(4.0 * omega_1) - omega_2 + 2.0 * m_B * (4.0 + sigmabar))
                             + 4.0 * sigma * (-(4.0 * m_v * omega_1 * omega_2) + 2.0 * m_B3 * sigmabar
                             + m_B * omega_1 * (2.0 * omega_1 + omega_2) * (8.0 + sigmabar)
                             - 2.0 * m_B2 * (4.0 * omega_1 + omega_2) * (1 + 2.0 * sigmabar) + m_B * m_v * omega_2 * (11.0 + 2.0 * sigmabar))
                             + 2.0 * m_B * sigma2 * (8.0 * m_v * omega_2 + 4.0 * omega_1 * (2.0 * omega_1 + omega_2)
                             + 8.0 * m_B2 * (1.0 + 3.0 * sigmabar) - m_B * (4.0 * omega_1 + omega_2) * (16.0 + 3.0 * sigmabar)))
                             / (m_B * power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_3 * phi_bar_bar_4;
        }

        double I3d1B_A30_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to phi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * (2.0 * m_B * (sigma * (sigma + 4.0) + 1.0) + m_v * (4.0 * sigma + 11.0))
                             / ((-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * phi_bar_bar_4;
        }

        double I3d1C_A30_3pt_phi_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to phi_bar_bar_4

            return 0.0;
        }

        double I4_A30_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A30 proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * u * (2.0 * m_B3 * sigmabar2 * (sigmabar2 - 3.0 * sigmabar + 2.0) * (2.0 * u - 1.0)
                             + m_B2 * m_v * (5.0 - 4.0 * sigmabar) * sigmabar2
                             - m_B * (2.0 * u - 1.0) * (m_v2 * (sigmabar - 4.0) + 2.0 * q2 * (sigmabar2 - 3.0 * sigmabar + 2.0))
                             + 5.0 * m_v2 * m_v + m_v * q2 * (4.0 * sigmabar - 5.0))
                             / (m_B * power_of<5>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d1A_A30_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A30 proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(2.0 * (-(3.0 * m_B3 * (m_v * omega_2 + 2.0 * omega_1 * (2.0 * omega_1 + omega_2)) * sigmabar2)
                             + 48.0 * m_B5 * sigma5 * sigmabar + m_v * omega_1 * omega_2
                             * (-(q2 * sigmabar * (23 + 4.0 * sigmabar)) + 5.0 * m_v2 * (11.0 + 4.0 * sigmabar))
                             + m_B * (3.0 * m_v * omega_2 * sigmabar2 * q2
                             - 2.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * (5.0 + 19.0 * sigmabar)
                             + 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar * (1.0 + 2.0 * sigmabar)
                             - m_v3 * omega_2 * sigmabar * (11.0 + 4.0 * sigmabar))
                             + m_B2 * m_v * sigmabar * (3.0 * omega_1 * omega_2 * (4.0 + 3.0 * sigmabar)
                             + m_v * (4.0 * omega_1 + omega_2) * (2.0 + 7.0 * sigmabar))
                             + 4.0 * m_B3 * sigma4 * (25.0 * q2 + 3.0 * m_B * sigmabar
                             * (-(8.0 * omega_1) - 2.0 * omega_2 + 5.0 * m_B * sigmabar))
                             - 2.0 * m_B * sigma3 * (12.0 * m_B3 * (4.0 * omega_1 + omega_2) * sigmabar2 - 10.0 * m_v * omega_2 * q2
                             + 25.0 * m_B * (4.0 * omega_1 + omega_2) * q2 + 24 * m_B4 * sigmabar
                             + 2.0 * m_B2 * (25.0 * m_v2 - 12.0 * m_v * omega_2 * sigmabar
                             - 6.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar - q2 * (5.0 + 28.0 * sigmabar)))
                             + sigma * (12.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar2
                             + m_v * omega_1 * omega_2 * (20.0 * m_v2 - q2 * (55.0 + 24 * sigmabar))
                             + 2.0 * m_B2 * (m_v2 * (4.0 * omega_1 + omega_2) * (5.0 + 24 * sigmabar)
                             + 6.0 * m_v * omega_1 * omega_2 * sigmabar * (3.0 - 2.0 * sigmabar)
                             - 2.0 * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (1.0 + 2.0 * sigmabar))
                             + m_B * (-50.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) - m_v3 * omega_2 * (55.0 + 24.0 * sigmabar)
                             + 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (5.0 + 18.0 * sigmabar)
                             + 2.0 * m_v * omega_2 * q2 * sigmabar * (17.0 + 4.0 * sigmabar))
                             - 2.0 * m_B3 * sigmabar * (12.0 * omega_1 * (2.0 * omega_1 + omega_2)
                             + 3.0 * m_v * omega_2 * (2.0 + 3.0 * sigmabar) + 2.0 * m_v2 * (2.0 + 7.0 * sigmabar)))
                             + sigma2 * (-36.0 * m_B5 * sigmabar2 - 20.0 * m_v * omega_1 * omega_2 * q2
                             + 24.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar
                             + 2.0 * m_B2 * (25.0 * m_v2 * (4.0 * omega_1 + omega_2) - 24.0 * m_v * omega_1 * omega_2 * sigmabar
                             - (4.0 * omega_1 + omega_2) * q2 * (5.0 + 23.0 * sigmabar))
                             + m_B * (-(20.0 * m_v3 * omega_2) + 50.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2
                             + m_v * omega_2 * q2 * (55.0 + 28.0 * sigmabar))
                             + m_B3 * (36.0 * m_v * omega_2 * (-1.0 + sigmabar) * sigmabar - 4.0 * m_v2 * (5.0 + 29.0 * sigmabar)
                             + 6.0 * sigmabar * (3.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar + q2 * (2.0 + 4.0 * sigmabar))))))
                             / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d1B_A30_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A30 proportional to phi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * ((-m_v2 + q2 * sigma) * (m_v * (11.0 + 4.0 * sigma) + 2.0 * m_B * (1.0 + 5.0 * sigma))
                             + (-(m_v * (m_B + m_v) * (3.0 * m_B + 4.0 * m_v)) + 12.0 * m_B2 * m_v * sigma2 + 6.0 * m_B3 * sigma3
                             + 3.0 * m_v * q2 - 3.0 * m_B2 * (2.0 * m_B + 3.0 * m_v) * sigma + 4.0 * (m_B + m_v) * q2 * sigma) * sigmabar)
                             / (power_of<5>(sigmabar) * omega_2);

            return C_4 * phi_bar_bar_4;
        }

        double I4d1C_A30_3pt_phi_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to phi_bar_bar_4

            return 0.0;
        }
        double I4d2A_A30_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A30 proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 =-(4.0 * (6.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar3 + 120.0 * m_B5 * sigma5 * sigmabar
                             + m_B * (2.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar * (5.0 + 13.0 * sigmabar)
                             - 30.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * (1.0 + 4.0 * sigmabar)
                             + m_v * omega_2 * sigmabar2 * q2 * (23.0 + 4.0 * sigmabar) - 5.0 * m_v3 * omega_2 * sigmabar * (11.0 + 4.0 * sigmabar))
                             + 5.0 * m_v * omega_1 * omega_2 * (3.0 * m_v2 * (11.0 + 4.0 * sigmabar)
                             - q2 * sigmabar * (17.0 + 4.0 * sigmabar))
                             - m_B3 * sigmabar2 * (24.0 * omega_1 * (2.0 * omega_1 + omega_2) + 3.0 * m_v * omega_2 * (4.0 + 3.0 * sigmabar)
                             + 2.0 * m_v2 * (2.0 + 7.0 * sigmabar))
                             + 60.0 * m_B3 * sigma4 * (5.0 * q2 + m_B * sigmabar * (-(4.0 * omega_1) - omega_2 + 4.0 * m_B * sigmabar))
                             + 6.0 * m_B * sigma3 * (-(16.0 * m_B3 * (4.0 * omega_1 + omega_2) * sigmabar2) + 10.0 * m_v * omega_2 * q2
                             - 25.0 * m_B * (4.0 * omega_1 + omega_2) * q2 + 20.0 * m_B4 * (-1.0 + sigmabar2) * sigmabar
                             + 10.0 * m_B2 * (-(5.0 * m_v2) + q2 + 2.0 * m_v * omega_2 * sigmabar
                             + omega_1 * (2.0 * omega_1 + omega_2) * sigmabar + 8.0 * q2 * sigmabar))
                             + 2.0 * m_B2 * sigmabar * (m_v2 * (4.0 * omega_1 + omega_2) * (5.0 + 19.0 * sigmabar)
                             - (4.0 * omega_1 + omega_2) * q2 * sigmabar * (1.0 + 2.0 * sigmabar)
                             + 3.0 * m_v * omega_1 * omega_2 * (5.0 - 2.0 * sigmabar * (-3.0 + sigmabar)))
                             + sigma * (48.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar2 - 36 * m_B5 * sigmabar3
                             + m_B * (-150.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2)
                             + 4.0 * m_v * omega_2 * q2 * sigmabar * (35.0 + 11.0 * sigmabar)
                             + 10.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (3.0 + 14.0 * sigmabar)
                             - 5.0 * m_v3 * omega_2 * (33.0 + 16.0 * sigmabar))
                             + 5.0 * m_v * omega_1 * omega_2 * (12.0 * m_v2 - q2 * (33.0 + 16.0 * sigmabar))
                             + 2.0 * m_B2 * (-((4.0 * omega_1 + omega_2) * q2 * sigmabar * (10.0 + 31.0 * sigmabar))
                             + 3.0 * m_v * omega_1 * omega_2 * sigmabar * (15.0 - 16.0 * sigmabar)
                             + 5.0 * m_v2 * (4.0 * omega_1 + omega_2) * (3.0 + 17.0 * sigmabar))
                             - 2.0 * m_B3 * sigmabar * (-(3.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-10.0 + 3.0 * sigmabar2))
                             + m_v2 * (20.0 + 86.0 * sigmabar) - 6.0 * q2 * sigmabar * (1.0 + 2.0 * sigmabar)
                             + 3.0 * m_v * omega_2 * (5.0 - 6.0 * sigmabar * (-2.0 + sigmabar))))
                             + sigma2 * (-144.0 * m_B5 * sigmabar2 - 60.0 * m_v * omega_1 * omega_2 * q2
                             - 12.0 * m_B4 * (4.0 * omega_1 + omega_2) * (-5.0 + 3.0 * sigmabar2) * sigmabar
                             + 10.0 * m_B2 * (15.0 * m_v2 * (4.0 * omega_1 + omega_2) - 12.0 * m_v * omega_1 * omega_2 * sigmabar
                             - (4.0 * omega_1 + omega_2) * q2 * (3.0 + 19.0 * sigmabar))
                             + 5.0 * m_B * (-(12.0 * m_v3 * omega_2) + 30.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2
                             + m_v * omega_2 * q2 * (33.0 + 20.0 * sigmabar))
                             + 2.0 * m_B3 * (-(10.0 * m_v2 * (3.0 + 22.0 * sigmabar))
                             + 9.0 * m_v * omega_2 * sigmabar * (-5.0 + 8.0 * sigmabar)
                             + 6.0 * sigmabar * (6.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar + q2 * (5.0 + 18.0 * sigmabar))))))
                             / (m_B * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d2B_A30_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A30 proportional to phi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_4     = this->phi_bar_4(omega_1, omega_2);
            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            return    pow(omega_1 - m_B * sigma,-2.0) * pow(sigmabar,-6.0)
                    * (4.0 * (6.0 * m_B3 * omega_1 * sigmabar2 + 24 * m_B4 * sigma4 * sigmabar
                    + 2.0 * m_B * sigma3 * (12.0 * m_B3 * sigmabar2 + 25 * m_B * q2 + 10.0 * m_v * q2
                    + 12.0 * m_B2 * (2.0 * m_v - omega_1) * sigmabar)
                    + 2.0 * m_B * omega_1 * (m_v2 * (5.0 + 19.0 * sigmabar) - q2 * sigmabar * (1 + 2.0 * sigmabar))
                    + m_v * omega_1 * (-(q2 * sigmabar * (23 + 4.0 * sigmabar)) + 5.0 * m_v2 * (11.0 + 4.0 * sigmabar))
                    + m_B2 * m_v * sigmabar * (3.0 * omega_1 * (4.0 + 3.0 * sigmabar) - m_v * (2.0 + 7.0 * sigmabar))
                    - sigma2 * (20.0 * m_v * omega_1 * q2 + 24 * m_B4 * sigmabar
                    + 2.0 * m_B2 * (25 * m_v2 + 24 * m_v * omega_1 * sigmabar - q2 * (5.0 + 23 * sigmabar))
                    + m_B * (20.0 * m_v3 + 50 * omega_1 * q2 - m_v * q2 * (55 + 24 * sigmabar))
                    + 6.0 * m_B3 * sigmabar * (3.0 * omega_1 * sigmabar + m_v * (6.0 - 4.0 * sigmabar)))
                    - sigma * (12.0 * m_B4 * sigmabar2 + m_v * omega_1 * (-(20.0 * m_v2) + q2 * (55 + 24 * sigmabar))
                    + 2.0 * m_B2 * (m_v2 * (5.0 + 24 * sigmabar) - 2.0 * q2 * sigmabar * (1 + 2.0 * sigmabar)
                    + 6.0 * m_v * omega_1 * sigmabar * (-3.0 + 2.0 * sigmabar))
                    + 3.0 * m_B3 * sigmabar * (-(8.0 * omega_1) + m_v * (4.0 + 3.0 * sigmabar))
                    + m_B * (-50.0 * m_v2 * omega_1 + 2.0 * omega_1 * q2 * (5.0 + 18.0 * sigmabar)
                    - m_v * q2 * sigmabar * (23 + 4.0 * sigmabar) + 5.0 * m_v3 * (11.0 + 4.0 * sigmabar)))) * phi_bar_bar_4
                    + 2.0 * m_B * (-omega_1 + m_B * sigma) * sigmabar
                    * (6.0 * m_B3 * (-1.0 + sigma2) * sigma * sigmabar + 3.0 * m_B2 * m_v * (-1.0 + sigma) * (1 + 4.0 * sigma) * sigmabar
                    + 2.0 * m_B * q2 * sigma * (1 + 5.0 * sigma + 2.0 * sigmabar) - m_v3 * (11.0 + 4.0 * sigma + 4.0 * sigmabar)
                    - m_B * m_v2 * (2.0 + 10.0 * sigma + 7.0 * sigmabar)
                    + m_v * q2 * (3.0 * sigmabar + sigma * (11.0 + 4.0 * sigma + 4.0 * sigmabar))) * phi_bar_4);
        }

        double I4d2C_A30_3pt_phi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A30 proportional to phi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * m_B * (6.0 * m_B3 * (-1.0 + sigma2) * sigma * sigmabar
                             - 3.0 * m_B2 * m_v * (-1.0 + sigma) * (1 + 4.0 * sigma) * sigmabar
                             + 2.0 * m_B * q2 * sigma * (1 + 5.0 * sigma + 2.0 * sigmabar) + m_v3 * (11.0 + 4.0 * sigma + 4.0 * sigmabar)
                             - m_B * m_v2 * (2.0 + 10.0 * sigma + 7.0 * sigmabar)
                             - m_v * q2 * (3.0 * sigmabar + sigma * (11.0 + 4.0 * sigma + 4.0 * sigmabar)))
                             / (power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d2D_A30_3pt_phi_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to A30 proportional to phi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_4     = this->phi_bar_4(omega_1, omega_2);
            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            return    2.0 * pow(m_B,-1) * pow(sigmabar,-6.0) * ((6.0 * m_B3 * (-1 + 3.0 * sigma2) * sigmabar2
                    + 3.0 * m_B2 * m_v * sigmabar2 * (-3.0 + 8.0 * sigma)
                    + m_v * (11.0 + 4.0 * sigma + 4.0 * sigmabar) * (-m_v2 + q2 * (sigma + sigmabar))
                    + 2.0 * m_B * (-(m_v2 * (1 + 5.0 * sigma + 5.0 * sigmabar))
                    + q2 * (5.0 * sigma2 + 2.0 * sigmabar2 + sigma + sigmabar + 10.0 * sigma * sigmabar))) * phi_bar_bar_4
                    + m_B * sigmabar * ((-m_v2 + q2 * sigma) * (m_v * (11.0 + 4.0 * sigma) + 2.0 * m_B * (1 + 5.0 * sigma))
                    + (-(m_v * (m_B + m_v) * (3.0 * m_B + 4.0 * m_v)) + 12.0 * m_B2 * m_v * sigma2 + 6.0 * m_B3 * sigma3
                    + 3.0 * m_v * q2 - 3.0 * m_B2 * (2.0 * m_B + 3.0 * m_v) * sigma + 4.0 * (m_B + m_v) * q2 * sigma) * sigmabar) * phi_bar_4);
        }

        double I2_A30_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to psi_bar_4
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_2 = - 2.0 * (sigmabar - 3.0) * (2.0 * u - 1.0) / (m_B * power_of<3>(sigmabar));

            return C_2 * psi_bar_4;
        }

        double I3_A30_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A30 proportional to psi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * ((2.0 * sigmabar - 3.0) * (2.0 * u - 1.0) * (q2 - m_B2 * sigmabar2) + 2.0 * m_B * m_v * sigmabar
                             + m_v2 * (2.0 * sigmabar + 3.0) * (2.0 * u - 1.0))
                             / (m_B * power_of<4>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I3d1A_A30_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A30 proportional to psi_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (-(8.0 * m_B * sigma3 * q2) + 6.0 * m_B * m_v * omega_2 * sigmabar
                             + 4.0 * sigma2 * (2.0 * m_B * m_v2 + 2.0 * m_B3 * sigmabar2 + (2.0 * omega_1 + omega_2) * q2
                             - m_B * q2 * (4.0 + 3.0 * sigmabar)) - 2.0 * m_v2
                             * (-(m_B * sigmabar * (2.0 + 3.0 * sigmabar)) + 2.0 * omega_1 * (4.0 + 5.0 * sigmabar)
                             + omega_2 * (4.0 + 5.0 * sigmabar)) + sigmabar
                             * (2.0 * m_B2 * sigmabar * (m_B * sigmabar - 2.0 * omega_1 * (1.0 + sigmabar) - omega_2 * (1.0 + sigmabar))
                             + q2 * (-(2.0 * m_B * sigmabar) + 2.0 * omega_1 * (5.0 + sigmabar) + omega_2 * (5.0 + sigmabar)))
                             + sigma * (-(4.0 * m_B2 * (2.0 * omega_1 + omega_2) * sigmabar2) + 4.0 * m_B3 * sigmabar2 * (1.0 + 2.0 * sigmabar)
                             + 2.0 * m_B * (m_v2 * (8.0 + 11.0 * sigmabar) - q2 * sigmabar * (7.0 + 2.0 * sigmabar))
                             - (2.0 * omega_1 + omega_2) * (4.0 * m_v2 - q2 * (8.0 + 5.0 * sigmabar))))
                             / (m_B * omega_2 * power_of<5>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I3d1B_A30_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A30 proportional to psi_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * (m_B2 * (2.0 * sigma + 1.0) * sigmabar2 + 2.0 * m_B * m_v * sigmabar + m_v2 * (sigma + 3.0 * sigmabar + 2.0)
                             - q2 * (sigma + 1.0) * sigmabar - q2 * sigma * (sigma + 2.0))
                             / ((-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I3d1C_A30_3pt_psi_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A30 proportional to psi_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (sigmabar * (m_B2 * (-(2.0 * sigma + 1.0)) * sigmabar + q2 * sigma + q2) + 2.0 * m_B * m_v * sigmabar
                             + m_v2 * (-(sigma + 3.0 * sigmabar + 2.0)) + q2 * sigma * (sigma + 2.0))
                             / (omega_2 * power_of<4>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I4_A30_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to psi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * m_v * u * (m_v * (2.0 * sigmabar - 1.0) * (2.0 * u - 1.0) - 4.0 * m_B * (sigmabar2 - 3.0 * sigmabar + 2.0))
                             / (power_of<4>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1A_A30_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_v * (16.0 * m_B2 * (m_v + omega_2) * sigma3
                             + m_B * (-(4.0 * omega_1 * omega_2) + m_v * (4.0 * omega_1 + omega_2)) * sigmabar
                             + 2.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * (-2.0 + sigmabar)
                             + 4.0 * m_B * sigma2 * (-(2.0 * m_B * m_v) + 4.0 * m_B * omega_2 - 4.0 * omega_1 * omega_2
                             - 2.0 * m_v * (4.0 * omega_1 + omega_2) + 3.0 * m_B * (m_v + omega_2) * sigmabar)
                             - 4.0 * sigma * (-(2.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2))
                             + m_B * m_v * (4.0 * omega_1 + omega_2) * (-1.0 + sigmabar) + m_B2 * (m_v - 2.0 * omega_2) * sigmabar
                             + 2.0 * m_B * omega_1 * omega_2 * (2.0 + sigmabar)))
                             / (power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1B_A30_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * m_B * m_v * (4.0 * m_B * sigma * (sigma + 1.0) + m_v * (2.0 * sigma - 1.0))
                             / (power_of<4>(sigmabar) * omega_2);

            return C_4 * psi_bar_bar_4;
        }

        double I4d1C_A30_3pt_psiA_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to psi_bar_bar_4

            return 0.0;
        }
        double I4d2A_A30_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 24.0 * m_v * (20.0 * m_B2 * (m_v + omega_2) * sigma3 - m_B2 * (m_v - 2.0 * omega_2) * sigmabar2
                             + m_v * omega_1 * (2.0 * omega_1 + omega_2) * (-5.0 + 4.0 * sigmabar)
                             + 2.0 * m_B * sigma2 * (-(5.0 * m_B * (m_v - 2.0 * omega_2))
                             - 5.0 * (2.0 * omega_1 * omega_2 + m_v * (4.0 * omega_1 + omega_2)) + 12.0 * m_B * (m_v + omega_2) * sigmabar)
                             - m_B * sigmabar * (m_v * (4.0 * omega_1 + omega_2) * (-2.0 + sigmabar)
                             + 2.0 * omega_1 * omega_2 * (4.0 + sigmabar))
                             + sigma * (10.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2)
                             + 2.0 * m_B2 * sigmabar * (-(4.0 * m_v) + 8.0 * omega_2 + 3.0 * (m_v + omega_2) * sigmabar)
                             - m_B * (4.0 * omega_1 * omega_2 * (5.0 + 4.0 * sigmabar)
                             + m_v * (4.0 * omega_1 + omega_2) * (-5.0 + 8.0 * sigmabar))))
                             / (power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2B_A30_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_4     = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return  -(6.0 * m_B * m_v * (2.0 * (4.0 * m_B * sigma * (4.0 * m_B * sigma * (1.0 + sigma) + m_v * (-1 + 2.0 * sigma))
                    + m_B * (-m_v + 4.0 * sigma * (m_B + m_v + 2.0 * m_B * sigma)) * sigmabar
                    - 2.0 * omega_1 * (8.0 * m_B * sigma2 + 2.0 * m_B * sigmabar + m_v * (-2.0 + sigmabar)
                    + 4.0 * sigma * (m_v + m_B * (2.0 + sigmabar)))) * psi_bar_bar_4
                    + m_B * (-omega_1 + m_B * sigma) * (4.0 * m_B * sigma * (1.0 + sigma) + m_v * (-1 + 2.0 * sigma)) * sigmabar * psi_bar_4))
                    / (power_of<2>(omega_2) * power_of<5>(sigmabar));
        }

        double I4d2C_A30_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_B2 * m_v * (4.0 * m_B * (sigma + 1.0) * sigma - 2.0 * m_v * sigma + m_v) / (power_of<2>(omega_2) * power_of<4>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2D_A30_3pt_psiA_bar_bar_4(const double & sigma, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_4     = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return    -(6.0 * m_v * pow(sigmabar,-4.0) * (2.0 * (m_v + m_B * (2.0 + 4.0 * sigma)) * psi_bar_bar_4
                      + m_B * (4.0 * m_B * sigma * (1.0 + sigma) + m_v * (-1 + 2.0 * sigma)) * psi_bar_4));
        }

        double I3_A30_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to psi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * u * (2.0 * m_B * (sigmabar2 - 6.0 * sigmabar + 6.0) * (2.0 * u - 1.0) + m_v * (15.0 - 4.0 * sigmabar))
                             / (m_B * power_of<4>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1A_A30_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B),   m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma), sigma4   = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (16.0 * m_B3 * sigma4 + 11.0 * m_B * m_v * omega_2 * sigmabar
                             - 2.0 * m_B2 * (4.0 * omega_1 + omega_2) * sigmabar
                             + 8.0 * m_B * omega_1 * (2.0 * omega_1 + omega_2) * (1.0 + sigmabar)
                             - 4.0 * m_v * omega_1 * omega_2 * (11.0 + sigmabar)
                             + 8.0 * m_B2 * sigma3 * (-(4.0 * omega_1) - omega_2 + 2.0 * m_B * (4.0 + sigmabar))
                             + 4.0 * sigma * (-(4.0 * m_v * omega_1 * omega_2) + 2.0 * m_B3 * sigmabar
                             + m_B * omega_1 * (2.0 * omega_1 + omega_2) * (8.0 + sigmabar)
                             - 2.0 * m_B2 * (4.0 * omega_1 + omega_2) * (1 + 2.0 * sigmabar) + m_B * m_v * omega_2 * (11.0 + 2.0 * sigmabar))
                             + 2.0 * m_B * sigma2 * (8.0 * m_v * omega_2 + 4.0 * omega_1 * (2.0 * omega_1 + omega_2)
                             + 8.0 * m_B2 * (1.0 + 3.0 * sigmabar) - m_B * (4.0 * omega_1 + omega_2) * (16.0 + 3.0 * sigmabar)))
                             / (m_B * power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1B_A30_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * (2.0 * m_B * (sigma * (sigma + 4.0) + 1.0) + m_v * (4.0 * sigma + 11.0))
                             / ((-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1C_A30_3pt_psiB_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to psi_bar_bar_4

            return 0.0;
        }

        double I4_A30_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A30 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * u * (2.0 * m_B3 * sigmabar2 * (sigmabar2 - 3.0 * sigmabar + 2.0) * (2.0 * u - 1.0)
                             + m_B2 * m_v * (5.0 - 4.0 * sigmabar) * sigmabar2
                             - m_B * (2.0 * u - 1.0) * (m_v2 * (sigmabar - 4.0) + 2.0 * q2 * (sigmabar2 - 3.0 * sigmabar + 2.0))
                             + 5.0 * m_v2 * m_v + m_v * q2 * (4.0 * sigmabar - 5.0))
                             / (m_B * power_of<5>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1A_A30_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A30 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(2.0 * (-(3.0 * m_B3 * (m_v * omega_2 + 2.0 * omega_1 * (2.0 * omega_1 + omega_2)) * sigmabar2)
                             + 48.0 * m_B5 * sigma5 * sigmabar + m_v * omega_1 * omega_2
                             * (-(q2 * sigmabar * (23 + 4.0 * sigmabar)) + 5.0 * m_v2 * (11.0 + 4.0 * sigmabar))
                             + m_B * (3.0 * m_v * omega_2 * sigmabar2 * q2
                             - 2.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * (5.0 + 19.0 * sigmabar)
                             + 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar * (1.0 + 2.0 * sigmabar)
                             - m_v3 * omega_2 * sigmabar * (11.0 + 4.0 * sigmabar))
                             + m_B2 * m_v * sigmabar * (3.0 * omega_1 * omega_2 * (4.0 + 3.0 * sigmabar)
                             + m_v * (4.0 * omega_1 + omega_2) * (2.0 + 7.0 * sigmabar))
                             + 4.0 * m_B3 * sigma4 * (25.0 * q2 + 3.0 * m_B * sigmabar
                             * (-(8.0 * omega_1) - 2.0 * omega_2 + 5.0 * m_B * sigmabar))
                             - 2.0 * m_B * sigma3 * (12.0 * m_B3 * (4.0 * omega_1 + omega_2) * sigmabar2 - 10.0 * m_v * omega_2 * q2
                             + 25.0 * m_B * (4.0 * omega_1 + omega_2) * q2 + 24 * m_B4 * sigmabar
                             + 2.0 * m_B2 * (25.0 * m_v2 - 12.0 * m_v * omega_2 * sigmabar
                             - 6.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar - q2 * (5.0 + 28.0 * sigmabar)))
                             + sigma * (12.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar2
                             + m_v * omega_1 * omega_2 * (20.0 * m_v2 - q2 * (55.0 + 24 * sigmabar))
                             + 2.0 * m_B2 * (m_v2 * (4.0 * omega_1 + omega_2) * (5.0 + 24 * sigmabar)
                             + 6.0 * m_v * omega_1 * omega_2 * sigmabar * (3.0 - 2.0 * sigmabar)
                             - 2.0 * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (1.0 + 2.0 * sigmabar))
                             + m_B * (-50.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) - m_v3 * omega_2 * (55.0 + 24.0 * sigmabar)
                             + 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (5.0 + 18.0 * sigmabar)
                             + 2.0 * m_v * omega_2 * q2 * sigmabar * (17.0 + 4.0 * sigmabar))
                             - 2.0 * m_B3 * sigmabar * (12.0 * omega_1 * (2.0 * omega_1 + omega_2)
                             + 3.0 * m_v * omega_2 * (2.0 + 3.0 * sigmabar) + 2.0 * m_v2 * (2.0 + 7.0 * sigmabar)))
                             + sigma2 * (-36.0 * m_B5 * sigmabar2 - 20.0 * m_v * omega_1 * omega_2 * q2
                             + 24.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar
                             + 2.0 * m_B2 * (25.0 * m_v2 * (4.0 * omega_1 + omega_2) - 24.0 * m_v * omega_1 * omega_2 * sigmabar
                             - (4.0 * omega_1 + omega_2) * q2 * (5.0 + 23.0 * sigmabar))
                             + m_B * (-(20.0 * m_v3 * omega_2) + 50.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2
                             + m_v * omega_2 * q2 * (55.0 + 28.0 * sigmabar))
                             + m_B3 * (36.0 * m_v * omega_2 * (-1.0 + sigmabar) * sigmabar - 4.0 * m_v2 * (5.0 + 29.0 * sigmabar)
                             + 6.0 * sigmabar * (3.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar + q2 * (2.0 + 4.0 * sigmabar))))))
                             / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1B_A30_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A30 proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * ((-m_v2 + q2 * sigma) * (m_v * (11.0 + 4.0 * sigma) + 2.0 * m_B * (1.0 + 5.0 * sigma))
                             + (-(m_v * (m_B + m_v) * (3.0 * m_B + 4.0 * m_v)) + 12.0 * m_B2 * m_v * sigma2 + 6.0 * m_B3 * sigma3
                             + 3.0 * m_v * q2 - 3.0 * m_B2 * (2.0 * m_B + 3.0 * m_v) * sigma + 4.0 * (m_B + m_v) * q2 * sigma) * sigmabar)
                             / (power_of<5>(sigmabar) * omega_2);

            return C_4 * psi_bar_bar_4;
        }

        double I4d1C_A30_3pt_psiB_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to psi_bar_bar_4

            return 0.0;
        }
        double I4d2A_A30_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A30 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 =-(4.0 * (6.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar3 + 120.0 * m_B5 * sigma5 * sigmabar
                             + m_B * (2.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar * (5.0 + 13.0 * sigmabar)
                             - 30.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * (1.0 + 4.0 * sigmabar)
                             + m_v * omega_2 * sigmabar2 * q2 * (23.0 + 4.0 * sigmabar) - 5.0 * m_v3 * omega_2 * sigmabar * (11.0 + 4.0 * sigmabar))
                             + 5.0 * m_v * omega_1 * omega_2 * (3.0 * m_v2 * (11.0 + 4.0 * sigmabar)
                             - q2 * sigmabar * (17.0 + 4.0 * sigmabar))
                             - m_B3 * sigmabar2 * (24.0 * omega_1 * (2.0 * omega_1 + omega_2) + 3.0 * m_v * omega_2 * (4.0 + 3.0 * sigmabar)
                             + 2.0 * m_v2 * (2.0 + 7.0 * sigmabar))
                             + 60.0 * m_B3 * sigma4 * (5.0 * q2 + m_B * sigmabar * (-(4.0 * omega_1) - omega_2 + 4.0 * m_B * sigmabar))
                             + 6.0 * m_B * sigma3 * (-(16.0 * m_B3 * (4.0 * omega_1 + omega_2) * sigmabar2) + 10.0 * m_v * omega_2 * q2
                             - 25.0 * m_B * (4.0 * omega_1 + omega_2) * q2 + 20.0 * m_B4 * (-1.0 + sigmabar2) * sigmabar
                             + 10.0 * m_B2 * (-(5.0 * m_v2) + q2 + 2.0 * m_v * omega_2 * sigmabar
                             + omega_1 * (2.0 * omega_1 + omega_2) * sigmabar + 8.0 * q2 * sigmabar))
                             + 2.0 * m_B2 * sigmabar * (m_v2 * (4.0 * omega_1 + omega_2) * (5.0 + 19.0 * sigmabar)
                             - (4.0 * omega_1 + omega_2) * q2 * sigmabar * (1.0 + 2.0 * sigmabar)
                             + 3.0 * m_v * omega_1 * omega_2 * (5.0 - 2.0 * sigmabar * (-3.0 + sigmabar)))
                             + sigma * (48.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar2 - 36 * m_B5 * sigmabar3
                             + m_B * (-150.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2)
                             + 4.0 * m_v * omega_2 * q2 * sigmabar * (35.0 + 11.0 * sigmabar)
                             + 10.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (3.0 + 14.0 * sigmabar)
                             - 5.0 * m_v3 * omega_2 * (33.0 + 16.0 * sigmabar))
                             + 5.0 * m_v * omega_1 * omega_2 * (12.0 * m_v2 - q2 * (33.0 + 16.0 * sigmabar))
                             + 2.0 * m_B2 * (-((4.0 * omega_1 + omega_2) * q2 * sigmabar * (10.0 + 31.0 * sigmabar))
                             + 3.0 * m_v * omega_1 * omega_2 * sigmabar * (15.0 - 16.0 * sigmabar)
                             + 5.0 * m_v2 * (4.0 * omega_1 + omega_2) * (3.0 + 17.0 * sigmabar))
                             - 2.0 * m_B3 * sigmabar * (-(3.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-10.0 + 3.0 * sigmabar2))
                             + m_v2 * (20.0 + 86.0 * sigmabar) - 6.0 * q2 * sigmabar * (1.0 + 2.0 * sigmabar)
                             + 3.0 * m_v * omega_2 * (5.0 - 6.0 * sigmabar * (-2.0 + sigmabar))))
                             + sigma2 * (-144.0 * m_B5 * sigmabar2 - 60.0 * m_v * omega_1 * omega_2 * q2
                             - 12.0 * m_B4 * (4.0 * omega_1 + omega_2) * (-5.0 + 3.0 * sigmabar2) * sigmabar
                             + 10.0 * m_B2 * (15.0 * m_v2 * (4.0 * omega_1 + omega_2) - 12.0 * m_v * omega_1 * omega_2 * sigmabar
                             - (4.0 * omega_1 + omega_2) * q2 * (3.0 + 19.0 * sigmabar))
                             + 5.0 * m_B * (-(12.0 * m_v3 * omega_2) + 30.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2
                             + m_v * omega_2 * q2 * (33.0 + 20.0 * sigmabar))
                             + 2.0 * m_B3 * (-(10.0 * m_v2 * (3.0 + 22.0 * sigmabar))
                             + 9.0 * m_v * omega_2 * sigmabar * (-5.0 + 8.0 * sigmabar)
                             + 6.0 * sigmabar * (6.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar + q2 * (5.0 + 18.0 * sigmabar))))))
                             / (m_B * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2B_A30_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A30 proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_4     = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return    pow(omega_1 - m_B * sigma,-2.0) * pow(sigmabar,-6.0)
                    * (4.0 * (6.0 * m_B3 * omega_1 * sigmabar2 + 24 * m_B4 * sigma4 * sigmabar
                    + 2.0 * m_B * sigma3 * (12.0 * m_B3 * sigmabar2 + 25 * m_B * q2 + 10.0 * m_v * q2
                    + 12.0 * m_B2 * (2.0 * m_v - omega_1) * sigmabar)
                    + 2.0 * m_B * omega_1 * (m_v2 * (5.0 + 19.0 * sigmabar) - q2 * sigmabar * (1 + 2.0 * sigmabar))
                    + m_v * omega_1 * (-(q2 * sigmabar * (23 + 4.0 * sigmabar)) + 5.0 * m_v2 * (11.0 + 4.0 * sigmabar))
                    + m_B2 * m_v * sigmabar * (3.0 * omega_1 * (4.0 + 3.0 * sigmabar) - m_v * (2.0 + 7.0 * sigmabar))
                    - sigma2 * (20.0 * m_v * omega_1 * q2 + 24 * m_B4 * sigmabar
                    + 2.0 * m_B2 * (25 * m_v2 + 24 * m_v * omega_1 * sigmabar - q2 * (5.0 + 23 * sigmabar))
                    + m_B * (20.0 * m_v3 + 50 * omega_1 * q2 - m_v * q2 * (55 + 24 * sigmabar))
                    + 6.0 * m_B3 * sigmabar * (3.0 * omega_1 * sigmabar + m_v * (6.0 - 4.0 * sigmabar)))
                    - sigma * (12.0 * m_B4 * sigmabar2 + m_v * omega_1 * (-(20.0 * m_v2) + q2 * (55 + 24 * sigmabar))
                    + 2.0 * m_B2 * (m_v2 * (5.0 + 24 * sigmabar) - 2.0 * q2 * sigmabar * (1 + 2.0 * sigmabar)
                    + 6.0 * m_v * omega_1 * sigmabar * (-3.0 + 2.0 * sigmabar))
                    + 3.0 * m_B3 * sigmabar * (-(8.0 * omega_1) + m_v * (4.0 + 3.0 * sigmabar))
                    + m_B * (-50.0 * m_v2 * omega_1 + 2.0 * omega_1 * q2 * (5.0 + 18.0 * sigmabar)
                    - m_v * q2 * sigmabar * (23 + 4.0 * sigmabar) + 5.0 * m_v3 * (11.0 + 4.0 * sigmabar)))) * psi_bar_bar_4
                    + 2.0 * m_B * (-omega_1 + m_B * sigma) * sigmabar
                    * (6.0 * m_B3 * (-1.0 + sigma2) * sigma * sigmabar + 3.0 * m_B2 * m_v * (-1.0 + sigma) * (1 + 4.0 * sigma) * sigmabar
                    + 2.0 * m_B * q2 * sigma * (1 + 5.0 * sigma + 2.0 * sigmabar) - m_v3 * (11.0 + 4.0 * sigma + 4.0 * sigmabar)
                    - m_B * m_v2 * (2.0 + 10.0 * sigma + 7.0 * sigmabar)
                    + m_v * q2 * (3.0 * sigmabar + sigma * (11.0 + 4.0 * sigma + 4.0 * sigmabar))) * psi_bar_4);
        }

        double I4d2C_A30_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A30 proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * m_B * (6.0 * m_B3 * (-1.0 + sigma2) * sigma * sigmabar
                             - 3.0 * m_B2 * m_v * (-1.0 + sigma) * (1 + 4.0 * sigma) * sigmabar
                             + 2.0 * m_B * q2 * sigma * (1 + 5.0 * sigma + 2.0 * sigmabar) + m_v3 * (11.0 + 4.0 * sigma + 4.0 * sigmabar)
                             - m_B * m_v2 * (2.0 + 10.0 * sigma + 7.0 * sigmabar)
                             - m_v * q2 * (3.0 * sigmabar + sigma * (11.0 + 4.0 * sigma + 4.0 * sigmabar)))
                             / (power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2D_A30_3pt_psiB_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to A30 proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_4     = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return    2.0 * pow(m_B,-1) * pow(sigmabar,-6.0) * ((6.0 * m_B3 * (-1 + 3.0 * sigma2) * sigmabar2
                    + 3.0 * m_B2 * m_v * sigmabar2 * (-3.0 + 8.0 * sigma)
                    + m_v * (11.0 + 4.0 * sigma + 4.0 * sigmabar) * (-m_v2 + q2 * (sigma + sigmabar))
                    + 2.0 * m_B * (-(m_v2 * (1 + 5.0 * sigma + 5.0 * sigmabar))
                    + q2 * (5.0 * sigma2 + 2.0 * sigmabar2 + sigma + sigmabar + 10.0 * sigma * sigmabar))) * psi_bar_bar_4
                    + m_B * sigmabar * ((-m_v2 + q2 * sigma) * (m_v * (11.0 + 4.0 * sigma) + 2.0 * m_B * (1 + 5.0 * sigma))
                    + (-(m_v * (m_B + m_v) * (3.0 * m_B + 4.0 * m_v)) + 12.0 * m_B2 * m_v * sigma2 + 6.0 * m_B3 * sigma3
                    + 3.0 * m_v * q2 - 3.0 * m_B2 * (2.0 * m_B + 3.0 * m_v) * sigma + 4.0 * (m_B + m_v) * q2 * sigma) * sigmabar) * psi_bar_4);
        }

        double I3_A30_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - 0.0                                                       - I3_A30_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1A_A30_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - 0.0                                                       - I3d1A_A30_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1B_A30_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return - 0.0                                                       - I3d1B_A30_3pt_psiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I3d1C_A30_3pt_psi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return - 0.0                                                       - I3d1C_A30_3pt_psiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4_A30_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I4_A30_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2)    - I4_A30_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1A_A30_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I4d1A_A30_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d1A_A30_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1B_A30_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return - I4d1B_A30_3pt_psiA_bar_bar_4( sigma, omega_1, q2)          - I4d1B_A30_3pt_psiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d1C_A30_3pt_psi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return - I4d1C_A30_3pt_psiA_bar_bar_4( sigma, omega_2, q2)          - I4d1C_A30_3pt_psiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2A_A30_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I4d2A_A30_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d2A_A30_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d2B_A30_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return - I4d2B_A30_3pt_psiA_bar_bar_4( sigma, omega_1, q2)          - I4d2B_A30_3pt_psiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d2C_A30_3pt_psi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return - I4d2C_A30_3pt_psiA_bar_bar_4( sigma, omega_2, q2)          - I4d2C_A30_3pt_psiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2D_A30_3pt_psi_bar_bar_4(const double & sigma, const double & q2) const
        {
            return - I4d2D_A30_3pt_psiA_bar_bar_4( sigma, q2)                   - I4d2D_A30_3pt_psiB_bar_bar_4(sigma, q2);
        }

        double I2_A30_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to chi_bar_4
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_2 = 2.0 * (sigmabar - 3.0) / (m_B * power_of<3>(sigmabar));

            return C_2 * chi_bar_4;
        }

        double I3_A30_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A30 proportional to chi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * (m_B2 * sigmabar * ((3.0 - 2.0 * sigmabar) * sigmabar + 4.0 * (sigmabar2 - 3.0 * sigmabar + 2.0) * u)
                             + 4.0 * m_B * m_v * (3.0 - 2.0 * sigmabar) * sigmabar
                             + m_v2 * (2.0 * sigmabar + 3.0) + q2 * (2.0 * sigmabar - 3.0))
                             / (m_B * power_of<4>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I3d1A_A30_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A30 proportional to chi_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = -(2.0 * (12.0 * m_B3 * sigma3 * sigmabar + 4.0 * m_B * m_v * omega_2 * sigmabar
                             * (3.0 + 6.0 * sigma + 2.0 * sigmabar) + 2.0 * m_v2 * omega_2 * (4.0 + 2.0 * sigma + 5.0 * sigmabar)
                             + 6.0 * m_B2 * sigma2 * sigmabar * (-(2.0 * omega_1) - omega_2 + 2.0 * m_B * (1.0 + sigmabar))
                             - sigma * (12.0 * omega_2 * q2 + m_B2 * sigmabar
                             * (12.0 * omega_1 - 3.0 * omega_2 - 8.0 * m_B * sigmabar + 8.0 * omega_1 * sigmabar
                             + 4.0 * omega_2 * sigmabar)) + sigmabar
                             * (-(6.0 * omega_2 * q2) + m_B2 * (-(4.0 * omega_1 * sigmabar) + omega_2 * (3.0 + sigmabar)))))
                             / (m_B * omega_2 * power_of<5>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I3d1B_A30_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A30 proportional to chi_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (sigmabar * (m_B2 * (sigma * (2.0 * sigma + 5.0) + 1.0) + 4.0 * m_B * m_v * (1.0 + 2.0 * sigma)
                             + 3.0 * m_v2 - q2) + m_v2 * sigma + 2.0 * m_v2 - 3.0 * q2 * sigma)
                             / ((-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I3d1C_A30_3pt_chi_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A30 proportional to chi_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * (sigmabar * (m_B2 * (-2.0 * sigma2 + sigma + 1.0) + 4.0 * m_B * m_v * (1.0 + 2.0 * sigma)
                             + 3.0 * m_v2 - q2) + m_v2 * sigma + 2.0 * m_v2 - 3.0 * q2 * sigma)
                             / (omega_2 * power_of<4>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I4_A30_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to chi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * m_v * u * (m_v * (2.0 * sigmabar - 1.0) * (2.0 * u - 1.0) - 4.0 * m_B * (sigmabar2 - 3.0 * sigmabar + 2.0))
                             / (power_of<4>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1A_A30_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_v * (16.0 * m_B2 * (m_v + omega_2) * sigma3
                             + m_B * (-(4.0 * omega_1 * omega_2) + m_v * (4.0 * omega_1 + omega_2)) * sigmabar
                             + 2.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * (-2.0 + sigmabar)
                             + 4.0 * m_B * sigma2 * (-(2.0 * m_B * m_v) + 4.0 * m_B * omega_2 - 4.0 * omega_1 * omega_2
                             - 2.0 * m_v * (4.0 * omega_1 + omega_2) + 3.0 * m_B * (m_v + omega_2) * sigmabar)
                             - 4.0 * sigma * (-(2.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2))
                             + m_B * m_v * (4.0 * omega_1 + omega_2) * (-1.0 + sigmabar) + m_B2 * (m_v - 2.0 * omega_2) * sigmabar
                             + 2.0 * m_B * omega_1 * omega_2 * (2.0 + sigmabar)))
                             / (power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1B_A30_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * m_B * m_v * (4.0 * m_B * sigma * (sigma + 1.0) + m_v * (2.0 * sigma - 1.0))
                             / (power_of<4>(sigmabar) * omega_2);

            return C_4 * chi_bar_bar_4;
        }

        double I4d1C_A30_3pt_chiA_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to chi_bar_bar_4

            return 0.0;
        }
        double I4d2A_A30_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 24.0 * m_v * (20.0 * m_B2 * (m_v + omega_2) * sigma3 - m_B2 * (m_v - 2.0 * omega_2) * sigmabar2
                             + m_v * omega_1 * (2.0 * omega_1 + omega_2) * (-5.0 + 4.0 * sigmabar)
                             + 2.0 * m_B * sigma2 * (-(5.0 * m_B * (m_v - 2.0 * omega_2))
                             - 5.0 * (2.0 * omega_1 * omega_2 + m_v * (4.0 * omega_1 + omega_2)) + 12.0 * m_B * (m_v + omega_2) * sigmabar)
                             - m_B * sigmabar * (m_v * (4.0 * omega_1 + omega_2) * (-2.0 + sigmabar)
                             + 2.0 * omega_1 * omega_2 * (4.0 + sigmabar))
                             + sigma * (10.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2)
                             + 2.0 * m_B2 * sigmabar * (-(4.0 * m_v) + 8.0 * omega_2 + 3.0 * (m_v + omega_2) * sigmabar)
                             - m_B * (4.0 * omega_1 * omega_2 * (5.0 + 4.0 * sigmabar)
                             + m_v * (4.0 * omega_1 + omega_2) * (-5.0 + 8.0 * sigmabar))))
                             / (power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2B_A30_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_4     = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return  -(6.0 * m_B * m_v * (2.0 * (4.0 * m_B * sigma * (4.0 * m_B * sigma * (1.0 + sigma) + m_v * (-1 + 2.0 * sigma))
                    + m_B * (-m_v + 4.0 * sigma * (m_B + m_v + 2.0 * m_B * sigma)) * sigmabar
                    - 2.0 * omega_1 * (8.0 * m_B * sigma2 + 2.0 * m_B * sigmabar + m_v * (-2.0 + sigmabar)
                    + 4.0 * sigma * (m_v + m_B * (2.0 + sigmabar)))) * chi_bar_bar_4
                    + m_B * (-omega_1 + m_B * sigma) * (4.0 * m_B * sigma * (1.0 + sigma) + m_v * (-1 + 2.0 * sigma)) * sigmabar * chi_bar_4))
                    / (power_of<2>(omega_2) * power_of<5>(sigmabar));
        }

        double I4d2C_A30_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_B2 * m_v * (4.0 * m_B * (sigma + 1.0) * sigma - 2.0 * m_v * sigma + m_v) / (power_of<2>(omega_2) * power_of<4>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2D_A30_3pt_chiA_bar_bar_4(const double & sigma, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_4     = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return    -(6.0 * m_v * pow(sigmabar,-4.0) * (2.0 * (m_v + m_B * (2.0 + 4.0 * sigma)) * chi_bar_bar_4
                      + m_B * (4.0 * m_B * sigma * (1.0 + sigma) + m_v * (-1 + 2.0 * sigma)) * chi_bar_4));
        }

        double I3_A30_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to chi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * u * (2.0 * m_B * (sigmabar2 - 6.0 * sigmabar + 6.0) * (2.0 * u - 1.0) + m_v * (15.0 - 4.0 * sigmabar))
                             / (m_B * power_of<4>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1A_A30_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B),   m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v();
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma), sigma4   = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (16.0 * m_B3 * sigma4 + 11.0 * m_B * m_v * omega_2 * sigmabar
                             - 2.0 * m_B2 * (4.0 * omega_1 + omega_2) * sigmabar
                             + 8.0 * m_B * omega_1 * (2.0 * omega_1 + omega_2) * (1.0 + sigmabar)
                             - 4.0 * m_v * omega_1 * omega_2 * (11.0 + sigmabar)
                             + 8.0 * m_B2 * sigma3 * (-(4.0 * omega_1) - omega_2 + 2.0 * m_B * (4.0 + sigmabar))
                             + 4.0 * sigma * (-(4.0 * m_v * omega_1 * omega_2) + 2.0 * m_B3 * sigmabar
                             + m_B * omega_1 * (2.0 * omega_1 + omega_2) * (8.0 + sigmabar)
                             - 2.0 * m_B2 * (4.0 * omega_1 + omega_2) * (1 + 2.0 * sigmabar) + m_B * m_v * omega_2 * (11.0 + 2.0 * sigmabar))
                             + 2.0 * m_B * sigma2 * (8.0 * m_v * omega_2 + 4.0 * omega_1 * (2.0 * omega_1 + omega_2)
                             + 8.0 * m_B2 * (1.0 + 3.0 * sigmabar) - m_B * (4.0 * omega_1 + omega_2) * (16.0 + 3.0 * sigmabar)))
                             / (m_B * power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1B_A30_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * (2.0 * m_B * (sigma * (sigma + 4.0) + 1.0) + m_v * (4.0 * sigma + 11.0))
                             / ((-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1C_A30_3pt_chiB_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to chi_bar_bar_4

            return 0.0;
        }

        double I4_A30_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A30 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * u * (2.0 * m_B3 * sigmabar2 * (sigmabar2 - 3.0 * sigmabar + 2.0) * (2.0 * u - 1.0)
                             + m_B2 * m_v * (5.0 - 4.0 * sigmabar) * sigmabar2
                             - m_B * (2.0 * u - 1.0) * (m_v2 * (sigmabar - 4.0) + 2.0 * q2 * (sigmabar2 - 3.0 * sigmabar + 2.0))
                             + 5.0 * m_v2 * m_v + m_v * q2 * (4.0 * sigmabar - 5.0))
                             / (m_B * power_of<5>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1A_A30_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A30 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(2.0 * (-(3.0 * m_B3 * (m_v * omega_2 + 2.0 * omega_1 * (2.0 * omega_1 + omega_2)) * sigmabar2)
                             + 48.0 * m_B5 * sigma5 * sigmabar + m_v * omega_1 * omega_2
                             * (-(q2 * sigmabar * (23 + 4.0 * sigmabar)) + 5.0 * m_v2 * (11.0 + 4.0 * sigmabar))
                             + m_B * (3.0 * m_v * omega_2 * sigmabar2 * q2
                             - 2.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * (5.0 + 19.0 * sigmabar)
                             + 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar * (1.0 + 2.0 * sigmabar)
                             - m_v3 * omega_2 * sigmabar * (11.0 + 4.0 * sigmabar))
                             + m_B2 * m_v * sigmabar * (3.0 * omega_1 * omega_2 * (4.0 + 3.0 * sigmabar)
                             + m_v * (4.0 * omega_1 + omega_2) * (2.0 + 7.0 * sigmabar))
                             + 4.0 * m_B3 * sigma4 * (25.0 * q2 + 3.0 * m_B * sigmabar
                             * (-(8.0 * omega_1) - 2.0 * omega_2 + 5.0 * m_B * sigmabar))
                             - 2.0 * m_B * sigma3 * (12.0 * m_B3 * (4.0 * omega_1 + omega_2) * sigmabar2 - 10.0 * m_v * omega_2 * q2
                             + 25.0 * m_B * (4.0 * omega_1 + omega_2) * q2 + 24 * m_B4 * sigmabar
                             + 2.0 * m_B2 * (25.0 * m_v2 - 12.0 * m_v * omega_2 * sigmabar
                             - 6.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar - q2 * (5.0 + 28.0 * sigmabar)))
                             + sigma * (12.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar2
                             + m_v * omega_1 * omega_2 * (20.0 * m_v2 - q2 * (55.0 + 24 * sigmabar))
                             + 2.0 * m_B2 * (m_v2 * (4.0 * omega_1 + omega_2) * (5.0 + 24 * sigmabar)
                             + 6.0 * m_v * omega_1 * omega_2 * sigmabar * (3.0 - 2.0 * sigmabar)
                             - 2.0 * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (1.0 + 2.0 * sigmabar))
                             + m_B * (-50.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) - m_v3 * omega_2 * (55.0 + 24.0 * sigmabar)
                             + 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (5.0 + 18.0 * sigmabar)
                             + 2.0 * m_v * omega_2 * q2 * sigmabar * (17.0 + 4.0 * sigmabar))
                             - 2.0 * m_B3 * sigmabar * (12.0 * omega_1 * (2.0 * omega_1 + omega_2)
                             + 3.0 * m_v * omega_2 * (2.0 + 3.0 * sigmabar) + 2.0 * m_v2 * (2.0 + 7.0 * sigmabar)))
                             + sigma2 * (-36.0 * m_B5 * sigmabar2 - 20.0 * m_v * omega_1 * omega_2 * q2
                             + 24.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar
                             + 2.0 * m_B2 * (25.0 * m_v2 * (4.0 * omega_1 + omega_2) - 24.0 * m_v * omega_1 * omega_2 * sigmabar
                             - (4.0 * omega_1 + omega_2) * q2 * (5.0 + 23.0 * sigmabar))
                             + m_B * (-(20.0 * m_v3 * omega_2) + 50.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2
                             + m_v * omega_2 * q2 * (55.0 + 28.0 * sigmabar))
                             + m_B3 * (36.0 * m_v * omega_2 * (-1.0 + sigmabar) * sigmabar - 4.0 * m_v2 * (5.0 + 29.0 * sigmabar)
                             + 6.0 * sigmabar * (3.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar + q2 * (2.0 + 4.0 * sigmabar))))))
                             / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1B_A30_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A30 proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * ((-m_v2 + q2 * sigma) * (m_v * (11.0 + 4.0 * sigma) + 2.0 * m_B * (1.0 + 5.0 * sigma))
                             + (-(m_v * (m_B + m_v) * (3.0 * m_B + 4.0 * m_v)) + 12.0 * m_B2 * m_v * sigma2 + 6.0 * m_B3 * sigma3
                             + 3.0 * m_v * q2 - 3.0 * m_B2 * (2.0 * m_B + 3.0 * m_v) * sigma + 4.0 * (m_B + m_v) * q2 * sigma) * sigmabar)
                             / (power_of<5>(sigmabar) * omega_2);

            return C_4 * chi_bar_bar_4;
        }

        double I4d1C_A30_3pt_chiB_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to A30 proportional to chi_bar_bar_4

            return 0.0;
        }
        double I4d2A_A30_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A30 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 =-(4.0 * (6.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar3 + 120.0 * m_B5 * sigma5 * sigmabar
                             + m_B * (2.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar * (5.0 + 13.0 * sigmabar)
                             - 30.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * (1.0 + 4.0 * sigmabar)
                             + m_v * omega_2 * sigmabar2 * q2 * (23.0 + 4.0 * sigmabar) - 5.0 * m_v3 * omega_2 * sigmabar * (11.0 + 4.0 * sigmabar))
                             + 5.0 * m_v * omega_1 * omega_2 * (3.0 * m_v2 * (11.0 + 4.0 * sigmabar)
                             - q2 * sigmabar * (17.0 + 4.0 * sigmabar))
                             - m_B3 * sigmabar2 * (24.0 * omega_1 * (2.0 * omega_1 + omega_2) + 3.0 * m_v * omega_2 * (4.0 + 3.0 * sigmabar)
                             + 2.0 * m_v2 * (2.0 + 7.0 * sigmabar))
                             + 60.0 * m_B3 * sigma4 * (5.0 * q2 + m_B * sigmabar * (-(4.0 * omega_1) - omega_2 + 4.0 * m_B * sigmabar))
                             + 6.0 * m_B * sigma3 * (-(16.0 * m_B3 * (4.0 * omega_1 + omega_2) * sigmabar2) + 10.0 * m_v * omega_2 * q2
                             - 25.0 * m_B * (4.0 * omega_1 + omega_2) * q2 + 20.0 * m_B4 * (-1.0 + sigmabar2) * sigmabar
                             + 10.0 * m_B2 * (-(5.0 * m_v2) + q2 + 2.0 * m_v * omega_2 * sigmabar
                             + omega_1 * (2.0 * omega_1 + omega_2) * sigmabar + 8.0 * q2 * sigmabar))
                             + 2.0 * m_B2 * sigmabar * (m_v2 * (4.0 * omega_1 + omega_2) * (5.0 + 19.0 * sigmabar)
                             - (4.0 * omega_1 + omega_2) * q2 * sigmabar * (1.0 + 2.0 * sigmabar)
                             + 3.0 * m_v * omega_1 * omega_2 * (5.0 - 2.0 * sigmabar * (-3.0 + sigmabar)))
                             + sigma * (48.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar2 - 36 * m_B5 * sigmabar3
                             + m_B * (-150.0 * m_v2 * omega_1 * (2.0 * omega_1 + omega_2)
                             + 4.0 * m_v * omega_2 * q2 * sigmabar * (35.0 + 11.0 * sigmabar)
                             + 10.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (3.0 + 14.0 * sigmabar)
                             - 5.0 * m_v3 * omega_2 * (33.0 + 16.0 * sigmabar))
                             + 5.0 * m_v * omega_1 * omega_2 * (12.0 * m_v2 - q2 * (33.0 + 16.0 * sigmabar))
                             + 2.0 * m_B2 * (-((4.0 * omega_1 + omega_2) * q2 * sigmabar * (10.0 + 31.0 * sigmabar))
                             + 3.0 * m_v * omega_1 * omega_2 * sigmabar * (15.0 - 16.0 * sigmabar)
                             + 5.0 * m_v2 * (4.0 * omega_1 + omega_2) * (3.0 + 17.0 * sigmabar))
                             - 2.0 * m_B3 * sigmabar * (-(3.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-10.0 + 3.0 * sigmabar2))
                             + m_v2 * (20.0 + 86.0 * sigmabar) - 6.0 * q2 * sigmabar * (1.0 + 2.0 * sigmabar)
                             + 3.0 * m_v * omega_2 * (5.0 - 6.0 * sigmabar * (-2.0 + sigmabar))))
                             + sigma2 * (-144.0 * m_B5 * sigmabar2 - 60.0 * m_v * omega_1 * omega_2 * q2
                             - 12.0 * m_B4 * (4.0 * omega_1 + omega_2) * (-5.0 + 3.0 * sigmabar2) * sigmabar
                             + 10.0 * m_B2 * (15.0 * m_v2 * (4.0 * omega_1 + omega_2) - 12.0 * m_v * omega_1 * omega_2 * sigmabar
                             - (4.0 * omega_1 + omega_2) * q2 * (3.0 + 19.0 * sigmabar))
                             + 5.0 * m_B * (-(12.0 * m_v3 * omega_2) + 30.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2
                             + m_v * omega_2 * q2 * (33.0 + 20.0 * sigmabar))
                             + 2.0 * m_B3 * (-(10.0 * m_v2 * (3.0 + 22.0 * sigmabar))
                             + 9.0 * m_v * omega_2 * sigmabar * (-5.0 + 8.0 * sigmabar)
                             + 6.0 * sigmabar * (6.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar + q2 * (5.0 + 18.0 * sigmabar))))))
                             / (m_B * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2B_A30_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to A30 proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_4     = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return    pow(omega_1 - m_B * sigma,-2.0) * pow(sigmabar,-6.0)
                    * (4.0 * (6.0 * m_B3 * omega_1 * sigmabar2 + 24 * m_B4 * sigma4 * sigmabar
                    + 2.0 * m_B * sigma3 * (12.0 * m_B3 * sigmabar2 + 25 * m_B * q2 + 10.0 * m_v * q2
                    + 12.0 * m_B2 * (2.0 * m_v - omega_1) * sigmabar)
                    + 2.0 * m_B * omega_1 * (m_v2 * (5.0 + 19.0 * sigmabar) - q2 * sigmabar * (1 + 2.0 * sigmabar))
                    + m_v * omega_1 * (-(q2 * sigmabar * (23 + 4.0 * sigmabar)) + 5.0 * m_v2 * (11.0 + 4.0 * sigmabar))
                    + m_B2 * m_v * sigmabar * (3.0 * omega_1 * (4.0 + 3.0 * sigmabar) - m_v * (2.0 + 7.0 * sigmabar))
                    - sigma2 * (20.0 * m_v * omega_1 * q2 + 24 * m_B4 * sigmabar
                    + 2.0 * m_B2 * (25 * m_v2 + 24 * m_v * omega_1 * sigmabar - q2 * (5.0 + 23 * sigmabar))
                    + m_B * (20.0 * m_v3 + 50 * omega_1 * q2 - m_v * q2 * (55 + 24 * sigmabar))
                    + 6.0 * m_B3 * sigmabar * (3.0 * omega_1 * sigmabar + m_v * (6.0 - 4.0 * sigmabar)))
                    - sigma * (12.0 * m_B4 * sigmabar2 + m_v * omega_1 * (-(20.0 * m_v2) + q2 * (55 + 24 * sigmabar))
                    + 2.0 * m_B2 * (m_v2 * (5.0 + 24 * sigmabar) - 2.0 * q2 * sigmabar * (1 + 2.0 * sigmabar)
                    + 6.0 * m_v * omega_1 * sigmabar * (-3.0 + 2.0 * sigmabar))
                    + 3.0 * m_B3 * sigmabar * (-(8.0 * omega_1) + m_v * (4.0 + 3.0 * sigmabar))
                    + m_B * (-50.0 * m_v2 * omega_1 + 2.0 * omega_1 * q2 * (5.0 + 18.0 * sigmabar)
                    - m_v * q2 * sigmabar * (23 + 4.0 * sigmabar) + 5.0 * m_v3 * (11.0 + 4.0 * sigmabar)))) * chi_bar_bar_4
                    + 2.0 * m_B * (-omega_1 + m_B * sigma) * sigmabar
                    * (6.0 * m_B3 * (-1.0 + sigma2) * sigma * sigmabar + 3.0 * m_B2 * m_v * (-1.0 + sigma) * (1 + 4.0 * sigma) * sigmabar
                    + 2.0 * m_B * q2 * sigma * (1 + 5.0 * sigma + 2.0 * sigmabar) - m_v3 * (11.0 + 4.0 * sigma + 4.0 * sigmabar)
                    - m_B * m_v2 * (2.0 + 10.0 * sigma + 7.0 * sigmabar)
                    + m_v * q2 * (3.0 * sigmabar + sigma * (11.0 + 4.0 * sigma + 4.0 * sigmabar))) * chi_bar_4);
        }

        double I4d2C_A30_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to A30 proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * m_B * (6.0 * m_B3 * (-1.0 + sigma2) * sigma * sigmabar
                             - 3.0 * m_B2 * m_v * (-1.0 + sigma) * (1 + 4.0 * sigma) * sigmabar
                             + 2.0 * m_B * q2 * sigma * (1 + 5.0 * sigma + 2.0 * sigmabar) + m_v3 * (11.0 + 4.0 * sigma + 4.0 * sigmabar)
                             - m_B * m_v2 * (2.0 + 10.0 * sigma + 7.0 * sigmabar)
                             - m_v * q2 * (3.0 * sigmabar + sigma * (11.0 + 4.0 * sigma + 4.0 * sigmabar)))
                             / (power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2D_A30_3pt_chiB_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to A30 proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_4     = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return    2.0 * pow(m_B,-1) * pow(sigmabar,-6.0) * ((6.0 * m_B3 * (-1 + 3.0 * sigma2) * sigmabar2
                    + 3.0 * m_B2 * m_v * sigmabar2 * (-3.0 + 8.0 * sigma)
                    + m_v * (11.0 + 4.0 * sigma + 4.0 * sigmabar) * (-m_v2 + q2 * (sigma + sigmabar))
                    + 2.0 * m_B * (-(m_v2 * (1 + 5.0 * sigma + 5.0 * sigmabar))
                    + q2 * (5.0 * sigma2 + 2.0 * sigmabar2 + sigma + sigmabar + 10.0 * sigma * sigmabar))) * chi_bar_bar_4
                    + m_B * sigmabar * ((-m_v2 + q2 * sigma) * (m_v * (11.0 + 4.0 * sigma) + 2.0 * m_B * (1 + 5.0 * sigma))
                    + (-(m_v * (m_B + m_v) * (3.0 * m_B + 4.0 * m_v)) + 12.0 * m_B2 * m_v * sigma2 + 6.0 * m_B3 * sigma3
                    + 3.0 * m_v * q2 - 3.0 * m_B2 * (2.0 * m_B + 3.0 * m_v) * sigma + 4.0 * (m_B + m_v) * q2 * sigma) * sigmabar) * chi_bar_4);
        }

        double I3_A30_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + 0.0                                                       - I3_A30_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1A_A30_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + 0.0                                                       - I3d1A_A30_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1B_A30_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return + 0.0                                                       - I3d1B_A30_3pt_chiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I3d1C_A30_3pt_chi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return + 0.0                                                       - I3d1C_A30_3pt_chiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4_A30_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I4_A30_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2)    - I4_A30_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1A_A30_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I4d1A_A30_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d1A_A30_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1B_A30_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return + I4d1B_A30_3pt_chiA_bar_bar_4( sigma, omega_1, q2)          - I4d1B_A30_3pt_chiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d1C_A30_3pt_chi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return + I4d1C_A30_3pt_chiA_bar_bar_4( sigma, omega_2, q2)          - I4d1C_A30_3pt_chiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2A_A30_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I4d2A_A30_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d2A_A30_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d2B_A30_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return + I4d2B_A30_3pt_chiA_bar_bar_4( sigma, omega_1, q2)          - I4d2B_A30_3pt_chiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d2C_A30_3pt_chi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return + I4d2C_A30_3pt_chiA_bar_bar_4( sigma, omega_2, q2)          - I4d2C_A30_3pt_chiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2D_A30_3pt_chi_bar_bar_4(const double & sigma, const double & q2) const
        {
            return + I4d2D_A30_3pt_chiA_bar_bar_4( sigma, q2)                   - I4d2D_A30_3pt_chiB_bar_bar_4(sigma, q2);
        }
        // }}}

        /* A30 : integrands and surface terms */
        // {{{
        double integrand_A30_2pt_disp(const double & sigma, const double & q2) const
        {
            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);
            const double etad3    = 24.0 * (eta - 1.0) * power_of<2>(eta) * (2.0 * eta - 1.0) / power_of<3>(sigmabar);

            const double I1   = I1_A30_2pt_phi_p(sigma, q2);
            const double I2   = I2_A30_2pt_phi_bar(sigma, q2)   + I2_A30_2pt_g_p(sigma, q2);
            const double I2d1 = I2d1_A30_2pt_phi_bar(sigma, q2) + I2d1_A30_2pt_g_p(sigma, q2);
            const double I3   = I3_A30_2pt_g_p(sigma, q2)       + I3_A30_2pt_g_bar(sigma, q2);
            const double I3d1 = I3d1_A30_2pt_g_p(sigma, q2)     + I3d1_A30_2pt_g_bar(sigma, q2);
            const double I3d2 = I3d2_A30_2pt_g_p(sigma, q2)     + I3d2_A30_2pt_g_bar(sigma, q2);
            const double I4   = I4_A30_2pt_g_bar(sigma, q2);
            const double I4d1 = I4d1_A30_2pt_g_bar(sigma, q2);
            const double I4d2 = I4d2_A30_2pt_g_bar(sigma, q2);
            const double I4d3 = I4d3_A30_2pt_g_bar(sigma, q2);

            double result = 0.0;
            result += -1.0 * I1;
            result += (etad1 * I2 + eta * I2d1) / m_B2;
            result += -1.0 * (I3 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I3d1 * eta * etad1 + I3d2 * power_of<2>(eta)) / (2.0 * m_B4);
            result += I4 * (power_of<2>(eta) * etad3 + 4.0 * eta * etad1 * etad2 + power_of<3>(etad1)) / (6.0 * m_B6);
            result += I4d1 * eta * (4.0 * eta * etad2 + 7.0 * power_of<2>(etad1)) / (6.0 * m_B6);
            result += I4d2 * 6.0 * power_of<2>(eta) * etad1 / (6.0 * m_B6);
            result += I4d3 * power_of<3>(eta) / (6.0 * m_B6);
            result *= exp;

            return result;
        }

        double integrand_A30_2pt_borel(const double & sigma, const double & q2) const
        {
            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double I1   = I1_A30_2pt_phi_p(sigma, q2);
            const double I2   = I2_A30_2pt_phi_bar(sigma, q2)   + I2_A30_2pt_g_p(sigma, q2);
            const double I3   = I3_A30_2pt_g_p(sigma, q2)       + I3_A30_2pt_g_bar(sigma, q2);
            const double I4   = I4_A30_2pt_g_bar(sigma, q2);

            double result = 0.0;
            result += - I1;
            result +=   I2 / M2;
            result += - I3 / (2.0 * M4);
            result +=   I4 / (6.0 * M6);
            result *= exp;

            return result;
        }

        double surface_A30_2pt(const double & sigma, const double & q2) const
        {
            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_A30_2pt_phi_bar(sigma, q2)   + I2_A30_2pt_g_p(sigma, q2);
            const double I3   = I3_A30_2pt_g_p(sigma, q2)       + I3_A30_2pt_g_bar(sigma, q2);
            const double I3d1 = I3d1_A30_2pt_g_p(sigma, q2)     + I3d1_A30_2pt_g_bar(sigma, q2);
            const double I4   = I4_A30_2pt_g_bar(sigma, q2);
            const double I4d1 = I4d1_A30_2pt_g_bar(sigma, q2);
            const double I4d2 = I4d2_A30_2pt_g_bar(sigma, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / (power_of<2>( M2())));
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;

            return result;
        }

        /*
         * rewrite integration ranges such that:
         * 1.)
         *    0 <= x_1 <= 1,     and    0 <= x_2 <= 1,
         * 2.)
         *    x_1 and x_2 integration boundaries do not depend on the other variables
         *
         * We obtain the integrand
         *
         *    sigma m_B f(sigma m_B x_1, sigma m_B (xbar_1 xbar_2 + x_2) / xbar_2) / (xbar_1 xbar_2^2 + x_2 xbar_2),
         *
         * where
         *
         *    xbar_1 = 1.0 - x_1,    and    xbar_2 = 1.0 - x_2.
         */
        double integrand_A30_3pt(const std::array<double, 3> & args, const double & q2) const
        {
            const double sigma  = args[0];
            const double x_1    = args[1];
            const double x_2    = args[2];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            constexpr double I1 = 0.0;
            const     double I2 = I2_A30_3pt_phi_3(sigma, omega_1, omega_2, q2)         + I2_A30_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                                + I2_A30_3pt_phi_4(sigma, omega_1, omega_2, q2)         + I2_A30_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                                + I2_A30_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I2_A30_3pt_chi_bar_4(sigma, omega_1, omega_2, q2);
            const     double I3 = I3_A30_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                                + I3_A30_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3_A30_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                                + I3_A30_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3_A30_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                                + I3_A30_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3_A30_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const     double I4 = I4_A30_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4_A30_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                                + I4_A30_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4_A30_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result = 0.0;
            result += - I1;
            result +=   I2 / M2;
            result += - I3 / (2.0 * M4);
            result +=   I4 / (6.0 * M6);
            result *=   prefactor * exp;

            return result;
        }

        double surface_A30_3pt_A(const std::array<double, 2> & args, const double & sigma, const double & q2) const
        {
            const double x_1    = args[0];
            const double x_2    = args[1];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_A30_3pt_phi_3(sigma, omega_1, omega_2, q2)            + I2_A30_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                              + I2_A30_3pt_phi_4(sigma, omega_1, omega_2, q2)            + I2_A30_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_A30_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I2_A30_3pt_chi_bar_4(sigma, omega_1, omega_2, q2);
            const double I3   = I3_A30_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                              + I3_A30_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)        + I3_A30_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_A30_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I3_A30_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_A30_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I3_A30_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3d1 = I3d1A_A30_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                              + I3d1A_A30_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_A30_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_A30_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_A30_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_A30_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3d1A_A30_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4   = I4_A30_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)    + I4_A30_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4_A30_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I4_A30_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d1 = I4d1A_A30_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d1A_A30_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d1A_A30_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d1A_A30_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d2 = I4d2A_A30_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d2A_A30_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d2A_A30_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d2A_A30_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        double surface_A30_3pt_B(const double & x_1, const double & sigma, const double & q2) const
        {
            // this ONLY includes the Jacobian from the transformation (omega_1 -> x_1).
            const double prefactor = sigma * m_B();

            const double omega_1 = sigma * m_B() * x_1;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1B_A30_3pt_phi_bar_3(sigma, omega_1, q2)
                                  + I3d1B_A30_3pt_phi_bar_4(sigma, omega_1, q2)     + I3d1B_A30_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I3d1B_A30_3pt_psi_bar_4(sigma, omega_1, q2)     + I3d1B_A30_3pt_chi_bar_4(sigma, omega_1, q2)
                                  + I3d1B_A30_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I3d1B_A30_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1B_A30_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d1B_A30_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d1B_A30_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d1B_A30_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            const     double I4d2 = I4d2B_A30_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d2B_A30_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d2B_A30_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d2B_A30_3pt_chi_bar_bar_4(sigma, omega_1, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        double surface_A30_3pt_C(const double & x_2, const double & sigma, const double & q2) const
        {
            const double xbar_2 = 1.0 - x_2;

            // this ONLY includes the Jacobian from the transformation (omega_2 -> x_2).
            const double prefactor = sigma * m_B() / (xbar_2 * xbar_2);

            const double omega_2 = sigma * m_B() * (x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1C_A30_3pt_phi_bar_3(sigma, omega_2, q2)
                                  + I3d1C_A30_3pt_phi_bar_4(sigma, omega_2, q2)     + I3d1C_A30_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I3d1C_A30_3pt_psi_bar_4(sigma, omega_2, q2)     + I3d1C_A30_3pt_chi_bar_4(sigma, omega_2, q2)
                                  + I3d1C_A30_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I3d1C_A30_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1C_A30_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d1C_A30_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d1C_A30_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d1C_A30_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            const     double I4d2 = I4d2C_A30_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d2C_A30_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d2C_A30_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d2C_A30_3pt_chi_bar_bar_4(sigma, omega_2, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        double surface_A30_3pt_D(const double & sigma, const double & q2) const
        {
            // this does NOT includes the original factor of 1 / omega_2
            const double prefactor = 1.0;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);


            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            constexpr double I3d1 = 0.0;
            constexpr double I4   = 0.0;
            constexpr double I4d1 = 0.0;
            const     double I4d2 = I4d2D_A30_3pt_phi_bar_bar_3(sigma, q2) + I4d2D_A30_3pt_phi_bar_bar_4(sigma, q2)
                                  + I4d2D_A30_3pt_psi_bar_bar_4(sigma, q2) + I4d2D_A30_3pt_chi_bar_bar_4(sigma, q2);


            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        /*
         * Integrands for the first moments. Only the borel method is implemented
         */

        double integrand_A30_2pt_borel_m1(const double & sigma, const double & q2) const
        {
            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double I1   = I1_A30_2pt_phi_p(sigma, q2);
            const double I2   = I2_A30_2pt_phi_bar(sigma, q2)   + I2_A30_2pt_g_p(sigma, q2);
            const double I3   = I3_A30_2pt_g_p(sigma, q2)       + I3_A30_2pt_g_bar(sigma, q2);
            const double I4   = I4_A30_2pt_g_bar(sigma, q2);

            double result1 = 0.0;
            result1 += - I1;
            result1 +=   I2 / M2;
            result1 += - I3 / (2.0 * M4);
            result1 +=   I4 / (6.0 * M6);
            result1 *=   exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - I2;
            result2 +=   I3 / M2;
            result2 += - I4 / (2.0 * M4);
            result2 *=   exp;

            return result1 + result2;
        }

        double surface_A30_2pt_m1(const double & sigma, const double & q2) const
        {
            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double m_V2 = power_of<2>(m_V());
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_A30_2pt_phi_bar(sigma, q2)   + I2_A30_2pt_g_p(sigma, q2);
            const double I3   = I3_A30_2pt_g_p(sigma, q2)       + I3_A30_2pt_g_bar(sigma, q2);
            const double I3d1 = I3d1_A30_2pt_g_p(sigma, q2)     + I3d1_A30_2pt_g_bar(sigma, q2);
            const double I4   = I4_A30_2pt_g_bar(sigma, q2);
            const double I4d1 = I4d1_A30_2pt_g_bar(sigma, q2);
            const double I4d2 = I4d2_A30_2pt_g_bar(sigma, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return result1 + result2;
        }

        double integrand_A30_3pt_m1(const std::array<double, 3> & args, const double & q2) const
        {
            const double sigma  = args[0];
            const double x_1    = args[1];
            const double x_2    = args[2];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double I1 = 0.0;
            const double I2 = I2_A30_3pt_phi_3(sigma, omega_1, omega_2, q2)         + I2_A30_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                            + I2_A30_3pt_phi_4(sigma, omega_1, omega_2, q2)         + I2_A30_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_A30_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I2_A30_3pt_chi_bar_4(sigma, omega_1, omega_2, q2);
            const double I3 = I3_A30_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                            + I3_A30_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3_A30_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I3_A30_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3_A30_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                            + I3_A30_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3_A30_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4 = I4_A30_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4_A30_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I4_A30_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4_A30_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result1 = 0.0;
            result1 += - I1;
            result1 +=   I2 / M2;
            result1 += - I3 / (2.0 * M4);
            result1 +=   I4 / (6.0 * M6);
            result1 *=   exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - I2;
            result2 +=   I3 / M2;
            result2 += - I4 / (2.0 * M4);
            result2 *=   exp;

            return (result1 + result2) * prefactor;
        }

        double surface_A30_3pt_A_m1(const std::array<double, 2> & args, const double & sigma, const double & q2) const
        {
            const double x_1    = args[0];
            const double x_2    = args[1];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_A30_3pt_phi_3(sigma, omega_1, omega_2, q2)            + I2_A30_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                              + I2_A30_3pt_phi_4(sigma, omega_1, omega_2, q2)            + I2_A30_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_A30_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I2_A30_3pt_chi_bar_4(sigma, omega_1, omega_2, q2);
            const double I3   = I3_A30_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                              + I3_A30_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)        + I3_A30_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_A30_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I3_A30_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_A30_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I3_A30_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3d1 = I3d1A_A30_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                              + I3d1A_A30_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_A30_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_A30_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_A30_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_A30_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3d1A_A30_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4   = I4_A30_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)    + I4_A30_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4_A30_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I4_A30_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d1 = I4d1A_A30_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d1A_A30_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d1A_A30_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d1A_A30_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d2 = I4d2A_A30_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d2A_A30_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d2A_A30_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d2A_A30_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }

        double surface_A30_3pt_B_m1(const double & x_1, const double & sigma, const double & q2) const
        {
            // this ONLY includes the Jacobian from the transformation (omega_1 -> x_1).
            const double prefactor = sigma * m_B();

            const double omega_1 = sigma * m_B() * x_1;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1B_A30_3pt_phi_bar_3(sigma, omega_1, q2)
                                  + I3d1B_A30_3pt_phi_bar_4(sigma, omega_1, q2)     + I3d1B_A30_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I3d1B_A30_3pt_psi_bar_4(sigma, omega_1, q2)     + I3d1B_A30_3pt_chi_bar_4(sigma, omega_1, q2)
                                  + I3d1B_A30_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I3d1B_A30_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1B_A30_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d1B_A30_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d1B_A30_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d1B_A30_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            const     double I4d2 = I4d2B_A30_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d2B_A30_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d2B_A30_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d2B_A30_3pt_chi_bar_bar_4(sigma, omega_1, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }

        double surface_A30_3pt_C_m1(const double & x_2, const double & sigma, const double & q2) const
        {
            const double xbar_2 = 1.0 - x_2;

            // this ONLY includes the Jacobian from the transformation (omega_2 -> x_2).
            const double prefactor = sigma * m_B() / (xbar_2 * xbar_2);

            const double omega_2 = sigma * m_B() * (x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1C_A30_3pt_phi_bar_3(sigma, omega_2, q2)
                                  + I3d1C_A30_3pt_phi_bar_4(sigma, omega_2, q2)     + I3d1C_A30_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I3d1C_A30_3pt_psi_bar_4(sigma, omega_2, q2)     + I3d1C_A30_3pt_chi_bar_4(sigma, omega_2, q2)
                                  + I3d1C_A30_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I3d1C_A30_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1C_A30_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d1C_A30_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d1C_A30_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d1C_A30_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            const     double I4d2 = I4d2C_A30_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d2C_A30_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d2C_A30_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d2C_A30_3pt_chi_bar_bar_4(sigma, omega_2, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }

        double surface_A30_3pt_D_m1(const double & sigma, const double & q2) const
        {
            // this does NOT includes the original factor of 1 / omega_2
            const double prefactor = 1.0;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);


            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            constexpr double I3d1 = 0.0;
            constexpr double I4   = 0.0;
            constexpr double I4d1 = 0.0;
            const     double I4d2 = I4d2D_A30_3pt_phi_bar_bar_3(sigma, q2) + I4d2D_A30_3pt_phi_bar_bar_4(sigma, q2)
                                  + I4d2D_A30_3pt_psi_bar_bar_4(sigma, q2) + I4d2D_A30_3pt_chi_bar_bar_4(sigma, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }
        // }}}

        /* A30 : form factor and moments */
        // {{{
        double a_30(const double & q2) const
        {
            const double sigma_0 = this->sigma_0(q2, s0_0_A30(), s0_1_A30());

            const std::function<double (const double &)> integrand_2pt = std::bind(integrand_a30_2pt, this, std::placeholders::_1, q2);

            const double integral_2pt = integrate<GSL::QAGS>(integrand_2pt, 0.0, sigma_0);
            const double surface_2pt  = 0.0 - surface_A30_2pt(switch_borel ? sigma_0 : 0.0, q2);

            double integral_3pt = 0.0;
            double surface_3pt  = 0.0;

            if (switch_3pt != 0.0)
            {
                const std::function<double (const double &)> surface_3pt_B = std::bind(&Implementation::surface_A30_3pt_B, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const double &)> surface_3pt_C = std::bind(&Implementation::surface_A30_3pt_C, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const std::array<double, 3> &)> integrand_3pt = std::bind(&Implementation::integrand_A30_3pt, this, std::placeholders::_1, q2);
                const std::function<double (const std::array<double, 2> &)> surface_3pt_A = std::bind(&Implementation::surface_A30_3pt_A, this, std::placeholders::_1, sigma_0, q2);

                integral_3pt = integrate(integrand_3pt, { 0.0, 0.0, 0.0 }, { sigma_0, 1.0, 1.0 }, cubature::Config());
                surface_3pt  = 0.0
                             - integrate(surface_3pt_A, { 0.0, 0.0 }, { 1.0, 1.0 }, cubature::Config()) // integrate over x_1 and x_2
                             - integrate<GSL::QAGS>(surface_3pt_B, 0.0, 1.0)                            // integrate over x_1
                             - integrate<GSL::QAGS>(surface_3pt_C, 0.0, 1.0)                            // integrate over x_2
                             - surface_A30_3pt_D(sigma_0, q2);
            }

            return f_B() * q2 * m_B / (4.0 * f_V() * power_of<2>(m_V)) * (integral_2pt + surface_2pt + integral_3pt + surface_3pt) / ( Process_::chi2);
        }

        double normalized_moment_1_a_30(const double & q2) const
        {
            const double sigma_0 = this->sigma_0(q2, s0_0_A30(), s0_1_A30());

            const std::function<double (const double &)> integrand_2pt_m1 = std::bind(&Implementation::integrand_A30_2pt_borel_m1, this, std::placeholders::_1, q2);


            const std::function<double (const double &)> integrand_2pt    = std::bind(&Implementation::integrand_A30_2pt_borel, this, std::placeholders::_1, q2);

            const double integral_2pt_m1 = integrate<GSL::QAGS>(integrand_2pt_m1, 0.0, sigma_0);
            const double surface_2pt_m1  = 0.0 - surface_A30_2pt_m1(sigma_0, q2);

            double integral_3pt_m1 = 0.0;
            double surface_3pt_m1  = 0.0;

            if (switch_3pt != 0.0)
            {
                const std::function<double (const double &)> surface_3pt_B_m1 = std::bind(&Implementation::surface_A30_3pt_B_m1, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const double &)> surface_3pt_C_m1 = std::bind(&Implementation::surface_A30_3pt_C_m1, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const std::array<double, 3> &)> integrand_3pt_m1 = std::bind(&Implementation::integrand_A30_3pt_m1, this, std::placeholders::_1, q2);
                const std::function<double (const std::array<double, 2> &)> surface_3pt_A_m1 = std::bind(&Implementation::surface_A30_3pt_A_m1, this, std::placeholders::_1, sigma_0, q2);

                integral_3pt_m1 = integrate(integrand_3pt_m1, { 0.0, 0.0, 0.0 }, { sigma_0, 1.0, 1.0 }, cubature::Config());
                surface_3pt_m1  = 0.0
                                - integrate(surface_3pt_A_m1, { 0.0, 0.0 }, { 1.0, 1.0 }, cubature::Config()) // integrate over x_1 and x_2
                                - integrate<GSL::QAGS>(surface_3pt_B_m1, 0.0, 1.0)                            // integrate over x_1
                                - integrate<GSL::QAGS>(surface_3pt_C_m1, 0.0, 1.0)                            // integrate over x_2
                                - surface_A30_3pt_D_m1(sigma_0, q2);
            }
            const double numerator       = integral_2pt_m1 + surface_2pt_m1 + integral_3pt_m1 + surface_3pt_m1;

            const double integral_2pt    = integrate<GSL::QAGS>(integrand_2pt, 0.0, sigma_0);
            const double surface_2pt     = 0.0 - surface_A30_2pt(sigma_0, q2);

            double integral_3pt    = 0.0;
            double surface_3pt     = 0.0;

            if (switch_3pt != 0.0)
            {
                const std::function<double (const double &)> surface_3pt_B    = std::bind(&Implementation::surface_A30_3pt_B, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const double &)> surface_3pt_C    = std::bind(&Implementation::surface_A30_3pt_C, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const std::array<double, 3> &)> integrand_3pt = std::bind(&Implementation::integrand_A30_3pt, this, std::placeholders::_1, q2);
                const std::function<double (const std::array<double, 2> &)> surface_3pt_A = std::bind(&Implementation::surface_A30_3pt_A, this, std::placeholders::_1, sigma_0, q2);

                integral_3pt    = integrate(integrand_3pt, { 0.0, 0.0, 0.0 }, { sigma_0, 1.0, 1.0 }, cubature::Config());
                surface_3pt     = 0.0
                                - integrate(surface_3pt_A, { 0.0, 0.0 }, { 1.0, 1.0 }, cubature::Config()) // integrate over x_1 and x_2
                                - integrate<GSL::QAGS>(surface_3pt_B, 0.0, 1.0)                            // integrate over x_1
                                - integrate<GSL::QAGS>(surface_3pt_C, 0.0, 1.0)                            // integrate over x_2
                                - surface_A30_3pt_D(sigma_0, q2);
            }
            const double denominator     = integral_2pt + surface_2pt + integral_3pt + surface_3pt;

            return numerator / denominator;
        }
        // }}}

        /* V : 2-particle functions */
        // {{{

        inline
        double I1_V_2pt_phi_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to V proportional to phi_+

            const double sigmabar = 1.0 - sigma;

            const double phi_plus  = this->phi_plus(sigma * m_B);

            const double C_1 =  - 1.0 / (sigmabar * m_B);

            return C_1 * phi_plus;
        }

        inline
        double I2_V_2pt_phi_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to V proportional to phibar
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double m_v = this->m_v();

            const double phi_bar  = this->phi_bar(sigma * m_B);

            const double C_2 = - m_v / (sigmabar2 * m_B);

            return C_2 * phi_bar;
        }

        inline
        double I2d1_V_2pt_phi_bar(const double & sigma, const double & /*q2*/) const
        {
            // first derivative of two-particle contribution to V proportional to phibar
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double m_v = this->m_v();

            const double phi_bar     = this->phi_bar(sigma * m_B);
            const double phi_bar_d1  = this->phi_bar_d1(sigma * m_B);

            const double C_2   = - m_v / sigmabar2;
            const double C_2d1 = - 2.0 * m_v / (power_of<3>(sigmabar) * m_B);

            return C_2 * phi_bar_d1 + C_2d1 * phi_bar;
        }

        inline
        double I2_V_2pt_g_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to V proportional to g_+
            const double sigmabar = 1.0 - sigma;

            const double g_plus   = this->g_plus(sigma * m_B);

            const double C_2 = - 4.0 / (power_of<2>(sigmabar) * m_B);

            return C_2 * g_plus;
        }

        inline
        double I2d1_V_2pt_g_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to V proportional to g_+
            const double sigmabar = 1.0 - sigma;

            const double g_plus    = this->g_plus(sigma * m_B);
            const double g_plus_d1 = this->g_plus_d1(sigma * m_B);

            const double C_2   = - 4.0 / power_of<2>(sigmabar);
            const double C_2d1 = - 8.0 / (power_of<3>(sigmabar) * m_B);

            return C_2  * g_plus_d1 + C_2d1 * g_plus;
        }

        inline
        double I3_V_2pt_g_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to V proportional to g_+
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_plus    = this->g_plus(sigma * m_B);

            const double C_3 = 8.0 * m_v2 / (power_of<3>(sigmabar) * m_B);

            return C_3 * g_plus;
        }

        inline
        double I3d1_V_2pt_g_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to V proportional to g_+
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_plus    = this->g_plus(sigma * m_B);
            const double g_plus_d1 = this->g_plus_d1(sigma * m_B);

            const double C_3   = 8.0 * m_v2 / power_of<3>(sigmabar);
            const double C_3d1 = 24.0 * m_v2 / (power_of<4>(sigmabar) * m_B);

            return C_3 * g_plus_d1 + C_3d1 * g_plus;
        }

        inline
        double I3d2_V_2pt_g_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to V proportional to g_+
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_plus    = this->g_plus(sigma * m_B);
            const double g_plus_d1 = this->g_plus_d1(sigma * m_B);
            const double g_plus_d2 = this->g_plus_d2(sigma * m_B);

            const double C_3   = 8.0 * m_v2 / power_of<3>(sigmabar) * m_B;
            const double C_3d1 = 48.0 * m_v2 / power_of<4>(sigmabar);
            const double C_3d2 = 96.0 * m_v2 / (power_of<5>(sigmabar) * m_B);

            return C_3 * g_plus_d2 + C_3d1 * g_plus_d1 + C_3d2 * g_plus;
        }

        inline
        double I4_V_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to V proportional to gbar
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v3 = power_of<3>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);

            const double C_4 = 24.0 * m_v3 / (power_of<4>(sigmabar) * m_B);

            return C_4 * g_bar;
        }

        inline
        double I4d1_V_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to V proportional to gbar
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v3 = power_of<3>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);

            const double C_4   = 24.0 * m_v3 / power_of<4>(sigmabar);
            const double C_4d1 = 96.0 * m_v3 / (power_of<5>(sigmabar) * m_B);

            return C_4 * g_bar_d1 + C_4d1 * g_bar;
        }

        inline
        double I4d2_V_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to V proportional to gbar
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v3 = power_of<3>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);
            const double g_bar_d2 = this->g_bar_d2(sigma * m_B);

            const double C_4   = 24.0 * m_v3 / power_of<4>(sigmabar) * m_B;
            const double C_4d1 = 192.0 * m_v3 / power_of<5>(sigmabar);
            const double C_4d2 = 480.0 * m_v3 / (power_of<6>(sigmabar) * m_B);

            return C_4 * g_bar_d2 + C_4d1 * g_bar_d1 + C_4d2 * g_bar;
        }

        inline
        double I4d3_V_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to V proportional to gbar
            const double sigmabar = 1.0 - sigma;
            const double m_B2 = power_of<2>(m_B);
            const double m_v = this->m_v(), m_v3 = power_of<3>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);
            const double g_bar_d2 = this->g_bar_d2(sigma * m_B);
            const double g_bar_d3 = this->g_bar_d3(sigma * m_B);

            const double C_4   = 24.0 * m_v3 / power_of<4>(sigmabar) * m_B2;
            const double C_4d1 = 288.0 * m_v3 / power_of<5>(sigmabar) * m_B;
            const double C_4d2 = 1440.0 * m_v3 / power_of<6>(sigmabar);
            const double C_4d3 = 2880.0 * m_v3 / (power_of<7>(sigmabar) * m_B);

            return C_4 * g_bar_d3 + C_4d1 * g_bar_d2 + C_4d2 * g_bar_d1 + C_4d3 * g_bar;
        }
        // }}}

        /* V : 3-particle functions */
        // {{{
        double I2_V_3pt_phi_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to phi_3
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_3 = this->phi_3(omega_1, omega_2);

            const double C_2 = u / (m_B() * power_of<2>(sigmabar));

            return C_2 * phi_3;
        }

        double I2_V_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to phi_bar_3
            const double m_B2     = power_of<2>(m_B);
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_2 = 2.0 * u / (m_B2 * power_of<3>(sigmabar));

            return C_2 * phi_bar_3;
        }

        double I3_V_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to V proportional to phi_bar_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = 2.0 * u * (m_B2 * sigmabar2 + m_v2 - q2) / (m_B2 * power_of<4>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I3d1A_V_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to V proportional to phi_bar_3
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = 2.0 *(sigma2 *(-(3.0 * m_B3 * sigmabar + 4.0 * m_B *q2))
                             + omega_1 * (m_B2 * (sigmabar - 3.0 ) * sigmabar - 4.0 * m_v2 + 4.0 * q2 * sigmabar)
                             + m_B * sigmabar * (sigmabar * (m_B2 - q2) + m_v2)
                             + sigma * (m_B3 * (3.0 - 2.0 * sigmabar) * sigmabar + 3.0 * m_B2 * sigmabar * omega_1
                             + m_B * (4.0 * m_v2 - 5.0 * q2 * sigmabar) + 4.0 * q2 * omega_1))
                             / (m_B2 * omega_2 * power_of<5>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I3d1B_V_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to V proportional to phi_bar_3
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = 2.0 * (-m_v2 + q2 * sigma + (q2 + m_B2 * (-1.0 + sigma)) * sigmabar) / (m_B * (-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I3d1C_V_3pt_phi_bar_3(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to phi_bar_3

            return 0.0;
        }

        double I4_V_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to phi_bar_bar_3
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = u * 6.0 * m_v2 * (2.0 * u - 1.0) / (m_B * power_of<4>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d1A_V_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to phi_bar_bar_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = 6.0 * m_v2 * (4.0 * omega_1 * (2.0 * omega_1 + omega_2)
                             + 8.0 * m_B2 * sigma2 - m_B * (4.0 * omega_1 + omega_2) * sigmabar
                             + 4.0 * m_B * sigma * (-(4.0 * omega_1) - omega_2 + m_B * sigmabar))
                             / (m_B * power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d1B_V_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to phi_bar_bar_3
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = - 6.0 * m_v2 / (power_of<4>(sigmabar) * omega_2);

            return C_4 * phi_bar_bar_3;
        }

        double I4d1C_V_3pt_phi_bar_bar_3(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to phi_bar_bar_3

            return 0.0;
        }

        double I4d2A_V_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to phi_bar_bar_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = 24.0 * m_v2 * (5.0 * omega_1 * (2.0 * omega_1 + omega_2) + 10.0 * m_B2 * sigma2
                             + m_B2 * sigmabar2 - 2.0 * m_B * (4.0 * omega_1 + omega_2) * sigmabar
                             + m_B * sigma * (-20.0 * omega_1 - 5.0 * omega_2 + 8.0 * m_B * sigmabar))
                             / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d2B_V_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to phi_bar_bar_3
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_3     = this->phi_bar_3(omega_1, omega_2);
            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            return  6.0 * m_v2 * (m_B * sigmabar *(omega_1 - m_B * sigma) * phi_bar_3
                   -2.0 * (4.0 * m_B * sigma + m_B * sigmabar - 4.0 * omega_1) * phi_bar_bar_3)
                   / (power_of<2>(omega_2) * power_of<5>(sigmabar));
        }

        double I4d2C_V_3pt_phi_bar_bar_3(const double & sigma, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to phi_bar_bar_3
            const double omega_1  = m_B * sigma;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = -6.0 * (m_B * m_v2) / (power_of<2>(omega_2) * power_of<4>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d2D_V_3pt_phi_bar_bar_3(const double & sigma, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to phi_bar_bar_3
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_4 = -6.0 * m_v2 / (power_of<4>(sigmabar));

            return C_4 * phi_bar_3;
        }

        double I2_V_3pt_phi_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to phi_4
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_4 = this->phi_4(omega_1, omega_2);

            const double C_2 = (u - 1.0) / (m_B() * power_of<2>(sigmabar));

            return C_2 * phi_4;
        }

        double I2_V_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to phi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_2 = 2.0 * (u - 1) / (m_B2 * power_of<3>(sigmabar));

            return C_2 * phi_bar_4;
        }

        double I3_V_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to V proportional to phi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * ((1.0 - u) * (q2 - m_B2 * sigmabar2) - m_B * m_v * sigmabar + m_v2 * (u - 1.0)) / (m_B2 * power_of<4>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I3d1A_V_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to V proportional to phi_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (-(3.0 * m_B * m_v * omega_2 * sigmabar)
                             + m_v2 * (-(4.0 * omega_1) - 4.0 * omega_2 + m_B * sigmabar)
                             - sigma2 * (4.0 * m_B * q2 + 3.0 * m_B3 * sigmabar)
                             + sigmabar * (4.0 * (omega_1 + omega_2) * q2 + m_B3 * sigmabar - m_B * q2 * sigmabar
                             + m_B2 * (omega_1 + omega_2) * (-3.0 + sigmabar))
                             + sigma * (4.0 * (omega_1 + omega_2) * q2 + 3.0 * m_B2 * (omega_1 + omega_2) * sigmabar
                             + m_B3 * sigmabar * (3.0 - 2.0 * sigmabar) + m_B * (4.0 * m_v2 - 5.0 * q2 * sigmabar)))
                             / (m_B2 * omega_2 * power_of<5>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I3d1B_V_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to phi_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * m_v / ((-omega_1 + m_B * sigma) * power_of<3>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I3d1C_V_3pt_phi_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to V proportional to phi_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * (-sigmabar * (m_B2 * (sigma - 1.0) + q2) + m_B * m_v * sigmabar + m_v2 - q2 * sigma) / (m_B * omega_2 * power_of<4>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I3_V_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -6.0 * m_v * u / (m_B2 * power_of<4>(sigmabar));

            return C_3 * phi_bar_bar_4;
        }

        double I3d1A_V_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -6.0 * m_v * (4.0 * m_B * sigma + sigmabar * m_B - 4.0 * omega_1) / (m_B2 * omega_2 * power_of<5>(sigmabar));

            return C_3 * phi_bar_bar_4;
        }

        double I3d1B_V_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to phi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 6.0 * m_v / (m_B * (-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * phi_bar_bar_4;
        }

        double I3d1C_V_3pt_phi_bar_bar_4(const double & sigma, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to phi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 0.0;

            return C_3 * phi_bar_bar_4;
        }

        double I4_V_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to V proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * m_v * u * (m_B2 * sigmabar2 + m_B * m_v * sigmabar * (1.0 - 2.0 * u) + m_v2 - q2) / (m_B2 * power_of<5>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d1A_V_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to V proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(6.0 * m_v * (m_B2 * (-(3.0 * omega_1 * omega_2) + m_v * (4.0 * omega_1 + omega_2))
                             * sigmabar2 + m_B3 * omega_2 * sigmabar3 + 5.0 * omega_1 * omega_2 * (-m_v2 + q2)
                             - 8.0 * m_B3 * m_v * sigma2 * sigmabar
                             + m_B * (m_v2 * omega_2 - 4.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2)
                             - omega_2 * q2) * sigmabar + m_B * sigma
                             * (5.0 * m_v2 * omega_2 + 3.0 * m_B2 * omega_2 * sigmabar2 - 5.0 * omega_2 * q2
                             + 4.0 * m_B * m_v * sigmabar * (4.0 * omega_1 + omega_2 - m_B * sigmabar))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d1B_V_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to V proportional to phi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_v * (m_B2 * sigmabar2 - m_B * m_v *sigmabar + m_v2 - q2) / (m_B * power_of<5>(sigmabar) * omega_2);

            return C_4 * phi_bar_bar_4;
        }

        double I4d1C_V_3pt_phi_bar_bar_4(const double & sigma, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to phi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 0.0;

            return C_4 * phi_bar_bar_4;
        }
        double I4d2A_V_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to V proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 12.0 * m_v * (2.0 * m_B2 * (3.0 * omega_1 * omega_2
                             - 2.0 * m_v * (4.0 * omega_1 + omega_2)) * sigmabar2
                             + m_B3 * (2.0 * m_v - 3.0 * omega_2) * sigmabar3 + 15 * omega_1 * omega_2 * (m_v2 - q2)
                             + 20.0 * m_B3 * m_v * sigma2 * sigmabar
                             + 5.0 * m_B * (-(m_v2 * omega_2) + 2.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2)
                             + omega_2 * q2) * sigmabar + m_B * sigma
                             * (-15.0 * m_v2 * omega_2 + 3.0 * omega_2 * (-(2.0 * m_B2 * sigmabar2) + 5.0 * q2)
                             + 2.0 * m_B * m_v * sigmabar * (-20.0 * omega_1 - 5.0 * omega_2 + 8.0 * m_B * sigmabar)))
                             / (m_B2 * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d2B_V_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to V proportional to phi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_4     = this->phi_bar_4(omega_1, omega_2);
            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            return   (6.0 * m_v * (2.0 * (-(m_B2 * (m_v + 3.0 * omega_1) * sigmabar2) + 5.0 * omega_1 * (-m_v2 + q2)
                    + 4.0 * m_B * m_v * omega_1 * sigmabar
                    + m_B * sigma * (5.0 * m_v2 + 3.0 * m_B2 * sigmabar2 - 5.0 * q2
                    - 4.0 * m_B * m_v * sigmabar)) * phi_bar_bar_4
                    + m_B * (-omega_1 + m_B * sigma) * sigmabar
                    * (m_v2 + m_B2 * sigmabar2 - q2 - m_B * m_v * sigmabar)* phi_bar_4))
                    / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));
        }

        double I4d2C_V_3pt_phi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to V proportional to phi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * m_v * (m_B2 * sigmabar2 + m_B * m_v * sigmabar + m_v2 - q2) / (power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d2D_V_3pt_phi_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to V proportional to phi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);
            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            return    6.0 * m_v * ((m_v2 - m_B2 * sigmabar2 - q2) * phi_bar_bar_4
                    + m_B * sigmabar * (m_v2 + m_B2 * sigmabar2 - q2 - m_B * m_v * sigmabar)
                    * phi_bar_4) / (m_B2 * power_of<6>(sigmabar));
        }

        double I2_V_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to psi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_2 = 2.0 * (1.0 - 2.0 * u) / (m_B2 * power_of<3>(sigmabar));

            return C_2 * psi_bar_4;
        }

        double I3_V_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to V proportional to psi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * (-(2.0 * u -1.0) * (q2 - m_B2 * sigmabar2) - 2.0 * m_B * m_v * sigmabar + m_v2 * (2.0 * u - 1.0))
                             / (m_B2 * power_of<4>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I3d1A_V_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to V proportional to psi_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (6.0 * m_B * m_v * omega_2 * sigmabar
                             + m_v2 * (8.0 * omega_1 + 4.0 * omega_2 - 2.0 * m_B * sigmabar)
                             + sigma2 * (8.0 * m_B * q2 + 6.0 * m_B3 * sigmabar)
                             - sigmabar * (4.0 * (2.0 * omega_1 + omega_2) * q2 + 2.0 * m_B3 * sigmabar
                             - 2.0 * m_B * q2 * sigmabar + m_B2 * (2.0 * omega_1 + omega_2) * (-3.0 + sigmabar))
                             + sigma * (-(4.0 * (2.0 * omega_1 + omega_2) * q2)
                             - 3.0 * m_B2 * (2.0 * omega_1 + omega_2) * sigmabar
                             + 2.0 * m_B3 * sigmabar * (-3.0 + 2.0 * sigmabar) + m_B * (-(8.0 * m_v2) + 10 * q2 * sigmabar)))
                             / (m_B2 * omega_2 * power_of<5>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I3d1B_V_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to V proportional to psi_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * (sigmabar * (m_B2 * (sigma -1.0) + 2.0 * m_B * m_v + q2) -m_v2 + q2 * sigma)
                             / (m_B * (-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I3d1C_V_3pt_psi_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to V proportional to psi_bar_4
            const double omega_1  = m_B * sigma;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (m_B * sigmabar * (-m_B * sigma + m_B + 2.0 * m_v) + m_v2 - q2 * sigma - q2 * sigmabar) / (m_B * omega_2 * power_of<4>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I4_V_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to psi_bar_bar_4
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = u * 6.0 * m_v2 * (2.0 * u - 1.0) / (m_B * power_of<4>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1A_V_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_v2 * (4.0 * omega_1 * (2.0 * omega_1 + omega_2)
                             + 8.0 * m_B2 * sigma2 - m_B * (4.0 * omega_1 + omega_2) * sigmabar
                             + 4.0 * m_B * sigma * (-(4.0 * omega_1) - omega_2 + m_B * sigmabar))
                             / (m_B * power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1B_V_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = - 6.0 * m_v2 / (power_of<4>(sigmabar) * omega_2);

            return C_4 * psi_bar_bar_4;
        }

        double I4d1C_V_3pt_psiA_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to psi_bar_bar_4

            return 0.0;
        }

        double I4d2A_V_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 24.0 * m_v2 * (5.0 * omega_1 * (2.0 * omega_1 + omega_2) + 10.0 * m_B2 * sigma2
                             + m_B2 * sigmabar2 - 2.0 * m_B * (4.0 * omega_1 + omega_2) * sigmabar
                             + m_B * sigma * (-20.0 * omega_1 - 5.0 * omega_2 + 8.0 * m_B * sigmabar))
                             / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2B_V_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_4     = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return  6.0 * m_v2 * (m_B * sigmabar *(omega_1 - m_B * sigma) * psi_bar_4
                   -2.0 * (4.0 * m_B * sigma + m_B * sigmabar - 4.0 * omega_1) * psi_bar_bar_4)
                   / (power_of<2>(omega_2) * power_of<5>(sigmabar));
        }

        double I4d2C_V_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * (m_B * m_v2) / (power_of<2>(omega_2) * power_of<4>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2D_V_3pt_psiA_bar_bar_4(const double & sigma, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * m_v2 / (power_of<4>(sigmabar));

            return C_4 * psi_bar_4;
        }

        double I3_V_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -6.0 * m_v * u / (m_B2 * power_of<4>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1A_V_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -6.0 * m_v * (4.0 * m_B * sigma + sigmabar * m_B - 4.0 * omega_1) / (m_B2 * omega_2 * power_of<5>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1B_V_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 6.0 * m_v / (m_B * (-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1C_V_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 0.0;

            return C_3 * psi_bar_bar_4;
        }

        double I4_V_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to V proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * m_v * u * (m_B2 * sigmabar2 + m_B * m_v * sigmabar * (1.0 - 2.0 * u) + m_v2 - q2) / (m_B2 * power_of<5>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1A_V_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to V proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(6.0 * m_v * (m_B2 * (-(3.0 * omega_1 * omega_2) + m_v * (4.0 * omega_1 + omega_2))
                             * sigmabar2 + m_B3 * omega_2 * sigmabar3 + 5.0 * omega_1 * omega_2 * (-m_v2 + q2)
                             - 8.0 * m_B3 * m_v * sigma2 * sigmabar
                             + m_B * (m_v2 * omega_2 - 4.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2)
                             - omega_2 * q2) * sigmabar + m_B * sigma
                             * (5.0 * m_v2 * omega_2 + 3.0 * m_B2 * omega_2 * sigmabar2 - 5.0 * omega_2 * q2
                             + 4.0 * m_B * m_v * sigmabar * (4.0 * omega_1 + omega_2 - m_B * sigmabar))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1B_V_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to V proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_v * (m_B2 * sigmabar2 - m_B * m_v *sigmabar + m_v2 - q2) / (m_B * power_of<5>(sigmabar) * omega_2);

            return C_4 * psi_bar_bar_4;
        }

        double I4d1C_V_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 0.0;

            return C_4 * psi_bar_bar_4;
        }
        double I4d2A_V_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to V proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 12.0 * m_v * (2.0 * m_B2 * (3.0 * omega_1 * omega_2
                             - 2.0 * m_v * (4.0 * omega_1 + omega_2)) * sigmabar2
                             + m_B3 * (2.0 * m_v - 3.0 * omega_2) * sigmabar3 + 15 * omega_1 * omega_2 * (m_v2 - q2)
                             + 20.0 * m_B3 * m_v * sigma2 * sigmabar
                             + 5.0 * m_B * (-(m_v2 * omega_2) + 2.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2)
                             + omega_2 * q2) * sigmabar + m_B * sigma
                             * (-15.0 * m_v2 * omega_2 + 3.0 * omega_2 * (-(2.0 * m_B2 * sigmabar2) + 5.0 * q2)
                             + 2.0 * m_B * m_v * sigmabar * (-20.0 * omega_1 - 5.0 * omega_2 + 8.0 * m_B * sigmabar)))
                             / (m_B2 * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2B_V_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to V proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_4     = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return   (6.0 * m_v * (2.0 * (-(m_B2 * (m_v + 3.0 * omega_1) * sigmabar2) + 5.0 * omega_1 * (-m_v2 + q2)
                    + 4.0 * m_B * m_v * omega_1 * sigmabar
                    + m_B * sigma * (5.0 * m_v2 + 3.0 * m_B2 * sigmabar2 - 5.0 * q2
                    - 4.0 * m_B * m_v * sigmabar)) * psi_bar_bar_4
                    + m_B * (-omega_1 + m_B * sigma) * sigmabar
                    * (m_v2 + m_B2 * sigmabar2 - q2 - m_B * m_v * sigmabar)* psi_bar_4))
                    / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));
        }

        double I4d2C_V_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to V proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * m_v * (m_B2 * sigmabar2 + m_B * m_v * sigmabar + m_v2 - q2) / (power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2D_V_3pt_psiB_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to V proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return    6.0 * m_v * ((m_v2 - m_B2 * sigmabar2 - q2) * psi_bar_bar_4
                    + m_B * sigmabar * (m_v2 + m_B2 * sigmabar2 - q2 - m_B * m_v * sigmabar)
                    * psi_bar_4) / (m_B2 * power_of<6>(sigmabar));
        }

        double I3_V_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - 0.0                                                       - I3_V_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1A_V_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - 0.0                                                       - I3d1A_V_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1B_V_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return - 0.0                                                       - I3d1B_V_3pt_psiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I3d1C_V_3pt_psi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return - 0.0                                                       - I3d1C_V_3pt_psiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4_V_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I4_V_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2)    - I4_V_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1A_V_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I4d1A_V_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d1A_V_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1B_V_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return - I4d1B_V_3pt_psiA_bar_bar_4( sigma, omega_1, q2)          - I4d1B_V_3pt_psiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d1C_V_3pt_psi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return - I4d1C_V_3pt_psiA_bar_bar_4( sigma, omega_2, q2)          - I4d1C_V_3pt_psiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2A_V_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I4d2A_V_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d2A_V_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d2B_V_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return - I4d2B_V_3pt_psiA_bar_bar_4( sigma, omega_1, q2)          - I4d2B_V_3pt_psiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d2C_V_3pt_psi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return - I4d2C_V_3pt_psiA_bar_bar_4( sigma, omega_2, q2)          - I4d2C_V_3pt_psiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2D_V_3pt_psi_bar_bar_4(const double & sigma, const double & q2) const
        {
            return - I4d2D_V_3pt_psiA_bar_bar_4( sigma, q2)                   - I4d2D_A30_3pt_psiB_bar_bar_4(sigma, q2);
        }

        double I2_V_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to chi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_2 = 2.0 / (m_B2 * power_of<3>(sigmabar));

            return C_2 * chi_bar_4;
        }

        double I3_V_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to V proportional to chi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (m_B2 * sigmabar2 + m_v2 - q2) / (m_B2 * power_of<4>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I3d1A_V_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to V proportional to chi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * (sigma *(3.0 * m_B2 * sigmabar + 4.0 * q2) + m_B2 * (sigmabar -3.0) * sigmabar - 4.0 *m_v2 + 4.0 * q2 * sigmabar)
                             / (m_B2 * power_of<5>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I3d1B_V_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to V proportional to chi_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (sigmabar * (m_B2 * (sigma - 1.0) + q2) - m_v2 + q2 * sigma) / (m_B * (-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I3d1C_V_3pt_chi_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to V proportional to chi_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (-sigmabar * (m_B2 * (sigma - 1.0) + q2) + m_v2 - q2 * sigma) / (m_B * omega_2 * power_of<4>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I4_V_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to chi_bar_bar_4
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = u * 6.0 * m_v2 * (2.0 * u - 1.0) / (m_B * power_of<4>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1A_V_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_v2 * (4.0 * omega_1 * (2.0 * omega_1 + omega_2)
                             + 8.0 * m_B2 * sigma2 - m_B * (4.0 * omega_1 + omega_2) * sigmabar
                             + 4.0 * m_B * sigma * (-(4.0 * omega_1) - omega_2 + m_B * sigmabar))
                             / (m_B * power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1B_V_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = - 6.0 * m_v2 / (power_of<4>(sigmabar) * omega_2);

            return C_4 * chi_bar_bar_4;
        }

        double I4d1C_V_3pt_chiA_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to chi_bar_bar_4

            return 0.0;
        }

        double I4d2A_V_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 24.0 * m_v2 * (5.0 * omega_1 * (2.0 * omega_1 + omega_2) + 10.0 * m_B2 * sigma2
                             + m_B2 * sigmabar2 - 2.0 * m_B * (4.0 * omega_1 + omega_2) * sigmabar
                             + m_B * sigma * (-20.0 * omega_1 - 5.0 * omega_2 + 8.0 * m_B * sigmabar))
                             / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2B_V_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_4     = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return  6.0 * m_v2 * (m_B * sigmabar *(omega_1 - m_B * sigma) * chi_bar_4
                   -2.0 * (4.0 * m_B * sigma + m_B * sigmabar - 4.0 * omega_1) * chi_bar_bar_4)
                   / (power_of<2>(omega_2) * power_of<5>(sigmabar));
        }

        double I4d2C_V_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * (m_B * m_v2) / (power_of<2>(omega_2) * power_of<4>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2D_V_3pt_chiA_bar_bar_4(const double & sigma, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * m_v2 / (power_of<4>(sigmabar));

            return C_4 * chi_bar_4;
        }

        double I3_V_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -6.0 * m_v * u / (m_B2 * power_of<4>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1A_V_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -6.0 * m_v * (4.0 * m_B * sigma + sigmabar * m_B - 4.0 * omega_1) / (m_B2 * omega_2 * power_of<5>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1B_V_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 6.0 * m_v / (m_B * (-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1C_V_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 0.0;

            return C_3 * chi_bar_bar_4;
        }

        double I4_V_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to V proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * m_v * u * (m_B2 * sigmabar2 + m_B * m_v * sigmabar * (1.0 - 2.0 * u) + m_v2 - q2) / (m_B2 * power_of<5>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1A_V_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to V proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(6.0 * m_v * (m_B2 * (-(3.0 * omega_1 * omega_2) + m_v * (4.0 * omega_1 + omega_2))
                             * sigmabar2 + m_B3 * omega_2 * sigmabar3 + 5.0 * omega_1 * omega_2 * (-m_v2 + q2)
                             - 8.0 * m_B3 * m_v * sigma2 * sigmabar
                             + m_B * (m_v2 * omega_2 - 4.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2)
                             - omega_2 * q2) * sigmabar + m_B * sigma
                             * (5.0 * m_v2 * omega_2 + 3.0 * m_B2 * omega_2 * sigmabar2 - 5.0 * omega_2 * q2
                             + 4.0 * m_B * m_v * sigmabar * (4.0 * omega_1 + omega_2 - m_B * sigmabar))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1B_V_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to V proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_v * (m_B2 * sigmabar2 - m_B * m_v *sigmabar + m_v2 - q2) / (m_B * power_of<5>(sigmabar) * omega_2);

            return C_4 * chi_bar_bar_4;
        }

        double I4d1C_V_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to V proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 0.0;

            return C_4 * chi_bar_bar_4;
        }
        double I4d2A_V_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to V proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 12.0 * m_v * (2.0 * m_B2 * (3.0 * omega_1 * omega_2
                             - 2.0 * m_v * (4.0 * omega_1 + omega_2)) * sigmabar2
                             + m_B3 * (2.0 * m_v - 3.0 * omega_2) * sigmabar3 + 15 * omega_1 * omega_2 * (m_v2 - q2)
                             + 20.0 * m_B3 * m_v * sigma2 * sigmabar
                             + 5.0 * m_B * (-(m_v2 * omega_2) + 2.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2)
                             + omega_2 * q2) * sigmabar + m_B * sigma
                             * (-15.0 * m_v2 * omega_2 + 3.0 * omega_2 * (-(2.0 * m_B2 * sigmabar2) + 5.0 * q2)
                             + 2.0 * m_B * m_v * sigmabar * (-20.0 * omega_1 - 5.0 * omega_2 + 8.0 * m_B * sigmabar)))
                             / (m_B2 * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2B_V_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to V proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_4     = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return   (6.0 * m_v * (2.0 * (-(m_B2 * (m_v + 3.0 * omega_1) * sigmabar2) + 5.0 * omega_1 * (-m_v2 + q2)
                    + 4.0 * m_B * m_v * omega_1 * sigmabar
                    + m_B * sigma * (5.0 * m_v2 + 3.0 * m_B2 * sigmabar2 - 5.0 * q2
                    - 4.0 * m_B * m_v * sigmabar)) * chi_bar_bar_4
                    + m_B * (-omega_1 + m_B * sigma) * sigmabar
                    * (m_v2 + m_B2 * sigmabar2 - q2 - m_B * m_v * sigmabar)* chi_bar_4))
                    / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));
        }

        double I4d2C_V_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to V proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * m_v * (m_B2 * sigmabar2 + m_B * m_v * sigmabar + m_v2 - q2) / (power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2D_V_3pt_chiB_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to V proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return    6.0 * m_v * ((m_v2 - m_B2 * sigmabar2 - q2) * chi_bar_bar_4
                    + m_B * sigmabar * (m_v2 + m_B2 * sigmabar2 - q2 - m_B * m_v * sigmabar)
                    * chi_bar_4) / (m_B2 * power_of<6>(sigmabar));
        }

        double I3_V_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + 0.0                                                       - I3_V_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1A_V_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + 0.0                                                       - I3d1A_V_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1B_V_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return + 0.0                                                       - I3d1B_V_3pt_chiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I3d1C_V_3pt_chi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return + 0.0                                                       - I3d1C_V_3pt_chiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4_V_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I4_V_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2)    - I4_V_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1A_V_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I4d1A_V_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d1A_V_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1B_V_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return + I4d1B_V_3pt_chiA_bar_bar_4( sigma, omega_1, q2)          - I4d1B_V_3pt_chiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d1C_V_3pt_chi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return + I4d1C_V_3pt_chiA_bar_bar_4( sigma, omega_2, q2)          - I4d1C_V_3pt_chiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2A_V_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I4d2A_V_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d2A_V_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d2B_V_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return + I4d2B_V_3pt_chiA_bar_bar_4( sigma, omega_1, q2)          - I4d2B_V_3pt_chiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d2C_V_3pt_chi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return + I4d2C_V_3pt_chiA_bar_bar_4( sigma, omega_2, q2)          - I4d2C_V_3pt_chiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2D_V_3pt_chi_bar_bar_4(const double & sigma, const double & q2) const
        {
            return + I4d2D_V_3pt_chiA_bar_bar_4( sigma, q2)                   - I4d2D_V_3pt_chiB_bar_bar_4(sigma, q2);
        }
        // }}}

        /* V : integrands and surface terms */
        // {{{
        double integrand_V_2pt_disp(const double & sigma, const double & q2) const
        {
            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);
            const double etad3    = 24.0 * (eta - 1.0) * power_of<2>(eta) * (2.0 * eta - 1.0) / power_of<3>(sigmabar);

            const double I1   = I1_V_2pt_phi_p(sigma, q2);
            const double I2   = I2_V_2pt_phi_bar(sigma, q2)   + I2_V_2pt_g_p(sigma, q2);
            const double I2d1 = I2d1_V_2pt_phi_bar(sigma, q2) + I2d1_V_2pt_g_p(sigma, q2);
            const double I3   = I3_V_2pt_g_p(sigma, q2);
            const double I3d1 = I3d1_V_2pt_g_p(sigma, q2);
            const double I3d2 = I3d2_V_2pt_g_p(sigma, q2);
            const double I4   = I4_V_2pt_g_bar(sigma, q2);
            const double I4d1 = I4d1_V_2pt_g_bar(sigma, q2);
            const double I4d2 = I4d2_V_2pt_g_bar(sigma, q2);
            const double I4d3 = I4d3_V_2pt_g_bar(sigma, q2);

            double result = 0.0;
            result += -1.0 * I1;
            result += (etad1 * I2 + eta * I2d1) / m_B2;
            result += -1.0 * (I3 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I3d1 * eta * etad1 + I3d2 * power_of<2>(eta)) / (2.0 * m_B4);
            result += I4 * (power_of<2>(eta) * etad3 + 4.0 * eta * etad1 * etad2 + power_of<3>(etad1)) / (6.0 * m_B6);
            result += I4d1 * eta * (4.0 * eta * etad2 + 7.0 * power_of<2>(etad1)) / (6.0 * m_B6);
            result += I4d2 * 6.0 * power_of<2>(eta) * etad1 / (6.0 * m_B6);
            result += I4d3 * power_of<3>(eta) / (6.0 * m_B6);
            result *= exp;

            return result;
        }

        double integrand_V_2pt_borel(const double & sigma, const double & q2) const
        {
            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double I1   = I1_V_2pt_phi_p(sigma, q2);
            const double I2   = I2_V_2pt_phi_bar(sigma, q2)   + I2_V_2pt_g_p(sigma, q2);
            const double I3   = I3_V_2pt_g_p(sigma, q2);
            const double I4   = I4_V_2pt_g_bar(sigma, q2);

            double result = 0.0;
            result += - I1;
            result +=   I2 / M2;
            result += - I3 / (2.0 * M4);
            result +=   I4 / (6.0 * M6);
            result *= exp;

            return result;
        }

        double surface_V_2pt(const double & sigma, const double & q2) const
        {
            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_V_2pt_phi_bar(sigma, q2)   + I2_V_2pt_g_p(sigma, q2);
            const double I3   = I3_V_2pt_g_p(sigma, q2);
            const double I3d1 = I3d1_V_2pt_g_p(sigma, q2);
            const double I4   = I4_V_2pt_g_bar(sigma, q2);
            const double I4d1 = I4d1_V_2pt_g_bar(sigma, q2);
            const double I4d2 = I4d2_V_2pt_g_bar(sigma, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;

            return result;
        }

        /*
         * rewrite integration ranges such that:
         * 1.)
         *    0 <= x_1 <= 1,     and    0 <= x_2 <= 1,
         * 2.)
         *    x_1 and x_2 integration boundaries do not depend on the other variables
         *
         * We obtain the integrand
         *
         *    sigma m_B f(sigma m_B x_1, sigma m_B (xbar_1 xbar_2 + x_2) / xbar_2) / (xbar_1 xbar_2^2 + x_2 xbar_2),
         *
         * where
         *
         *    xbar_1 = 1.0 - x_1,    and    xbar_2 = 1.0 - x_2.
         */
        double integrand_V_3pt(const std::array<double, 3> & args, const double & q2) const
        {
            const double sigma  = args[0];
            const double x_1    = args[1];
            const double x_2    = args[2];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            constexpr double I1 = 0.0;
            const     double I2 = I2_V_3pt_phi_3(sigma, omega_1, omega_2, q2)         + I2_V_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                                + I2_V_3pt_phi_4(sigma, omega_1, omega_2, q2)         + I2_V_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                                + I2_V_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I2_V_3pt_chi_bar_4(sigma, omega_1, omega_2, q2);
            const     double I3 = I3_V_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                                + I3_V_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3_V_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                                + I3_V_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3_V_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                                + I3_V_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3_V_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const     double I4 = I4_V_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4_V_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                                + I4_V_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4_V_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result = 0.0;
            result += - I1;
            result +=   I2 / M2;
            result += - I3 / (2.0 * M4);
            result +=   I4 / (6.0 * M6);
            result *=   prefactor * exp;

            return result;
        }

        double surface_V_3pt_A(const std::array<double, 2> & args, const double & sigma, const double & q2) const
        {
            const double x_1    = args[0];
            const double x_2    = args[1];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_V_3pt_phi_3(sigma, omega_1, omega_2, q2)            + I2_V_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                              + I2_V_3pt_phi_4(sigma, omega_1, omega_2, q2)            + I2_V_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_V_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I2_V_3pt_chi_bar_4(sigma, omega_1, omega_2, q2);
            const double I3   = I3_V_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                              + I3_V_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)        + I3_V_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_V_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I3_V_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_V_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I3_V_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3d1 = I3d1A_V_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                              + I3d1A_V_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_V_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_V_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_V_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_V_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3d1A_V_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4   = I4_V_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)    + I4_V_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4_V_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I4_V_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d1 = I4d1A_V_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d1A_V_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d1A_V_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d1A_V_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d2 = I4d2A_V_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d2A_V_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d2A_V_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d2A_V_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        double surface_V_3pt_B(const double & x_1, const double & sigma, const double & q2) const
        {
            // this ONLY includes the Jacobian from the transformation (omega_1 -> x_1).
            const double prefactor = sigma * m_B();

            const double omega_1 = sigma * m_B() * x_1;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1B_V_3pt_phi_bar_3(sigma, omega_1, q2)
                                  + I3d1B_V_3pt_phi_bar_4(sigma, omega_1, q2)     + I3d1B_V_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I3d1B_V_3pt_psi_bar_4(sigma, omega_1, q2)     + I3d1B_V_3pt_chi_bar_4(sigma, omega_1, q2)
                                  + I3d1B_V_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I3d1B_V_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1B_V_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d1B_V_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d1B_V_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d1B_V_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            const     double I4d2 = I4d2B_V_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d2B_V_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d2B_V_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d2B_V_3pt_chi_bar_bar_4(sigma, omega_1, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        double surface_V_3pt_C(const double & x_2, const double & sigma, const double & q2) const
        {
            const double xbar_2 = 1.0 - x_2;

            // this ONLY includes the Jacobian from the transformation (omega_2 -> x_2).
            const double prefactor = sigma * m_B() / (xbar_2 * xbar_2);

            const double omega_2 = sigma * m_B() * (x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1C_V_3pt_phi_bar_3(sigma, omega_2, q2)
                                  + I3d1C_V_3pt_phi_bar_4(sigma, omega_2, q2)     + I3d1C_V_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I3d1C_V_3pt_psi_bar_4(sigma, omega_2, q2)     + I3d1C_V_3pt_chi_bar_4(sigma, omega_2, q2)
                                  + I3d1C_V_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I3d1C_V_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1C_V_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d1C_V_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d1C_V_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d1C_V_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            const     double I4d2 = I4d2C_V_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d2C_V_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d2C_V_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d2C_V_3pt_chi_bar_bar_4(sigma, omega_2, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        double surface_V_3pt_D(const double & sigma, const double & q2) const
        {
            // this does NOT includes the original factor of 1 / omega_2
            const double prefactor = 1.0;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);


            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            constexpr double I3d1 = 0.0;
            constexpr double I4   = 0.0;
            constexpr double I4d1 = 0.0;
            const     double I4d2 = I4d2D_V_3pt_phi_bar_bar_3(sigma, q2) + I4d2D_V_3pt_phi_bar_bar_4(sigma, q2)
                                  + I4d2D_V_3pt_psi_bar_bar_4(sigma, q2) + I4d2D_V_3pt_chi_bar_bar_4(sigma, q2);


            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        /*
         * Integrands for the first moments. Only the borel method is implemented
         */

        double integrand_V_2pt_borel_m1(const double & sigma, const double & q2) const
        {
            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double I1   = I1_V_2pt_phi_p(sigma, q2);
            const double I2   = I2_V_2pt_phi_bar(sigma, q2)   + I2_V_2pt_g_p(sigma, q2);
            const double I3   = I3_V_2pt_g_p(sigma, q2);
            const double I4   = I4_V_2pt_g_bar(sigma, q2);

            double result1 = 0.0;
            result1 += - I1;
            result1 +=   I2 / M2;
            result1 += - I3 / (2.0 * M4);
            result1 +=   I4 / (6.0 * M6);
            result1 *=   exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - I2;
            result2 +=   I3 / M2;
            result2 += - I4 / (2.0 * M4);
            result2 *=   exp;

            return result1 + result2;
        }

        double surface_V_2pt_m1(const double & sigma, const double & q2) const
        {
            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double m_V2 = power_of<2>(m_V());
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_V_2pt_phi_bar(sigma, q2)   + I2_V_2pt_g_p(sigma, q2);
            const double I3   = I3_V_2pt_g_p(sigma, q2);
            const double I3d1 = I3d1_V_2pt_g_p(sigma, q2);
            const double I4   = I4_V_2pt_g_bar(sigma, q2);
            const double I4d1 = I4d1_V_2pt_g_bar(sigma, q2);
            const double I4d2 = I4d2_V_2pt_g_bar(sigma, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return result1 + result2;
        }
        double integrand_V_3pt_m1(const std::array<double, 3> & args, const double & q2) const
        {
            const double sigma  = args[0];
            const double x_1    = args[1];
            const double x_2    = args[2];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double I1 = 0.0;
            const double I2 = I2_V_3pt_phi_3(sigma, omega_1, omega_2, q2)         + I2_V_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                            + I2_V_3pt_phi_4(sigma, omega_1, omega_2, q2)         + I2_V_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_V_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I2_V_3pt_chi_bar_4(sigma, omega_1, omega_2, q2);
            const double I3 = I3_V_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                            + I3_V_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3_V_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I3_V_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3_V_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                            + I3_V_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3_V_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4 = I4_V_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4_V_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I4_V_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4_V_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result1 = 0.0;
            result1 += - I1;
            result1 +=   I2 / M2;
            result1 += - I3 / (2.0 * M4);
            result1 +=   I4 / (6.0 * M6);
            result1 *=   exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - I2;
            result2 +=   I3 / M2;
            result2 += - I4 / (2.0 * M4);
            result2 *=   exp;

            return (result1 + result2) * prefactor;
        }

        double surface_V_3pt_A_m1(const std::array<double, 2> & args, const double & sigma, const double & q2) const
        {
            const double x_1    = args[0];
            const double x_2    = args[1];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_V_3pt_phi_3(sigma, omega_1, omega_2, q2)            + I2_V_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                              + I2_V_3pt_phi_4(sigma, omega_1, omega_2, q2)            + I2_V_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_V_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I2_V_3pt_chi_bar_4(sigma, omega_1, omega_2, q2);
            const double I3   = I3_V_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                              + I3_V_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)        + I3_V_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_V_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I3_V_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_V_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I3_V_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3d1 = I3d1A_V_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                              + I3d1A_V_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_V_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_V_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_V_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_V_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3d1A_V_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4   = I4_V_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)    + I4_V_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4_V_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I4_V_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d1 = I4d1A_V_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d1A_V_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d1A_V_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d1A_V_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d2 = I4d2A_V_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d2A_V_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d2A_V_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d2A_V_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }

        double surface_V_3pt_B_m1(const double & x_1, const double & sigma, const double & q2) const
        {
            // this ONLY includes the Jacobian from the transformation (omega_1 -> x_1).
            const double prefactor = sigma * m_B();

            const double omega_1 = sigma * m_B() * x_1;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1B_V_3pt_phi_bar_3(sigma, omega_1, q2)
                                  + I3d1B_V_3pt_phi_bar_4(sigma, omega_1, q2)     + I3d1B_V_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I3d1B_V_3pt_psi_bar_4(sigma, omega_1, q2)     + I3d1B_V_3pt_chi_bar_4(sigma, omega_1, q2)
                                  + I3d1B_V_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I3d1B_V_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1B_V_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d1B_V_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d1B_V_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d1B_V_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            const     double I4d2 = I4d2B_V_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d2B_V_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d2B_V_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d2B_V_3pt_chi_bar_bar_4(sigma, omega_1, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }

        double surface_V_3pt_C_m1(const double & x_2, const double & sigma, const double & q2) const
        {
            const double xbar_2 = 1.0 - x_2;

            // this ONLY includes the Jacobian from the transformation (omega_2 -> x_2).
            const double prefactor = sigma * m_B() / (xbar_2 * xbar_2);

            const double omega_2 = sigma * m_B() * (x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1C_V_3pt_phi_bar_3(sigma, omega_2, q2)
                                  + I3d1C_V_3pt_phi_bar_4(sigma, omega_2, q2)     + I3d1C_V_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I3d1C_V_3pt_psi_bar_4(sigma, omega_2, q2)     + I3d1C_V_3pt_chi_bar_4(sigma, omega_2, q2)
                                  + I3d1C_V_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I3d1C_V_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1C_V_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d1C_V_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d1C_V_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d1C_V_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            const     double I4d2 = I4d2C_V_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d2C_V_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d2C_V_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d2C_V_3pt_chi_bar_bar_4(sigma, omega_2, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }

        double surface_V_3pt_D_m1(const double & sigma, const double & q2) const
        {
            // this does NOT includes the original factor of 1 / omega_2
            const double prefactor = 1.0;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);


            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            constexpr double I3d1 = 0.0;
            constexpr double I4   = 0.0;
            constexpr double I4d1 = 0.0;
            const     double I4d2 = I4d2D_V_3pt_phi_bar_bar_3(sigma, q2) + I4d2D_V_3pt_phi_bar_bar_4(sigma, q2)
                                  + I4d2D_V_3pt_psi_bar_bar_4(sigma, q2) + I4d2D_V_3pt_chi_bar_bar_4(sigma, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }
        // }}}

        /* V : form factor and moments */
        // {{{
        double v(const double & q2) const
        {
            const double sigma_0 = this->sigma_0(q2, s0_0_V(), s0_1_V());

            const std::function<double (const double &)> integrand_2pt = std::bind(integrand_v_2pt, this, std::placeholders::_1, q2);

            const double integral_2pt = integrate<GSL::QAGS>(integrand_2pt, 0.0, sigma_0);
            const double surface_2pt  = 0.0 - surface_V_2pt(switch_borel ? sigma_0 : 0.0, q2);

            double integral_3pt = 0.0;
            double surface_3pt  = 0.0;

            if (switch_3pt != 0.0)
            {
                const std::function<double (const double &)> surface_3pt_B = std::bind(&Implementation::surface_V_3pt_B, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const double &)> surface_3pt_C = std::bind(&Implementation::surface_V_3pt_C, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const std::array<double, 3> &)> integrand_3pt = std::bind(&Implementation::integrand_V_3pt, this, std::placeholders::_1, q2);
                const std::function<double (const std::array<double, 2> &)> surface_3pt_A = std::bind(&Implementation::surface_V_3pt_A, this, std::placeholders::_1, sigma_0, q2);

                integral_3pt = integrate(integrand_3pt, { 0.0, 0.0, 0.0 }, { sigma_0, 1.0, 1.0 }, cubature::Config());
                surface_3pt  = 0.0
                             - integrate(surface_3pt_A, { 0.0, 0.0 }, { 1.0, 1.0 }, cubature::Config()) // integrate over x_1 and x_2
                             - integrate<GSL::QAGS>(surface_3pt_B, 0.0, 1.0)                            // integrate over x_1
                             - integrate<GSL::QAGS>(surface_3pt_C, 0.0, 1.0)                            // integrate over x_2
                             - surface_V_3pt_D(sigma_0, q2);
            }

            return f_B() * power_of<2>(m_B) * (m_B + m_V) / (2.0 * f_V() * m_V) * (integral_2pt + surface_2pt + integral_3pt + surface_3pt) / ( Process_::chi2);
        }

        double normalized_moment_1_v(const double & q2) const
        {
            const double sigma_0 = this->sigma_0(q2, s0_0_V(), s0_1_V());

            const std::function<double (const double &)> integrand_2pt_m1 = std::bind(&Implementation::integrand_V_2pt_borel_m1, this, std::placeholders::_1, q2);


            const std::function<double (const double &)> integrand_2pt    = std::bind(&Implementation::integrand_V_2pt_borel, this, std::placeholders::_1, q2);

            const double integral_2pt_m1 = integrate<GSL::QAGS>(integrand_2pt_m1, 0.0, sigma_0);
            const double surface_2pt_m1  = 0.0 - surface_V_2pt_m1(sigma_0, q2);

            double integral_3pt_m1 = 0.0;
            double surface_3pt_m1  = 0.0;

            if (switch_3pt != 0.0)
            {
                const std::function<double (const double &)> surface_3pt_B_m1 = std::bind(&Implementation::surface_V_3pt_B_m1, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const double &)> surface_3pt_C_m1 = std::bind(&Implementation::surface_V_3pt_C_m1, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const std::array<double, 3> &)> integrand_3pt_m1 = std::bind(&Implementation::integrand_V_3pt_m1, this, std::placeholders::_1, q2);
                const std::function<double (const std::array<double, 2> &)> surface_3pt_A_m1 = std::bind(&Implementation::surface_V_3pt_A_m1, this, std::placeholders::_1, sigma_0, q2);

                integral_3pt_m1 = integrate(integrand_3pt_m1, { 0.0, 0.0, 0.0 }, { sigma_0, 1.0, 1.0 }, cubature::Config());
                surface_3pt_m1  = 0.0
                                - integrate(surface_3pt_A_m1, { 0.0, 0.0 }, { 1.0, 1.0 }, cubature::Config()) // integrate over x_1 and x_2
                                - integrate<GSL::QAGS>(surface_3pt_B_m1, 0.0, 1.0)                            // integrate over x_1
                                - integrate<GSL::QAGS>(surface_3pt_C_m1, 0.0, 1.0)                            // integrate over x_2
                                - surface_V_3pt_D_m1(sigma_0, q2);
            }
            const double numerator       = integral_2pt_m1 + surface_2pt_m1 + integral_3pt_m1 + surface_3pt_m1;

            const double integral_2pt    = integrate<GSL::QAGS>(integrand_2pt, 0.0, sigma_0);
            const double surface_2pt     = 0.0 - surface_V_2pt(sigma_0, q2);

            double integral_3pt    = 0.0;
            double surface_3pt     = 0.0;

            if (switch_3pt != 0.0)
            {
                const std::function<double (const double &)> surface_3pt_B    = std::bind(&Implementation::surface_V_3pt_B, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const double &)> surface_3pt_C    = std::bind(&Implementation::surface_V_3pt_C, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const std::array<double, 3> &)> integrand_3pt = std::bind(&Implementation::integrand_V_3pt, this, std::placeholders::_1, q2);
                const std::function<double (const std::array<double, 2> &)> surface_3pt_A = std::bind(&Implementation::surface_V_3pt_A, this, std::placeholders::_1, sigma_0, q2);

                integral_3pt    = integrate(integrand_3pt, { 0.0, 0.0, 0.0 }, { sigma_0, 1.0, 1.0 }, cubature::Config());
                surface_3pt     = 0.0
                                - integrate(surface_3pt_A, { 0.0, 0.0 }, { 1.0, 1.0 }, cubature::Config()) // integrate over x_1 and x_2
                                - integrate<GSL::QAGS>(surface_3pt_B, 0.0, 1.0)                            // integrate over x_1
                                - integrate<GSL::QAGS>(surface_3pt_C, 0.0, 1.0)                            // integrate over x_2
                                - surface_V_3pt_D(sigma_0, q2);
            }
            const double denominator     = integral_2pt + surface_2pt + integral_3pt + surface_3pt;

            return numerator / denominator;
        }
        // }}}

        /* T_1 : 2-particle functions */
        // {{{

        inline
        double I1_T1_2pt_phi_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to T1 proportional to phi_+

            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v();

            const double phi_plus  = this->phi_plus(sigma * m_B);

            const double C_1 = - 1.0 - m_v / (m_B * sigmabar);

            return C_1 * phi_plus;
        }

        inline
        double I2_T1_2pt_phi_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to T1 proportional to phibar
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v();

            const double phi_bar  = this->phi_bar(sigma * m_B);

            const double C_2 = - m_v * (m_v + m_B * sigmabar) / (m_B * power_of<2>(sigmabar));

            return C_2 * phi_bar;
        }

        inline
        double I2_T1_2pt_g_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to T1 proportional to g_+
            const double sigmabar = 1.0 - sigma;

            const double g_plus   = this->g_plus(sigma * m_B);

            const double C_2 = -4.0 / sigmabar;

            return C_2 * g_plus;
        }

        inline
        double I3_T1_2pt_g_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to T1 proportional to g_+
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_plus    = this->g_plus(sigma * m_B);

            const double C_3 = 8.0 * m_v2 * (m_v + m_B * sigmabar) / (m_B * power_of<3>(sigmabar));

            return C_3 * g_plus;
        }

        inline
        double I3d1_T1_2pt_g_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to T1 proportional to g_+
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_plus    = this->g_plus(sigma * m_B);
            const double g_plus_d1 = this->g_plus_d1(sigma * m_B);

            const double C_3   = 8.0 * m_v2 * (m_v + m_B * sigmabar) / (power_of<3>(sigmabar));
            const double C_3d1 = 8.0 * m_v2 * (3.0 * m_v + 2.0 * m_B * sigmabar) / (m_B * power_of<4>(sigmabar));

            return C_3 * g_plus_d1 + C_3d1 * g_plus;
        }

        inline
        double I2_T1_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to T1 proportional to gbar
            const double sigmabar = 1.0 - sigma;

            const double g_bar    = this->g_bar(sigma * m_B);

            const double C_2 = -4.0 / (m_B * power_of<2>(sigmabar));

            return C_2 * g_bar;
        }

        inline
        double I3_T1_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to T1 proportional to gbar
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v();

            const double g_bar    = this->g_bar(sigma * m_B);

            const double C_3 = 8.0 * power_of<2>(m_v) / (m_B * power_of<3>(sigmabar));

            return C_3 * g_bar;
        }

        inline
        double I3d1_T1_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to T1 proportional to gbar
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v();

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);

            const double C_3   = 8.0 * power_of<2>(m_v) / (power_of<3>(sigmabar));
            const double C_3d1 = 24.0 * power_of<2>(m_v) / (m_B * power_of<4>(sigmabar));

            return C_3 * g_bar_d1 + C_3d1 * g_bar;
        }

        inline
        double I4_T1_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to T1 proportional to gbar
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v3 = power_of<3>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);

            const double C_4 = 24.0 * m_v3 * (m_v + m_B * sigmabar) / (m_B * power_of<4>(sigmabar));

            return C_4 * g_bar;
        }

        inline
        double I4d1_T1_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to T1 proportional to gbar
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v3 = power_of<3>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);

            const double C_4   = 24.0 * m_v3 * (m_v + m_B * sigmabar) / (power_of<4>(sigmabar));
            const double C_4d1 = 24.0 * m_v3 * (4.0 * m_v + 3.0 * m_B * sigmabar) / (m_B * power_of<5>(sigmabar));

            return C_4 * g_bar_d1 + C_4d1 * g_bar;
        }

        inline
        double I4d2_T1_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to T1 proportional to gbar
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v3 = power_of<3>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);
            const double g_bar_d2 = this->g_bar_d2(sigma * m_B);

            const double C_4   = 24.0 * m_v3 * (m_v + m_B * sigmabar) / (power_of<4>(sigmabar)) * m_B;
            const double C_4d1 = 48.0 * m_v3 * (4.0 * m_v + 3.0 * m_B * sigmabar) / (power_of<5>(sigmabar));
            const double C_4d2 = 96.0 * m_v3 * (5.0 * m_v + 3.0 * m_B * sigmabar) / (m_B * power_of<6>(sigmabar));

            return C_4 * g_bar_d2 + C_4d1 * g_bar_d1 + C_4d2 * g_bar;
        }
        // }}}

        /* T1 : 3-particle functions */
        // {{{
        double I2_T1_3pt_phi_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to phi_3
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_3 = this->phi_3(omega_1, omega_2);

            const double C_2 = (m_v + m_B * u * sigmabar) / (m_B * power_of<2>(sigmabar));

            return C_2 * phi_3;
        }

        double I2_T1_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to phi_bar_3
            const double m_v      = this->m_v();
            const double m_B2     = power_of<2>(m_B);
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_2 = (2.0 * m_v - m_B * u * sigmabar) / (m_B2 * power_of<3>(sigmabar));

            return C_2 * phi_bar_3;
        }

        double I3_T1_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to phi_bar_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = 2.0 * (m_v + m_B * u * sigmabar) * (m_v2 - q2 + m_B2 * sigmabar2)
                             / (m_B2 * power_of<4>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I3d1A_T1_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to phi_bar_3
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = 2.0 * (4.0 * m_v3 * omega_2 + 2.0 * m_v * omega_2 * (m_B2 * sigmabar2 - 2.0 * q2) +
                               m_B * m_v2 * sigmabar * (-(3.0 * omega_1) + 3.0 * m_B * sigma + m_B * sigmabar) +
                               m_B * sigmabar * (-(m_B2 * omega_1 * sigmabar2) + m_B3 * sigmabar3 + 3.0 * omega_1 * q2 +
                               m_B3 * sigmabar2 * sigma - 3.0 * m_B * q2 * sigma - m_B * q2 * sigmabar))
                             / (m_B2 * omega_2 * power_of<5>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I3d1B_T1_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T1 proportional to phi_bar_3
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = -2.0 * (m_v + m_B * sigmabar) * (m_v2 - q2 + m_B2 * sigmabar2)
                             / (m_B * (-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I3d1C_T1_3pt_phi_bar_3(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to phi_bar_3
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = 2.0 * m_v * (m_v2 - q2 + m_B2 * sigmabar2) / (m_B * omega_2 * power_of<4>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I3_T1_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to phi_bar_bar_3
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_3 = 6.0 * m_v * u / (m_B * power_of<3>(sigmabar));

            return C_3 * phi_bar_bar_3;
        }

        double I3d1A_T1_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to phi_bar_bar_3
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_3 = 6.0 * m_v * (3.0 * sigma * m_B + m_B * sigmabar - 3.0 * omega_1)
                             / (m_B * omega_2 * power_of<4>(sigmabar));

            return C_3 * phi_bar_bar_3;
        }

        double I3d1B_T1_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to phi_bar_bar_3
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_3 = -6.0 * m_v / ((-omega_1 + m_B * sigma) * power_of<3>(sigmabar));

            return C_3 * phi_bar_bar_3;
        }

        double I3d1C_T1_3pt_phi_bar_bar_3(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to phi_bar_bar_3

            return 0.0;
        }

        double I4_T1_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to phi_bar_bar_3
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = 6.0 * m_v2 * u * (m_v + m_B * (-1.0 + 2.0 * u) * sigmabar)
                             / (m_B * power_of<4>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d1A_T1_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to phi_bar_bar_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = 6.0 * m_v2 * (m_B * (-(8.0 * m_B2 * sigma3) + 4.0 * m_v * omega_2 * sigma +
                               m_B * (4.0 * m_B - 3.0 * omega_2) * sigma * sigmabar + 2.0 * m_B2 * sigma2 * (4.0 - 3.0 * sigmabar) +
                               omega_2 * sigmabar * (m_v - m_B * sigmabar)) +
                               omega_1 * (-(4.0 * m_v * omega_2) + m_B *
                              (3.0 * omega_2 * sigmabar - 16.0 * m_B * sigma * sigmabar + m_B * (-4.0 + 8.0 * sigma) * sigmabar)) -
                               2.0 * m_B * (-4.0 + 4.0 * sigma + sigmabar) * power_of<2>(omega_1))
                             / (m_B * power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d1B_T1_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to phi_bar_bar_3
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = - 6.0 * m_v2 * (m_v + m_B * sigmabar) / (power_of<4>(sigmabar) * omega_2);

            return C_4 * phi_bar_bar_3;
        }

        double I4d1C_T1_3pt_phi_bar_bar_3(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to phi_bar_bar_3

            return 0.0;
        }
        double I4d2A_T1_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to phi_bar_bar_3
            const double m_B3     = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3  = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = 12.0 * m_v2 * (-(10.0 * m_v * omega_1 * omega_2) - 20.0 * m_B3 * sigma3 + 4.0 * m_B3 * sigma2 * (5.0 - 6.0 * sigmabar) +
                               m_B * sigmabar * (4.0 * m_v * omega_2 + m_B * (2.0 * m_B - 3.0 * omega_2) * sigmabar) +
                               2.0 * m_B * omega_1 * (20.0 * m_B * sigma2 + 3.0 * omega_2 * sigmabar +
                               2.0 * m_B * sigmabar * (-4.0 + sigmabar) + 4.0 * m_B * sigma * (-5.0 + 4.0 * sigmabar)) +
                               2.0 * m_B * sigma * (5.0 * m_v * omega_2 + m_B * sigmabar * (-(3.0 * omega_2) + m_B * (8.0 - 3.0 * sigmabar))) -
                               4.0 * m_B * (-5.0 + 5.0 * sigma + 2.0 * sigmabar) * power_of<2>(omega_1))
                             / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d2B_T1_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to phi_bar_bar_3
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_3     = this->phi_bar_3(omega_1, omega_2);
            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            return  -(6.0 * m_v2 * pow(omega_1 - m_B * sigma,-2.0) * pow(sigmabar,-5.0) *
                     (2.0 * (-(4.0 * m_v * omega_1) + m_B * (m_B - 3.0 * omega_1) * sigmabar +
                      2.0 * m_B * sigma * (2.0 * m_v + m_B * sigmabar)) * phi_bar_bar_3 +
                      m_B * (-omega_1 + m_B * sigma) * sigmabar * (m_v + m_B * sigmabar) * phi_bar_3));
        }

        double I4d2C_T1_3pt_phi_bar_bar_3(const double & sigma, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to phi_bar_bar_3
            const double omega_1  = m_B * sigma;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = 6.0 * m_B * m_v2 * (m_v - m_B * sigmabar) / (power_of<2>(omega_2) * power_of<4>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d2D_T1_3pt_phi_bar_bar_3(const double & sigma, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to phi_bar_bar_3
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_3     = this->phi_bar_3(omega_1, omega_2);
            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            return    6.0 * m_v2 * pow(sigmabar,-4.0)
                    * (phi_bar_bar_3
                    - (m_v + m_B * sigmabar) * phi_bar_3);
        }

        double I2_T1_3pt_phi_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to phi_4
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_4 = this->phi_4(omega_1, omega_2);

            const double C_2 = (u - 1.0) / sigmabar;

            return C_2 * phi_4;
        }

        double I2_T1_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to phi_bar_4
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_2 = u / (m_B * sigmabar2);

            return C_2 * phi_bar_4;
        }

        double I3_T1_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to phi_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * (q2 * (-1.0 + u) + (m_v + m_B * sigmabar) * (m_v * u - m_B * (-1.0 + u) * sigmabar))
                             / (m_B * power_of<3>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I3d1A_T1_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to phi_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = (4.0 * m_B * sigma3 * q2 + sigma2 * q2 * (-(2.0 * (2.0 * omega_1 + omega_2)) + m_B * (-4.0 + 5.0 * sigmabar)) +
                                2.0 * sigmabar * (3.0 * m_v2 * omega_1 - m_B2 * (omega_1 + omega_2) * sigmabar2 + m_B3 * sigmabar3 -
                                m_B * m_v * (m_v + 2.0 * omega_2) * sigmabar + q2 * (3.0 * omega_1 + 3.0 * omega_2 - m_B * sigmabar)) +
                                sigma * (2.0 * m_B3 * sigmabar3 - 6.0 * m_B * m_v2 * sigmabar +
                                q2 * (4.0 * omega_1 - 2.0 * omega_2 * (-1 + sigmabar) - 4.0 * omega_1 * sigmabar +
                                m_B * sigmabar * (-7.0 + sigmabar))))
                             / (m_B * omega_2 * power_of<5>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I3d1B_T1_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T1 proportional to phi_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = (-sigma * sigma * q2 + 4.0 * m_v * sigmabar * (m_v + m_B * sigmabar) + sigma * (q2 - q2 * sigmabar))
                             / (2.0 * (-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I3d1C_T1_3pt_phi_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to phi_bar_4
            const double omega_1  = m_B * sigma;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = -(sigma * sigma * q2 + sigma * q2 * (-1.0 + sigmabar) + 4.0 * sigmabar * (-q2 + m_B * sigmabar * (m_v + m_B * sigmabar)))
                             / (2.0 * omega_2 * power_of<4>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I2_T1_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to phi_bar_bar_4
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_2 = 2.0 * u * (-1.0 + 2.0 * u) / (power_of<2>(m_B) * power_of<3>(sigmabar));

            return C_2 * phi_bar_bar_4;
        }

        double I3_T1_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * u * (m_v2 * (-2.0 + 4.0 * u) + m_B * m_v * sigmabar + (-1.0 + 2.0 * u) * (q2 - m_B2 * sigmabar2))
                             / (m_B2 * power_of<4>(sigmabar));

            return C_3 * phi_bar_bar_4;
        }

        double I3d1A_T1_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B),   m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(),   m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma), sigma4   = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (8.0 * m_B4 * sigma4 - 4.0 * omega_1 * (2.0 * omega_1 + omega_2) * (2.0 * m_v2 + q2) -
                               m_B3 * (4.0 * omega_1 + omega_2) * sigmabar +
                               m_B * (3.0 * m_v * omega_1 * omega_2 + 2.0 * m_v2 * (4.0 * omega_1 + omega_2) +
                              (4.0 * omega_1 + omega_2) * q2) * sigmabar +
                               4.0 * m_B3 * sigma3 * (-(4.0 * omega_1) - omega_2 + 2.0 * m_B * (-2.0 + sigmabar)) -
                               m_B2 * (m_v * omega_2 * sigmabar2 + 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-2.0 + sigmabar)) +
                               m_B2 * sigma2 * (4.0 * omega_1 * (2.0 * omega_1 + omega_2) - 8.0 * (2.0 * m_v2 + q2) +
                               m_B2 * (8.0 - 12.0 * sigmabar) - m_B * (4.0 * omega_1 + omega_2) * (-8.0 + 3.0 * sigmabar)) +
                               m_B * sigma * (4.0 * (4.0 * omega_1 + omega_2) * (2.0 * m_v2 + q2) +
                               4.0 * m_B2 * (4.0 * omega_1 + omega_2) * (-1 + sigmabar) + 4.0 * m_B3 * sigmabar +
                               m_B * (-(8.0 * m_v2 * sigmabar) - 3.0 * m_v * omega_2 * sigmabar - 4.0 * q2 * sigmabar +
                               2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-4.0 + sigmabar))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_3 * phi_bar_bar_4;
        }

        double I3d1B_T1_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T1 proportional to phi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (2.0 * m_v2 + q2 + m_B * m_v * sigmabar - m_B2 * sigmabar2)
                             / (m_B * (-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * phi_bar_bar_4;
        }

        double I3d1C_T1_3pt_phi_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to phi_bar_bar_4

            return 0.0;
        }

        double I4_T1_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to phi_bar_bar_4
            const double m_B3     = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar3 = power_of<3>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * m_v * u * (m_v * m_v2 * (-1.0 + 2.0 * u) + m_v * (q2 - 2.0 * q2 * u) - m_B * q2 * sigmabar + m_B3 * sigmabar3)
                             / (power_of<2>(m_B) * power_of<5>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d1A_T1_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(2.0 * m_v * (-24 * m_B2 * m_v * sigma4 * q2 +
                                 4.0 * m_B * sigma3 * (3.0 * m_B3 * omega_2 * sigmabar2 + 3.0 * m_v * (4.0 * omega_1 + omega_2) * q2 +
                                 m_B * m_v * q2 * (6.0 - 19.0 * sigmabar)) +
                                 sigma2 * (-(12.0 * m_B3 * omega_1 * omega_2 * sigmabar2) -
                                 12.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * q2 +
                                 2.0 * m_B2 * m_v * (15.0 * m_v2 + q2 * (11.0 - 34 * sigmabar)) * sigmabar +
                                 12.0 * m_B * m_v * (4.0 * omega_1 + omega_2) * q2 * (-1.0 + 3.0 * sigmabar) +
                                 3.0 * m_B4 * omega_2 * sigmabar2 * (-8.0 + 3.0 * sigmabar)) -
                                 sigma * (12.0 * m_B4 * omega_2 * sigmabar2 * (-1 + sigmabar) +
                                 m_B * m_v * (4.0 * omega_1 + omega_2) * (15.0 * m_v2 + q2 * (9.0 - 28.0 * sigmabar)) * sigmabar +
                                 6.0 * m_B3 * omega_1 * omega_2 * sigmabar2 * (-4.0 + sigmabar) +
                                 2.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (-6.0 + 17.0 * sigmabar) +
                                 4.0 * m_B2 * sigmabar2 * (-(3.0 * m_v3) + 3.0 * omega_2 * q2 + m_v * q2 * (-1.0 + 4.0 * sigmabar))) +
                                 sigmabar * (3.0 * m_B4 * omega_2 * sigmabar2 - 3.0 * m_B2 * omega_2 * sigmabar2 * q2 +
                                 m_v * omega_1 * (2.0 * omega_1 + omega_2) * (15.0 * m_v2 + q2 * (7.0 - 22 * sigmabar)) +
                                 6.0 * m_B3 * omega_1 * omega_2 * sigmabar * (-2.0 + sigmabar) +
                                 m_B * sigmabar * (-(3.0 * m_v3 * (4.0 * omega_1 + omega_2)) + 12.0 * omega_1 * omega_2 * q2 +
                                 m_v * (4.0 * omega_1 + omega_2) * q2 * (-1 + 4.0 * sigmabar)))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d1B_T1_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T1 proportional to phi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B3     = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * m_v * (sigmabar2 * (3.0 * m_B3 * sigmabar2 - 3.0 * m_B * q2 - 4.0 * m_v * q2) +
                               2.0 * m_v * q2 * sigma * sigmabar + m_v * (3.0 * m_v2 + q2 - 6.0 * q2 * sigma) * sigmabar)
                             / (m_B * power_of<6>(sigmabar) * omega_2);

            return C_4 * phi_bar_bar_4;
        }

        double I4d1C_T1_3pt_phi_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to phi_bar_bar_4

            return 0.0;
        }
        double I4d2A_T1_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 4.0 * m_v * (84.0 * m_B2 * m_v * sigma4 * q2 + 2.0 * m_B * sigma3 *
                              (m_B3 * (m_v - 15.0 * omega_2) * sigmabar2 - 21.0 * m_v * (4.0 * omega_1 + omega_2) * q2 +
                               6.0 * m_B * m_v * q2 * (-7.0 + 23.0 * sigmabar)) +
                               sigma2 * (m_B3 * (30 * omega_1 * omega_2 - m_v * (4.0 * omega_1 + omega_2)) * sigmabar2 +
                               42.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * q2 -
                               2.0 * m_B2 * m_v * (45 * m_v2 + q2 * (51.0 - 142.0 * sigmabar)) * sigmabar -
                               42.0 * m_B * m_v * (4.0 * omega_1 + omega_2) * q2 * (-1 + 3.0 * sigmabar) +
                               2.0 * m_B4 * sigmabar2 * (m_v * (-1 + sigmabar) + 6.0 * omega_2 * (5.0 - 3.0 * sigmabar))) +
                               sigma * (m_B * m_v * (4.0 * omega_1 + omega_2) * (45 * m_v2 + q2 * (39 - 106 * sigmabar)) * sigmabar +
                               6.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (-7.0 + 19.0 * sigmabar) +
                               m_B2 * sigmabar2 * (-60 * m_v3 + m_v * omega_1 * (2.0 * omega_1 + omega_2) + 30.0 * omega_2 * q2 +
                               4.0 * m_v * q2 * (-8.0 + 25.0 * sigmabar)) +
                               m_B3 * sigmabar2 * (-(m_v * (4.0 * omega_1 + omega_2) * (-1 + sigmabar)) +
                               12.0 * omega_1 * omega_2 * (-5.0 + 2.0 * sigmabar)) -
                               3.0 * m_B4 * omega_2 * sigmabar2 * (10.0 + sigmabar * (-16.0 + 3.0 * sigmabar))) +
                               sigmabar * (6.0 * m_B4 * omega_2 * sigmabar2 * (-2.0 + sigmabar) +
                               3.0 * m_B3 * omega_1 * omega_2 * sigmabar * (10.0 + sigmabar * (-8.0 + sigmabar)) +
                               m_B * sigmabar * (15.0 * m_v3 * (4.0 * omega_1 + omega_2) - 30.0 * omega_1 * omega_2 * q2 -
                               m_v * (4.0 * omega_1 + omega_2) * q2 * (-7.0 + 22.0 * sigmabar)) +
                               m_B2 * sigmabar * (m_v * omega_1 * (2.0 * omega_1 + omega_2) * (-1 + sigmabar) - 6.0 * m_v3 * sigmabar +
                               12.0 * omega_2 * q2 * sigmabar + 2.0 * m_v * q2 * sigmabar * (-1 + 4.0 * sigmabar)) -
                               9.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * (5.0 * m_v2 + q2 * (3.0 - 8.0 * sigmabar))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<8>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d2B_T1_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T1 proportional to phi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double phi_bar_4     = this->phi_bar_4(omega_1, omega_2);
            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            return  2.0 * m_v * (2.0 * (omega_1 * (6.0 * m_B3 * sigmabar4 +
                    2.0 * sigmabar2 * (-(6.0 * m_B3 * sigmabar2) + 6.0 * m_B * q2 + 11.0 * m_v * q2) -
                    15.0 * m_v3 * sigmabar - 12.0 * m_v * q2 * sigma * sigmabar + m_v * q2 * (-7.0 + 34 * sigma) * sigmabar) +
                    m_B * (sigmabar2 * (3.0 * m_v3 + 12.0 * m_B3 * sigmabar2 * sigma +
                    q2 * (m_v - 4.0 * (3.0 * m_B + 7.0 * m_v) * sigma)) + 12.0 * m_v * sigma2 * q2 * sigmabar +
                    3.0 * m_v * sigma * (5.0 * m_v2 + 3.0 * q2 * (1 - 4.0 * sigma)) * sigmabar +
                    2.0 * sigmabar3 * (-(2.0 * m_v * q2) - 3.0 * m_B3 * sigma * sigmabar))) * phi_bar_bar_4 +
                    m_B * (-omega_1 + m_B * sigma) * sigmabar * (sigmabar2 *
                   (3.0 * m_B3 * sigmabar2 - 3.0 * m_B * q2 - 4.0 * m_v * q2) + 2.0 * m_v * q2 * sigma * sigmabar +
                    m_v * (3.0 * m_v2 + q2 - 6.0 * q2 * sigma) * sigmabar) * phi_bar_4)
                   / (m_B * power_of<2>(omega_2) * power_of<7>(sigmabar));
        }

        double I4d2C_T1_3pt_phi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to phi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * m_v * (sigmabar2 * (-(3.0 * m_B3 * sigmabar2) + 3.0 * m_B * q2 - 4.0 * m_v * q2) +
                               2.0 * m_v * q2 * sigma * sigmabar + m_v * (3.0 * m_v2 + q2 - 6.0 * q2 * sigma) * sigmabar) * pow(omega_2,-2.0) * pow(sigmabar,-6.0);

            return C_4 * phi_bar_bar_4;
        }

        double I4d2D_T1_3pt_phi_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to T1 proportional to phi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double phi_bar_4     = this->phi_bar_4(omega_1, omega_2);
            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            return   2.0 * m_v * ((-(6.0 * m_B3 * sigmabar4) - 6.0 * m_v * sigmabar2 * q2 + 3.0 * m_v3 * sigmabar + 4.0 * m_v * q2 * sigma * sigmabar +
                     m_v * q2 * (3.0 - 10.0 * sigma) * sigmabar) * phi_bar_bar_4 +
                     m_B * sigmabar * (sigmabar2 * (3.0 * m_B3 * sigmabar2 - 3.0 * m_B * q2 - 4.0 * m_v * q2) +
                     2.0 * m_v * q2 * sigma * sigmabar + m_v * (3.0 * m_v2 + q2 - 6.0 * q2 * sigma) * sigmabar) * phi_bar_4)
                   / (m_B2 * power_of<7>(sigmabar));
        }

        double I2_T1_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to psi_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_2 = -(2.0 * m_v + m_B * (-1.0 + 2.0 * u) * sigmabar) / (power_of<2>(m_B) * power_of<3>(sigmabar));

            return C_2 * psi_bar_4;
        }

        double I3_T1_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to psi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * (m_v2 * m_v + m_B * m_v2 * (1.0 - 2.0 * u) * sigmabar + m_B * (-1.0 + 2.0 * u) * sigmabar *
                               (-q2 + m_B2 * sigmabar2) - m_v * (q2 + m_B2 * sigmabar2))
                             / (m_B2 * power_of<4>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I3d1A_T1_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to psi_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = -(2.0 * (4.0 * m_v3 * omega_2 + 4.0 * m_B2 * sigma3 * q2 -
                                2.0 * m_v * omega_2 * (m_B2 * sigmabar2 + 2.0 * q2) +
                                m_B * m_v2 * sigmabar * (6.0 * omega_1 + 3.0 * omega_2 - 2.0 * m_B * sigmabar) +
                                m_B * q2 * sigmabar * (6.0 * omega_1 + 3.0 * omega_2 - 2.0 * m_B * sigmabar) +
                                m_B3 * sigmabar3 * (-(2.0 * omega_1) - omega_2 + 2.0 * m_B * sigmabar) +
                                m_B * sigma2 * q2 * (-(2.0 * (2.0 * omega_1 + omega_2)) + m_B * (-4.0 + 5.0 * sigmabar)) +
                                m_B * sigma * (2.0 * m_B3 * sigmabar3 - 6.0 * m_B * m_v2 * sigmabar +
                                q2 * (4.0 * omega_1 - 2.0 * omega_2 * (-1 + sigmabar) - 4.0 * omega_1 * sigmabar +
                                m_B * sigmabar * (-7.0 + sigmabar)))))
                             / (m_B2 * omega_2 * power_of<5>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I3d1B_T1_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T1 proportional to psi_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = (2.0 * m_v3 + 2.0 * m_B3 * sigmabar3 - 2.0 * m_v * (m_B2 * sigmabar2 + q2) - 2.0 * m_B * m_v2 * sigmabar -
                                m_B * q2 * sigma * sigmabar + m_B * q2 * (-2.0 + sigma) * sigmabar)
                             / (m_B * (-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I3d1C_T1_3pt_psi_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to psi_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = (-(2.0 * m_v3) + 2.0 * m_B3 * sigmabar3 + 2.0 * m_v * (m_B2 * sigmabar2 + q2) - 2.0 * m_B * m_v2 * sigmabar -
                                m_B * q2 * sigma * sigmabar + m_B * q2 * (-2.0 + sigma) * sigmabar)
                             / (m_B * omega_2 * power_of<4>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I3_T1_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to psi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 6.0 * m_v * u / (m_B * power_of<3>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1A_T1_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to psi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 6.0 * m_v * (3.0 * sigma * m_B + m_B * sigmabar - 3.0 * omega_1)
                             / (m_B * omega_2 * power_of<4>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1B_T1_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -6.0 * m_v / ((-omega_1 + m_B * sigma) * power_of<3>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1C_T1_3pt_psiA_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to psi_bar_bar_4

            return 0.0;
        }

        double I4_T1_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to psi_bar_bar_4
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_v2 * u * (m_v + m_B * (-1.0 + 2.0 * u) * sigmabar)
                             / (m_B * power_of<4>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1A_T1_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_v2 * (m_B * (-(8.0 * m_B2 * sigma3) + 4.0 * m_v * omega_2 * sigma +
                               m_B * (4.0 * m_B - 3.0 * omega_2) * sigma * sigmabar + 2.0 * m_B2 * sigma2 * (4.0 - 3.0 * sigmabar) +
                               omega_2 * sigmabar * (m_v - m_B * sigmabar)) +
                               omega_1 * (-(4.0 * m_v * omega_2) + m_B *
                              (3.0 * omega_2 * sigmabar - 16.0 * m_B * sigma * sigmabar + m_B * (-4.0 + 8.0 * sigma) * sigmabar)) -
                               2.0 * m_B * (-4.0 + 4.0 * sigma + sigmabar) * power_of<2>(omega_1))
                             / (m_B * power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1B_T1_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = - 6.0 * m_v2 * (m_v + m_B * sigmabar) / (power_of<4>(sigmabar) * omega_2);

            return C_4 * psi_bar_bar_4;
        }

        double I4d1C_T1_3pt_psiA_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to psi_bar_bar_4

            return 0.0;
        }
        double I4d2A_T1_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to psi_bar_bar_4
            const double m_B3     = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3  = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 12.0 * m_v2 * (-(10.0 * m_v * omega_1 * omega_2) - 20.0 * m_B3 * sigma3 + 4.0 * m_B3 * sigma2 * (5.0 - 6.0 * sigmabar) +
                               m_B * sigmabar * (4.0 * m_v * omega_2 + m_B * (2.0 * m_B - 3.0 * omega_2) * sigmabar) +
                               2.0 * m_B * omega_1 * (20.0 * m_B * sigma2 + 3.0 * omega_2 * sigmabar +
                               2.0 * m_B * sigmabar * (-4.0 + sigmabar) + 4.0 * m_B * sigma * (-5.0 + 4.0 * sigmabar)) +
                               2.0 * m_B * sigma * (5.0 * m_v * omega_2 + m_B * sigmabar * (-(3.0 * omega_2) + m_B * (8.0 - 3.0 * sigmabar))) -
                               4.0 * m_B * (-5.0 + 5.0 * sigma + 2.0 * sigmabar) * power_of<2>(omega_1))
                             / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2B_T1_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_4     = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return  -(6.0 * m_v2 * pow(omega_1 - m_B * sigma,-2.0) * pow(sigmabar,-5.0) *
                     (2.0 * (-(4.0 * m_v * omega_1) + m_B * (m_B - 3.0 * omega_1) * sigmabar +
                      2.0 * m_B * sigma * (2.0 * m_v + m_B * sigmabar)) * psi_bar_bar_4 +
                      m_B * (-omega_1 + m_B * sigma) * sigmabar * (m_v + m_B * sigmabar) * psi_bar_4));
        }

        double I4d2C_T1_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_B * m_v2 * (m_v - m_B * sigmabar) / (power_of<2>(omega_2) * power_of<4>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2D_T1_3pt_psiA_bar_bar_4(const double & sigma, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_4     = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return    6.0 * m_v2 * pow(sigmabar,-4.0)
                    * (psi_bar_bar_4
                    - (m_v + m_B * sigmabar) * psi_bar_4);
        }

        double I2_T1_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to psi_bar_bar_4
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_2 = 2.0 * u * (-1.0 + 2.0 * u) / (power_of<2>(m_B) * power_of<3>(sigmabar));

            return C_2 * psi_bar_bar_4;
        }

        double I3_T1_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * u * (m_v2 * (-2.0 + 4.0 * u) + m_B * m_v * sigmabar + (-1.0 + 2.0 * u) * (q2 - m_B2 * sigmabar2))
                             / (m_B2 * power_of<4>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1A_T1_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B),   m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(),   m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma), sigma4   = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (8.0 * m_B4 * sigma4 - 4.0 * omega_1 * (2.0 * omega_1 + omega_2) * (2.0 * m_v2 + q2) -
                               m_B3 * (4.0 * omega_1 + omega_2) * sigmabar +
                               m_B * (3.0 * m_v * omega_1 * omega_2 + 2.0 * m_v2 * (4.0 * omega_1 + omega_2) +
                              (4.0 * omega_1 + omega_2) * q2) * sigmabar +
                               4.0 * m_B3 * sigma3 * (-(4.0 * omega_1) - omega_2 + 2.0 * m_B * (-2.0 + sigmabar)) -
                               m_B2 * (m_v * omega_2 * sigmabar2 + 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-2.0 + sigmabar)) +
                               m_B2 * sigma2 * (4.0 * omega_1 * (2.0 * omega_1 + omega_2) - 8.0 * (2.0 * m_v2 + q2) +
                               m_B2 * (8.0 - 12.0 * sigmabar) - m_B * (4.0 * omega_1 + omega_2) * (-8.0 + 3.0 * sigmabar)) +
                               m_B * sigma * (4.0 * (4.0 * omega_1 + omega_2) * (2.0 * m_v2 + q2) +
                               4.0 * m_B2 * (4.0 * omega_1 + omega_2) * (-1 + sigmabar) + 4.0 * m_B3 * sigmabar +
                               m_B * (-(8.0 * m_v2 * sigmabar) - 3.0 * m_v * omega_2 * sigmabar - 4.0 * q2 * sigmabar +
                               2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-4.0 + sigmabar))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1B_T1_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T1 proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (2.0 * m_v2 + q2 + m_B * m_v * sigmabar - m_B2 * sigmabar2)
                             / (m_B * (-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1C_T1_3pt_psiB_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to psi_bar_bar_4

            return 0.0;
        }

        double I4_T1_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to psi_bar_bar_4
            const double m_B3     = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar3 = power_of<3>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * m_v * u * (m_v * m_v2 * (-1.0 + 2.0 * u) + m_v * (q2 - 2.0 * q2 * u) - m_B * q2 * sigmabar + m_B3 * sigmabar3)
                             / (power_of<2>(m_B) * power_of<5>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1A_T1_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(2.0 * m_v * (-24 * m_B2 * m_v * sigma4 * q2 +
                                 4.0 * m_B * sigma3 * (3.0 * m_B3 * omega_2 * sigmabar2 + 3.0 * m_v * (4.0 * omega_1 + omega_2) * q2 +
                                 m_B * m_v * q2 * (6.0 - 19.0 * sigmabar)) +
                                 sigma2 * (-(12.0 * m_B3 * omega_1 * omega_2 * sigmabar2) -
                                 12.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * q2 +
                                 2.0 * m_B2 * m_v * (15.0 * m_v2 + q2 * (11.0 - 34 * sigmabar)) * sigmabar +
                                 12.0 * m_B * m_v * (4.0 * omega_1 + omega_2) * q2 * (-1.0 + 3.0 * sigmabar) +
                                 3.0 * m_B4 * omega_2 * sigmabar2 * (-8.0 + 3.0 * sigmabar)) -
                                 sigma * (12.0 * m_B4 * omega_2 * sigmabar2 * (-1 + sigmabar) +
                                 m_B * m_v * (4.0 * omega_1 + omega_2) * (15.0 * m_v2 + q2 * (9.0 - 28.0 * sigmabar)) * sigmabar +
                                 6.0 * m_B3 * omega_1 * omega_2 * sigmabar2 * (-4.0 + sigmabar) +
                                 2.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (-6.0 + 17.0 * sigmabar) +
                                 4.0 * m_B2 * sigmabar2 * (-(3.0 * m_v3) + 3.0 * omega_2 * q2 + m_v * q2 * (-1.0 + 4.0 * sigmabar))) +
                                 sigmabar * (3.0 * m_B4 * omega_2 * sigmabar2 - 3.0 * m_B2 * omega_2 * sigmabar2 * q2 +
                                 m_v * omega_1 * (2.0 * omega_1 + omega_2) * (15.0 * m_v2 + q2 * (7.0 - 22 * sigmabar)) +
                                 6.0 * m_B3 * omega_1 * omega_2 * sigmabar * (-2.0 + sigmabar) +
                                 m_B * sigmabar * (-(3.0 * m_v3 * (4.0 * omega_1 + omega_2)) + 12.0 * omega_1 * omega_2 * q2 +
                                 m_v * (4.0 * omega_1 + omega_2) * q2 * (-1 + 4.0 * sigmabar)))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1B_T1_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T1 proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B3     = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * m_v * (sigmabar2 * (3.0 * m_B3 * sigmabar2 - 3.0 * m_B * q2 - 4.0 * m_v * q2) +
                               2.0 * m_v * q2 * sigma * sigmabar + m_v * (3.0 * m_v2 + q2 - 6.0 * q2 * sigma) * sigmabar)
                             / (m_B * power_of<6>(sigmabar) * omega_2);

            return C_4 * psi_bar_bar_4;
        }

        double I4d1C_T1_3pt_psiB_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to psi_bar_bar_4

            return 0.0;
        }
        double I4d2A_T1_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 4.0 * m_v * (84.0 * m_B2 * m_v * sigma4 * q2 + 2.0 * m_B * sigma3 *
                              (m_B3 * (m_v - 15.0 * omega_2) * sigmabar2 - 21.0 * m_v * (4.0 * omega_1 + omega_2) * q2 +
                               6.0 * m_B * m_v * q2 * (-7.0 + 23.0 * sigmabar)) +
                               sigma2 * (m_B3 * (30 * omega_1 * omega_2 - m_v * (4.0 * omega_1 + omega_2)) * sigmabar2 +
                               42.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * q2 -
                               2.0 * m_B2 * m_v * (45 * m_v2 + q2 * (51.0 - 142.0 * sigmabar)) * sigmabar -
                               42.0 * m_B * m_v * (4.0 * omega_1 + omega_2) * q2 * (-1 + 3.0 * sigmabar) +
                               2.0 * m_B4 * sigmabar2 * (m_v * (-1 + sigmabar) + 6.0 * omega_2 * (5.0 - 3.0 * sigmabar))) +
                               sigma * (m_B * m_v * (4.0 * omega_1 + omega_2) * (45 * m_v2 + q2 * (39 - 106 * sigmabar)) * sigmabar +
                               6.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (-7.0 + 19.0 * sigmabar) +
                               m_B2 * sigmabar2 * (-60 * m_v3 + m_v * omega_1 * (2.0 * omega_1 + omega_2) + 30.0 * omega_2 * q2 +
                               4.0 * m_v * q2 * (-8.0 + 25.0 * sigmabar)) +
                               m_B3 * sigmabar2 * (-(m_v * (4.0 * omega_1 + omega_2) * (-1 + sigmabar)) +
                               12.0 * omega_1 * omega_2 * (-5.0 + 2.0 * sigmabar)) -
                               3.0 * m_B4 * omega_2 * sigmabar2 * (10.0 + sigmabar * (-16.0 + 3.0 * sigmabar))) +
                               sigmabar * (6.0 * m_B4 * omega_2 * sigmabar2 * (-2.0 + sigmabar) +
                               3.0 * m_B3 * omega_1 * omega_2 * sigmabar * (10.0 + sigmabar * (-8.0 + sigmabar)) +
                               m_B * sigmabar * (15.0 * m_v3 * (4.0 * omega_1 + omega_2) - 30.0 * omega_1 * omega_2 * q2 -
                               m_v * (4.0 * omega_1 + omega_2) * q2 * (-7.0 + 22.0 * sigmabar)) +
                               m_B2 * sigmabar * (m_v * omega_1 * (2.0 * omega_1 + omega_2) * (-1 + sigmabar) - 6.0 * m_v3 * sigmabar +
                               12.0 * omega_2 * q2 * sigmabar + 2.0 * m_v * q2 * sigmabar * (-1 + 4.0 * sigmabar)) -
                               9.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * (5.0 * m_v2 + q2 * (3.0 - 8.0 * sigmabar))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<8>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2B_T1_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T1 proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double psi_bar_4     = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return  2.0 * m_v * (2.0 * (omega_1 * (6.0 * m_B3 * sigmabar4 +
                    2.0 * sigmabar2 * (-(6.0 * m_B3 * sigmabar2) + 6.0 * m_B * q2 + 11.0 * m_v * q2) -
                    15.0 * m_v3 * sigmabar - 12.0 * m_v * q2 * sigma * sigmabar + m_v * q2 * (-7.0 + 34 * sigma) * sigmabar) +
                    m_B * (sigmabar2 * (3.0 * m_v3 + 12.0 * m_B3 * sigmabar2 * sigma +
                    q2 * (m_v - 4.0 * (3.0 * m_B + 7.0 * m_v) * sigma)) + 12.0 * m_v * sigma2 * q2 * sigmabar +
                    3.0 * m_v * sigma * (5.0 * m_v2 + 3.0 * q2 * (1 - 4.0 * sigma)) * sigmabar +
                    2.0 * sigmabar3 * (-(2.0 * m_v * q2) - 3.0 * m_B3 * sigma * sigmabar))) * psi_bar_bar_4 +
                    m_B * (-omega_1 + m_B * sigma) * sigmabar * (sigmabar2 *
                   (3.0 * m_B3 * sigmabar2 - 3.0 * m_B * q2 - 4.0 * m_v * q2) + 2.0 * m_v * q2 * sigma * sigmabar +
                    m_v * (3.0 * m_v2 + q2 - 6.0 * q2 * sigma) * sigmabar) * psi_bar_4)
                   / (m_B * power_of<2>(omega_2) * power_of<7>(sigmabar));
        }

        double I4d2C_T1_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * m_v * (sigmabar2 * (-(3.0 * m_B3 * sigmabar2) + 3.0 * m_B * q2 - 4.0 * m_v * q2) +
                               2.0 * m_v * q2 * sigma * sigmabar + m_v * (3.0 * m_v2 + q2 - 6.0 * q2 * sigma) * sigmabar) * pow(omega_2,-2.0) * pow(sigmabar,-6.0);

            return C_4 * psi_bar_bar_4;
        }

        double I4d2D_T1_3pt_psiB_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to T1 proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double psi_bar_4     = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return   2.0 * m_v * ((-(6.0 * m_B3 * sigmabar4) - 6.0 * m_v * sigmabar2 * q2 + 3.0 * m_v3 * sigmabar + 4.0 * m_v * q2 * sigma * sigmabar +
                     m_v * q2 * (3.0 - 10.0 * sigma) * sigmabar) * psi_bar_bar_4 +
                     m_B * sigmabar * (sigmabar2 * (3.0 * m_B3 * sigmabar2 - 3.0 * m_B * q2 - 4.0 * m_v * q2) +
                     2.0 * m_v * q2 * sigma * sigmabar + m_v * (3.0 * m_v2 + q2 - 6.0 * q2 * sigma) * sigmabar) * psi_bar_4)
                   / (m_B2 * power_of<7>(sigmabar));
        }

        double I2_T1_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - 0.0                                                       - I2_T1_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3_T1_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I3_T1_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2)    - I3_T1_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1A_T1_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I3d1A_T1_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I3d1A_T1_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1B_T1_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return - I3d1B_T1_3pt_psiA_bar_bar_4( sigma, omega_1, q2)          - I3d1B_T1_3pt_psiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I3d1C_T1_3pt_psi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return - I3d1C_T1_3pt_psiA_bar_bar_4( sigma, omega_2, q2)          - I3d1C_T1_3pt_psiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4_T1_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I4_T1_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2)    - I4_T1_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1A_T1_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I4d1A_T1_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d1A_T1_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1B_T1_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return - I4d1B_T1_3pt_psiA_bar_bar_4( sigma, omega_1, q2)          - I4d1B_T1_3pt_psiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d1C_T1_3pt_psi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return - I4d1C_T1_3pt_psiA_bar_bar_4( sigma, omega_2, q2)          - I4d1C_T1_3pt_psiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2A_T1_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I4d2A_T1_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d2A_T1_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d2B_T1_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return - I4d2B_T1_3pt_psiA_bar_bar_4( sigma, omega_1, q2)          - I4d2B_T1_3pt_psiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d2C_T1_3pt_psi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return - I4d2C_T1_3pt_psiA_bar_bar_4( sigma, omega_2, q2)          - I4d2C_T1_3pt_psiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2D_T1_3pt_psi_bar_bar_4(const double & sigma, const double & q2) const
        {
            return - I4d2D_T1_3pt_psiA_bar_bar_4( sigma, q2)                   - I4d2D_T1_3pt_psiB_bar_bar_4(sigma, q2);
        }

        double I2_T1_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to chi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_2 =  (2.0 * m_v + m_B * (1.0 - 2.0 * u) * sigmabar) / (m_B2 * power_of<3>(sigmabar));

            return C_2 * chi_bar_4;
        }

        double I3_T1_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to chi_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (m_v3 - m_B * q2 * sigmabar + m_B * m_v2 * (-1.0 + 2.0 * u) * sigmabar + m_B3 * sigmabar3 + m_v * (-q2 + m_B2 * sigmabar2))
                             / (power_of<2>(m_B) * power_of<4>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I3d1A_T1_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to chi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (4.0 * m_v3 * omega_2 + 2.0 * m_v * omega_2 * (m_B2 * sigmabar2 - 2.0 * q2) +
                               m_B * omega_2 * (m_B2 * sigmabar2 - 3.0 * q2) * sigmabar +
                               m_B * m_v2 * sigmabar * (-(6.0 * omega_1) - 3.0 * omega_2 + 6.0 * m_B * sigma + 2.0 * m_B * sigmabar))
                             / (m_B2 * omega_2 * power_of<5>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I3d1B_T1_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T1 proportional to chi_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * (m_v + m_B * sigmabar) * (m_v2 - q2 + m_B2 * sigmabar2)
                             / (m_B * (-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I3d1C_T1_3pt_chi_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to chi_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (m_v3 - m_v * q2 - m_B * (m_v2 + q2) * sigmabar + m_B2 * m_v * sigmabar2 + m_B3 * sigmabar3)
                             / (m_B * omega_2 * power_of<4>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I3_T1_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to chi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 6.0 * m_v * u / (m_B * power_of<3>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1A_T1_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to chi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 6.0 * m_v * (3.0 * sigma * m_B + m_B * sigmabar - 3.0 * omega_1)
                             / (m_B * omega_2 * power_of<4>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1B_T1_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -6.0 * m_v / ((-omega_1 + m_B * sigma) * power_of<3>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1C_T1_3pt_chiA_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to chi_bar_bar_4

            return 0.0;
        }

        double I4_T1_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to chi_bar_bar_4
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_v2 * u * (m_v + m_B * (-1.0 + 2.0 * u) * sigmabar)
                             / (m_B * power_of<4>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1A_T1_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_v2 * (m_B * (-(8.0 * m_B2 * sigma3) + 4.0 * m_v * omega_2 * sigma +
                               m_B * (4.0 * m_B - 3.0 * omega_2) * sigma * sigmabar + 2.0 * m_B2 * sigma2 * (4.0 - 3.0 * sigmabar) +
                               omega_2 * sigmabar * (m_v - m_B * sigmabar)) +
                               omega_1 * (-(4.0 * m_v * omega_2) + m_B *
                              (3.0 * omega_2 * sigmabar - 16.0 * m_B * sigma * sigmabar + m_B * (-4.0 + 8.0 * sigma) * sigmabar)) -
                               2.0 * m_B * (-4.0 + 4.0 * sigma + sigmabar) * power_of<2>(omega_1))
                             / (m_B * power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1B_T1_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = - 6.0 * m_v2 * (m_v + m_B * sigmabar) / (power_of<4>(sigmabar) * omega_2);

            return C_4 * chi_bar_bar_4;
        }

        double I4d1C_T1_3pt_chiA_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to chi_bar_bar_4

            return 0.0;
        }
        double I4d2A_T1_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to chi_bar_bar_4
            const double m_B3     = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3  = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 12.0 * m_v2 * (-(10.0 * m_v * omega_1 * omega_2) - 20.0 * m_B3 * sigma3 + 4.0 * m_B3 * sigma2 * (5.0 - 6.0 * sigmabar) +
                               m_B * sigmabar * (4.0 * m_v * omega_2 + m_B * (2.0 * m_B - 3.0 * omega_2) * sigmabar) +
                               2.0 * m_B * omega_1 * (20.0 * m_B * sigma2 + 3.0 * omega_2 * sigmabar +
                               2.0 * m_B * sigmabar * (-4.0 + sigmabar) + 4.0 * m_B * sigma * (-5.0 + 4.0 * sigmabar)) +
                               2.0 * m_B * sigma * (5.0 * m_v * omega_2 + m_B * sigmabar * (-(3.0 * omega_2) + m_B * (8.0 - 3.0 * sigmabar))) -
                               4.0 * m_B * (-5.0 + 5.0 * sigma + 2.0 * sigmabar) * power_of<2>(omega_1))
                             / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2B_T1_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_4     = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return  -(6.0 * m_v2 * pow(omega_1 - m_B * sigma,-2.0) * pow(sigmabar,-5.0) *
                     (2.0 * (-(4.0 * m_v * omega_1) + m_B * (m_B - 3.0 * omega_1) * sigmabar +
                      2.0 * m_B * sigma * (2.0 * m_v + m_B * sigmabar)) * chi_bar_bar_4 +
                      m_B * (-omega_1 + m_B * sigma) * sigmabar * (m_v + m_B * sigmabar) * chi_bar_4));
        }

        double I4d2C_T1_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_B * m_v2 * (m_v - m_B * sigmabar) / (power_of<2>(omega_2) * power_of<4>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2D_T1_3pt_chiA_bar_bar_4(const double & sigma, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_4     = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return    6.0 * m_v2 * pow(sigmabar,-4.0)
                    * (chi_bar_bar_4
                    - (m_v + m_B * sigmabar) * chi_bar_4);
        }

        double I2_T1_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to chi_bar_bar_4
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_2 = 2.0 * u * (-1.0 + 2.0 * u) / (power_of<2>(m_B) * power_of<3>(sigmabar));

            return C_2 * chi_bar_bar_4;
        }

        double I3_T1_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * u * (m_v2 * (-2.0 + 4.0 * u) + m_B * m_v * sigmabar + (-1.0 + 2.0 * u) * (q2 - m_B2 * sigmabar2))
                             / (m_B2 * power_of<4>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1A_T1_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B),   m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(),   m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma), sigma4   = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (8.0 * m_B4 * sigma4 - 4.0 * omega_1 * (2.0 * omega_1 + omega_2) * (2.0 * m_v2 + q2) -
                               m_B3 * (4.0 * omega_1 + omega_2) * sigmabar +
                               m_B * (3.0 * m_v * omega_1 * omega_2 + 2.0 * m_v2 * (4.0 * omega_1 + omega_2) +
                              (4.0 * omega_1 + omega_2) * q2) * sigmabar +
                               4.0 * m_B3 * sigma3 * (-(4.0 * omega_1) - omega_2 + 2.0 * m_B * (-2.0 + sigmabar)) -
                               m_B2 * (m_v * omega_2 * sigmabar2 + 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-2.0 + sigmabar)) +
                               m_B2 * sigma2 * (4.0 * omega_1 * (2.0 * omega_1 + omega_2) - 8.0 * (2.0 * m_v2 + q2) +
                               m_B2 * (8.0 - 12.0 * sigmabar) - m_B * (4.0 * omega_1 + omega_2) * (-8.0 + 3.0 * sigmabar)) +
                               m_B * sigma * (4.0 * (4.0 * omega_1 + omega_2) * (2.0 * m_v2 + q2) +
                               4.0 * m_B2 * (4.0 * omega_1 + omega_2) * (-1 + sigmabar) + 4.0 * m_B3 * sigmabar +
                               m_B * (-(8.0 * m_v2 * sigmabar) - 3.0 * m_v * omega_2 * sigmabar - 4.0 * q2 * sigmabar +
                               2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-4.0 + sigmabar))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1B_T1_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T1 proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (2.0 * m_v2 + q2 + m_B * m_v * sigmabar - m_B2 * sigmabar2)
                             / (m_B * (-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1C_T1_3pt_chiB_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to chi_bar_bar_4

            return 0.0;
        }

        double I4_T1_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to chi_bar_bar_4
            const double m_B3     = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar3 = power_of<3>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * m_v * u * (m_v * m_v2 * (-1.0 + 2.0 * u) + m_v * (q2 - 2.0 * q2 * u) - m_B * q2 * sigmabar + m_B3 * sigmabar3)
                             / (power_of<2>(m_B) * power_of<5>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1A_T1_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(2.0 * m_v * (-24 * m_B2 * m_v * sigma4 * q2 +
                                 4.0 * m_B * sigma3 * (3.0 * m_B3 * omega_2 * sigmabar2 + 3.0 * m_v * (4.0 * omega_1 + omega_2) * q2 +
                                 m_B * m_v * q2 * (6.0 - 19.0 * sigmabar)) +
                                 sigma2 * (-(12.0 * m_B3 * omega_1 * omega_2 * sigmabar2) -
                                 12.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * q2 +
                                 2.0 * m_B2 * m_v * (15.0 * m_v2 + q2 * (11.0 - 34 * sigmabar)) * sigmabar +
                                 12.0 * m_B * m_v * (4.0 * omega_1 + omega_2) * q2 * (-1.0 + 3.0 * sigmabar) +
                                 3.0 * m_B4 * omega_2 * sigmabar2 * (-8.0 + 3.0 * sigmabar)) -
                                 sigma * (12.0 * m_B4 * omega_2 * sigmabar2 * (-1 + sigmabar) +
                                 m_B * m_v * (4.0 * omega_1 + omega_2) * (15.0 * m_v2 + q2 * (9.0 - 28.0 * sigmabar)) * sigmabar +
                                 6.0 * m_B3 * omega_1 * omega_2 * sigmabar2 * (-4.0 + sigmabar) +
                                 2.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (-6.0 + 17.0 * sigmabar) +
                                 4.0 * m_B2 * sigmabar2 * (-(3.0 * m_v3) + 3.0 * omega_2 * q2 + m_v * q2 * (-1.0 + 4.0 * sigmabar))) +
                                 sigmabar * (3.0 * m_B4 * omega_2 * sigmabar2 - 3.0 * m_B2 * omega_2 * sigmabar2 * q2 +
                                 m_v * omega_1 * (2.0 * omega_1 + omega_2) * (15.0 * m_v2 + q2 * (7.0 - 22 * sigmabar)) +
                                 6.0 * m_B3 * omega_1 * omega_2 * sigmabar * (-2.0 + sigmabar) +
                                 m_B * sigmabar * (-(3.0 * m_v3 * (4.0 * omega_1 + omega_2)) + 12.0 * omega_1 * omega_2 * q2 +
                                 m_v * (4.0 * omega_1 + omega_2) * q2 * (-1 + 4.0 * sigmabar)))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1B_T1_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T1 proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B3     = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * m_v * (sigmabar2 * (3.0 * m_B3 * sigmabar2 - 3.0 * m_B * q2 - 4.0 * m_v * q2) +
                               2.0 * m_v * q2 * sigma * sigmabar + m_v * (3.0 * m_v2 + q2 - 6.0 * q2 * sigma) * sigmabar)
                             / (m_B * power_of<6>(sigmabar) * omega_2);

            return C_4 * chi_bar_bar_4;
        }

        double I4d1C_T1_3pt_chiB_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T1 proportional to chi_bar_bar_4

            return 0.0;
        }
        double I4d2A_T1_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 4.0 * m_v * (84.0 * m_B2 * m_v * sigma4 * q2 + 2.0 * m_B * sigma3 *
                              (m_B3 * (m_v - 15.0 * omega_2) * sigmabar2 - 21.0 * m_v * (4.0 * omega_1 + omega_2) * q2 +
                               6.0 * m_B * m_v * q2 * (-7.0 + 23.0 * sigmabar)) +
                               sigma2 * (m_B3 * (30 * omega_1 * omega_2 - m_v * (4.0 * omega_1 + omega_2)) * sigmabar2 +
                               42.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * q2 -
                               2.0 * m_B2 * m_v * (45 * m_v2 + q2 * (51.0 - 142.0 * sigmabar)) * sigmabar -
                               42.0 * m_B * m_v * (4.0 * omega_1 + omega_2) * q2 * (-1 + 3.0 * sigmabar) +
                               2.0 * m_B4 * sigmabar2 * (m_v * (-1 + sigmabar) + 6.0 * omega_2 * (5.0 - 3.0 * sigmabar))) +
                               sigma * (m_B * m_v * (4.0 * omega_1 + omega_2) * (45 * m_v2 + q2 * (39 - 106 * sigmabar)) * sigmabar +
                               6.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (-7.0 + 19.0 * sigmabar) +
                               m_B2 * sigmabar2 * (-60 * m_v3 + m_v * omega_1 * (2.0 * omega_1 + omega_2) + 30.0 * omega_2 * q2 +
                               4.0 * m_v * q2 * (-8.0 + 25.0 * sigmabar)) +
                               m_B3 * sigmabar2 * (-(m_v * (4.0 * omega_1 + omega_2) * (-1 + sigmabar)) +
                               12.0 * omega_1 * omega_2 * (-5.0 + 2.0 * sigmabar)) -
                               3.0 * m_B4 * omega_2 * sigmabar2 * (10.0 + sigmabar * (-16.0 + 3.0 * sigmabar))) +
                               sigmabar * (6.0 * m_B4 * omega_2 * sigmabar2 * (-2.0 + sigmabar) +
                               3.0 * m_B3 * omega_1 * omega_2 * sigmabar * (10.0 + sigmabar * (-8.0 + sigmabar)) +
                               m_B * sigmabar * (15.0 * m_v3 * (4.0 * omega_1 + omega_2) - 30.0 * omega_1 * omega_2 * q2 -
                               m_v * (4.0 * omega_1 + omega_2) * q2 * (-7.0 + 22.0 * sigmabar)) +
                               m_B2 * sigmabar * (m_v * omega_1 * (2.0 * omega_1 + omega_2) * (-1 + sigmabar) - 6.0 * m_v3 * sigmabar +
                               12.0 * omega_2 * q2 * sigmabar + 2.0 * m_v * q2 * sigmabar * (-1 + 4.0 * sigmabar)) -
                               9.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * (5.0 * m_v2 + q2 * (3.0 - 8.0 * sigmabar))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<8>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2B_T1_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T1 proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double chi_bar_4     = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return  2.0 * m_v * (2.0 * (omega_1 * (6.0 * m_B3 * sigmabar4 +
                    2.0 * sigmabar2 * (-(6.0 * m_B3 * sigmabar2) + 6.0 * m_B * q2 + 11.0 * m_v * q2) -
                    15.0 * m_v3 * sigmabar - 12.0 * m_v * q2 * sigma * sigmabar + m_v * q2 * (-7.0 + 34 * sigma) * sigmabar) +
                    m_B * (sigmabar2 * (3.0 * m_v3 + 12.0 * m_B3 * sigmabar2 * sigma +
                    q2 * (m_v - 4.0 * (3.0 * m_B + 7.0 * m_v) * sigma)) + 12.0 * m_v * sigma2 * q2 * sigmabar +
                    3.0 * m_v * sigma * (5.0 * m_v2 + 3.0 * q2 * (1 - 4.0 * sigma)) * sigmabar +
                    2.0 * sigmabar3 * (-(2.0 * m_v * q2) - 3.0 * m_B3 * sigma * sigmabar))) * chi_bar_bar_4 +
                    m_B * (-omega_1 + m_B * sigma) * sigmabar * (sigmabar2 *
                   (3.0 * m_B3 * sigmabar2 - 3.0 * m_B * q2 - 4.0 * m_v * q2) + 2.0 * m_v * q2 * sigma * sigmabar +
                    m_v * (3.0 * m_v2 + q2 - 6.0 * q2 * sigma) * sigmabar) * chi_bar_4)
                   / (m_B * power_of<2>(omega_2) * power_of<7>(sigmabar));
        }

        double I4d2C_T1_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T1 proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * m_v * (sigmabar2 * (-(3.0 * m_B3 * sigmabar2) + 3.0 * m_B * q2 - 4.0 * m_v * q2) +
                               2.0 * m_v * q2 * sigma * sigmabar + m_v * (3.0 * m_v2 + q2 - 6.0 * q2 * sigma) * sigmabar) * pow(omega_2,-2.0) * pow(sigmabar,-6.0);

            return C_4 * chi_bar_bar_4;
        }

        double I4d2D_T1_3pt_chiB_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to T1 proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double chi_bar_4     = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return   2.0 * m_v * ((-(6.0 * m_B3 * sigmabar4) - 6.0 * m_v * sigmabar2 * q2 + 3.0 * m_v3 * sigmabar + 4.0 * m_v * q2 * sigma * sigmabar +
                     m_v * q2 * (3.0 - 10.0 * sigma) * sigmabar) * chi_bar_bar_4 +
                     m_B * sigmabar * (sigmabar2 * (3.0 * m_B3 * sigmabar2 - 3.0 * m_B * q2 - 4.0 * m_v * q2) +
                     2.0 * m_v * q2 * sigma * sigmabar + m_v * (3.0 * m_v2 + q2 - 6.0 * q2 * sigma) * sigmabar) * chi_bar_4)
                   / (m_B2 * power_of<7>(sigmabar));
        }

        double I2_T1_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + 0.0                                                       - I2_T1_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3_T1_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I3_T1_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2)    - I3_T1_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1A_T1_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I3d1A_T1_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I3d1A_T1_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1B_T1_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return + I3d1B_T1_3pt_chiA_bar_bar_4( sigma, omega_1, q2)          - I3d1B_T1_3pt_chiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I3d1C_T1_3pt_chi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return + I3d1C_T1_3pt_chiA_bar_bar_4( sigma, omega_2, q2)          - I3d1C_T1_3pt_chiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4_T1_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I4_T1_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2)    - I4_T1_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1A_T1_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I4d1A_T1_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d1A_T1_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1B_T1_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return + I4d1B_T1_3pt_chiA_bar_bar_4( sigma, omega_1, q2)          - I4d1B_T1_3pt_chiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d1C_T1_3pt_chi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return + I4d1C_T1_3pt_chiA_bar_bar_4( sigma, omega_2, q2)          - I4d1C_T1_3pt_chiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2A_T1_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I4d2A_T1_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d2A_T1_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d2B_T1_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return + I4d2B_T1_3pt_chiA_bar_bar_4( sigma, omega_1, q2)          - I4d2B_T1_3pt_chiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d2C_T1_3pt_chi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return + I4d2C_T1_3pt_chiA_bar_bar_4( sigma, omega_2, q2)          - I4d2C_T1_3pt_chiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2D_T1_3pt_chi_bar_bar_4(const double & sigma, const double & q2) const
        {
            return + I4d2D_T1_3pt_chiA_bar_bar_4( sigma, q2)                   - I4d2D_T1_3pt_chiB_bar_bar_4(sigma, q2);
        }
        // }}}

        /* T1 : integrands and surface terms */
        // {{{
        double integrand_T1_2pt_borel(const double & sigma, const double & q2) const
        {
            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double I1   = I1_T1_2pt_phi_p(sigma, q2);
            const double I2   = I2_T1_2pt_phi_bar(sigma, q2)   + I2_T1_2pt_g_p(sigma, q2)      + I2_T1_2pt_g_bar(sigma, q2);
            const double I3   = I3_T1_2pt_g_p(sigma, q2)       + I3_T1_2pt_g_bar(sigma, q2);
            const double I4   = I4_T1_2pt_g_bar(sigma, q2);

            double result = 0.0;
            result += - I1;
            result +=   I2 / M2;
            result += - I3 / (2.0 * M4);
            result +=   I4 / (6.0 * M6);
            result *= exp;

            return result;
        }

        double surface_T1_2pt(const double & sigma, const double & q2) const
        {
            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_T1_2pt_phi_bar(sigma, q2)   + I2_T1_2pt_g_p(sigma, q2)      + I2_T1_2pt_g_bar(sigma, q2);
            const double I3   = I3_T1_2pt_g_p(sigma, q2)       + I3_T1_2pt_g_bar(sigma, q2);
            const double I3d1 = I3d1_T1_2pt_g_p(sigma, q2)     + I3d1_T1_2pt_g_bar(sigma, q2);
            const double I4   = I4_T1_2pt_g_bar(sigma, q2);
            const double I4d1 = I4d1_T1_2pt_g_bar(sigma, q2);
            const double I4d2 = I4d2_T1_2pt_g_bar(sigma, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result += 0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / (power_of<2>( M2())));
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;

            return result;
        }

        /*
         * rewrite integration ranges such that:
         * 1.)
         *    0 <= x_1 <= 1,     and    0 <= x_2 <= 1,
         * 2.)
         *    x_1 and x_2 integration boundaries do not depend on the other variables
         *
         * We obtain the integrand
         *
         *    sigma m_B f(sigma m_B x_1, sigma m_B (xbar_1 xbar_2 + x_2) / xbar_2) / (xbar_1 xbar_2^2 + x_2 xbar_2),
         *
         * where
         *
         *    xbar_1 = 1.0 - x_1,    and    xbar_2 = 1.0 - x_2.
         */
        double integrand_T1_3pt(const std::array<double, 3> & args, const double & q2) const
        {
            const double sigma  = args[0];
            const double x_1    = args[1];
            const double x_2    = args[2];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double I1 = 0.0;
            const double I2 = I2_T1_3pt_phi_3(sigma, omega_1, omega_2, q2)         + I2_T1_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                            + I2_T1_3pt_phi_4(sigma, omega_1, omega_2, q2)         + I2_T1_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_T1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_T1_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I2_T1_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_T1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I2_T1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3 = I3_T1_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)     + I3_T1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)
                            + I3_T1_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3_T1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I3_T1_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3_T1_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                            + I3_T1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3_T1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4 = I4_T1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4_T1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I4_T1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4_T1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result = 0.0;
            result += - I1;
            result +=   I2 / M2;
            result += - I3 / (2.0 * M4);
            result +=   I4 / (6.0 * M6);
            result *=   prefactor * exp;

            return result;
        }

        double surface_T1_3pt_A(const std::array<double, 2> & args, const double & sigma, const double & q2) const
        {
            const double x_1    = args[0];
            const double x_2    = args[1];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_T1_3pt_phi_3(sigma, omega_1, omega_2, q2)            + I2_T1_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                              + I2_T1_3pt_phi_4(sigma, omega_1, omega_2, q2)            + I2_T1_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_T1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_T1_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I2_T1_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_T1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I2_T1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3   = I3_T1_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)        + I3_T1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)
                              + I3_T1_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)        + I3_T1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_T1_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I3_T1_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_T1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I3_T1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3d1 = I3d1A_T1_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)     + I3d1A_T1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)
                              + I3d1A_T1_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_T1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_T1_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_T1_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_T1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3d1A_T1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4   = I4_T1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)    + I4_T1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4_T1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I4_T1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d1 = I4d1A_T1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d1A_T1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d1A_T1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d1A_T1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d2 = I4d2A_T1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d2A_T1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d2A_T1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d2A_T1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        double surface_T1_3pt_B(const double & x_1, const double & sigma, const double & q2) const
        {
            // this ONLY includes the Jacobian from the transformation (omega_1 -> x_1).
            const double prefactor = sigma * m_B();

            const double omega_1 = sigma * m_B() * x_1;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1B_T1_3pt_phi_bar_3(sigma, omega_1, q2)     + I3d1B_T1_3pt_phi_bar_bar_3(sigma, omega_1, q2)
                                  + I3d1B_T1_3pt_phi_bar_4(sigma, omega_1, q2)     + I3d1B_T1_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I3d1B_T1_3pt_psi_bar_4(sigma, omega_1, q2)     + I3d1B_T1_3pt_chi_bar_4(sigma, omega_1, q2)
                                  + I3d1B_T1_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I3d1B_T1_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1B_T1_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d1B_T1_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d1B_T1_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d1B_T1_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            const     double I4d2 = I4d2B_T1_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d2B_T1_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d2B_T1_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d2B_T1_3pt_chi_bar_bar_4(sigma, omega_1, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        double surface_T1_3pt_C(const double & x_2, const double & sigma, const double & q2) const
        {
            const double xbar_2 = 1.0 - x_2;

            // this ONLY includes the Jacobian from the transformation (omega_2 -> x_2).
            const double prefactor = sigma * m_B() / (xbar_2 * xbar_2);

            const double omega_2 = sigma * m_B() * (x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1C_T1_3pt_phi_bar_3(sigma, omega_2, q2)     + I3d1C_T1_3pt_phi_bar_bar_3(sigma, omega_2, q2)
                                  + I3d1C_T1_3pt_phi_bar_4(sigma, omega_2, q2)     + I3d1C_T1_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I3d1C_T1_3pt_psi_bar_4(sigma, omega_2, q2)     + I3d1C_T1_3pt_chi_bar_4(sigma, omega_2, q2)
                                  + I3d1C_T1_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I3d1C_T1_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1C_T1_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d1C_T1_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d1C_T1_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d1C_T1_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            const     double I4d2 = I4d2C_T1_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d2C_T1_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d2C_T1_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d2C_T1_3pt_chi_bar_bar_4(sigma, omega_2, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        double surface_T1_3pt_D(const double & sigma, const double & q2) const
        {
            // this does NOT includes the original factor of 1 / omega_2
            const double prefactor = 1.0;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);


            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            constexpr double I3d1 = 0.0;
            constexpr double I4   = 0.0;
            constexpr double I4d1 = 0.0;
            const     double I4d2 = I4d2D_T1_3pt_phi_bar_bar_3(sigma, q2) + I4d2D_T1_3pt_phi_bar_bar_4(sigma, q2)
                                  + I4d2D_T1_3pt_psi_bar_bar_4(sigma, q2) + I4d2D_T1_3pt_chi_bar_bar_4(sigma, q2);


            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        /*
         * Integrands for the first moments. Only the borel method is implemented
         */

        double integrand_T1_2pt_borel_m1(const double & sigma, const double & q2) const
        {
            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double I1   = I1_T1_2pt_phi_p(sigma, q2);
            const double I2   = I2_T1_2pt_phi_bar(sigma, q2)   + I2_T1_2pt_g_p(sigma, q2)      + I2_T1_2pt_g_bar(sigma, q2);
            const double I3   = I3_T1_2pt_g_p(sigma, q2)       + I3_T1_2pt_g_bar(sigma, q2);
            const double I4   = I4_T1_2pt_g_bar(sigma, q2);

            double result1 = 0.0;
            result1 += - I1;
            result1 +=   I2 / M2;
            result1 += - I3 / (2.0 * M4);
            result1 +=   I4 / (6.0 * M6);
            result1 *=   exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - I2;
            result2 +=   I3 / M2;
            result2 += - I4 / (2.0 * M4);
            result2 *=   exp;

            return result1 + result2;
        }

        double surface_T1_2pt_m1(const double & sigma, const double & q2) const
        {
            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double m_V2 = power_of<2>(m_V());
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_T1_2pt_phi_bar(sigma, q2)   + I2_T1_2pt_g_p(sigma, q2)      + I2_T1_2pt_g_bar(sigma, q2);
            const double I3   = I3_T1_2pt_g_p(sigma, q2)       + I3_T1_2pt_g_bar(sigma, q2);
            const double I3d1 = I3d1_T1_2pt_g_p(sigma, q2)     + I3d1_T1_2pt_g_bar(sigma, q2);
            const double I4   = I4_T1_2pt_g_bar(sigma, q2);
            const double I4d1 = I4d1_T1_2pt_g_bar(sigma, q2);
            const double I4d2 = I4d2_T1_2pt_g_bar(sigma, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return result1 + result2;
        }
        double integrand_T1_3pt_m1(const std::array<double, 3> & args, const double & q2) const
        {
            const double sigma  = args[0];
            const double x_1    = args[1];
            const double x_2    = args[2];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double I1 = 0.0;
            const double I2 = I2_T1_3pt_phi_3(sigma, omega_1, omega_2, q2)         + I2_T1_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                            + I2_T1_3pt_phi_4(sigma, omega_1, omega_2, q2)         + I2_T1_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_T1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_T1_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I2_T1_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_T1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I2_T1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3 = I3_T1_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)     + I3_T1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)
                            + I3_T1_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3_T1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I3_T1_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3_T1_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                            + I3_T1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3_T1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4 = I4_T1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4_T1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I4_T1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4_T1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result1 = 0.0;
            result1 += - I1;
            result1 +=   I2 / M2;
            result1 += - I3 / (2.0 * M4);
            result1 +=   I4 / (6.0 * M6);
            result1 *=   exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - I2;
            result2 +=   I3 / M2;
            result2 += - I4 / (2.0 * M4);
            result2 *=   exp;

            return (result1 + result2) * prefactor;
        }

        double surface_T1_3pt_A_m1(const std::array<double, 2> & args, const double & sigma, const double & q2) const
        {
            const double x_1    = args[0];
            const double x_2    = args[1];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_T1_3pt_phi_3(sigma, omega_1, omega_2, q2)            + I2_T1_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                              + I2_T1_3pt_phi_4(sigma, omega_1, omega_2, q2)            + I2_T1_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_T1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_T1_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I2_T1_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_T1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I2_T1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3   = I3_T1_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)        + I3_T1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)
                              + I3_T1_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)        + I3_T1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_T1_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I3_T1_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_T1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I3_T1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3d1 = I3d1A_T1_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)     + I3d1A_T1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)
                              + I3d1A_T1_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_T1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_T1_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_T1_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_T1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3d1A_T1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4   = I4_T1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)    + I4_T1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4_T1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I4_T1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d1 = I4d1A_T1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d1A_T1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d1A_T1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d1A_T1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d2 = I4d2A_T1_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d2A_T1_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d2A_T1_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d2A_T1_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }

        double surface_T1_3pt_B_m1(const double & x_1, const double & sigma, const double & q2) const
        {
            // this ONLY includes the Jacobian from the transformation (omega_1 -> x_1).
            const double prefactor = sigma * m_B();

            const double omega_1 = sigma * m_B() * x_1;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1B_T1_3pt_phi_bar_3(sigma, omega_1, q2)     + I3d1B_T1_3pt_phi_bar_bar_3(sigma, omega_1, q2)
                                  + I3d1B_T1_3pt_phi_bar_4(sigma, omega_1, q2)     + I3d1B_T1_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I3d1B_T1_3pt_psi_bar_4(sigma, omega_1, q2)     + I3d1B_T1_3pt_chi_bar_4(sigma, omega_1, q2)
                                  + I3d1B_T1_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I3d1B_T1_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1B_T1_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d1B_T1_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d1B_T1_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d1B_T1_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            const     double I4d2 = I4d2B_T1_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d2B_T1_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d2B_T1_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d2B_T1_3pt_chi_bar_bar_4(sigma, omega_1, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }

        double surface_T1_3pt_C_m1(const double & x_2, const double & sigma, const double & q2) const
        {
            const double xbar_2 = 1.0 - x_2;

            // this ONLY includes the Jacobian from the transformation (omega_2 -> x_2).
            const double prefactor = sigma * m_B() / (xbar_2 * xbar_2);

            const double omega_2 = sigma * m_B() * (x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1C_T1_3pt_phi_bar_3(sigma, omega_2, q2)     + I3d1C_T1_3pt_phi_bar_bar_3(sigma, omega_2, q2)
                                  + I3d1C_T1_3pt_phi_bar_4(sigma, omega_2, q2)     + I3d1C_T1_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I3d1C_T1_3pt_psi_bar_4(sigma, omega_2, q2)     + I3d1C_T1_3pt_chi_bar_4(sigma, omega_2, q2)
                                  + I3d1C_T1_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I3d1C_T1_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1C_T1_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d1C_T1_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d1C_T1_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d1C_T1_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            const     double I4d2 = I4d2C_T1_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d2C_T1_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d2C_T1_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d2C_T1_3pt_chi_bar_bar_4(sigma, omega_2, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }

        double surface_T1_3pt_D_m1(const double & sigma, const double & q2) const
        {
            // this does NOT includes the original factor of 1 / omega_2
            const double prefactor = 1.0;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);


            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            constexpr double I3d1 = 0.0;
            constexpr double I4   = 0.0;
            constexpr double I4d1 = 0.0;
            const     double I4d2 = I4d2D_T1_3pt_phi_bar_bar_3(sigma, q2) + I4d2D_T1_3pt_phi_bar_bar_4(sigma, q2)
                                  + I4d2D_T1_3pt_psi_bar_bar_4(sigma, q2) + I4d2D_T1_3pt_chi_bar_bar_4(sigma, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }
        // }}}

        /* T1 : form factor and moments */
        // {{{
        double t_1(const double & q2) const
        {
            const double sigma_0 = this->sigma_0(q2, s0_0_T1(), s0_1_T1());

            const std::function<double (const double &)> integrand_2pt = std::bind(integrand_t1_2pt, this, std::placeholders::_1, q2);

            const double integral_2pt = integrate<GSL::QAGS>(integrand_2pt, 0.0, sigma_0);
            const double surface_2pt  = 0.0 - surface_T1_2pt(switch_borel ? sigma_0 : 0.0, q2);

            double integral_3pt = 0.0;
            double surface_3pt  = 0.0;

            if (switch_3pt != 0.0)
            {
                const std::function<double (const double &)> surface_3pt_B = std::bind(&Implementation::surface_T1_3pt_B, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const double &)> surface_3pt_C = std::bind(&Implementation::surface_T1_3pt_C, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const std::array<double, 3> &)> integrand_3pt = std::bind(&Implementation::integrand_T1_3pt, this, std::placeholders::_1, q2);
                const std::function<double (const std::array<double, 2> &)> surface_3pt_A = std::bind(&Implementation::surface_T1_3pt_A, this, std::placeholders::_1, sigma_0, q2);

                integral_3pt = integrate(integrand_3pt, { 0.0, 0.0, 0.0 }, { sigma_0, 1.0, 1.0 }, cubature::Config());
                surface_3pt  = 0.0
                             - integrate(surface_3pt_A, { 0.0, 0.0 }, { 1.0, 1.0 }, cubature::Config()) // integrate over x_1 and x_2
                             - integrate<GSL::QAGS>(surface_3pt_B, 0.0, 1.0)                            // integrate over x_1
                             - integrate<GSL::QAGS>(surface_3pt_C, 0.0, 1.0)                            // integrate over x_2
                             - surface_T1_3pt_D(sigma_0, q2);
            }

            return f_B() * power_of<2>(m_B()) / (2.0 * f_V() * m_V) * (integral_2pt + surface_2pt + integral_3pt + surface_3pt) / ( Process_::chi2);
        }

        double normalized_moment_1_t_1(const double & q2) const
        {
            const double sigma_0 = this->sigma_0(q2, s0_0_T1(), s0_1_T1()) ;

            const std::function<double (const double &)> integrand_2pt_m1 = std::bind(&Implementation::integrand_T1_2pt_borel_m1, this, std::placeholders::_1, q2);


            const std::function<double (const double &)> integrand_2pt    = std::bind(&Implementation::integrand_T1_2pt_borel, this, std::placeholders::_1, q2);

            const double integral_2pt_m1 = integrate<GSL::QAGS>(integrand_2pt_m1, 0.0, sigma_0);
            const double surface_2pt_m1  = 0.0 - surface_T1_2pt_m1(sigma_0, q2);

            double integral_3pt_m1 = 0.0;
            double surface_3pt_m1  = 0.0;

            if (switch_3pt != 0.0)
            {
                const std::function<double (const double &)> surface_3pt_B_m1 = std::bind(&Implementation::surface_T1_3pt_B_m1, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const double &)> surface_3pt_C_m1 = std::bind(&Implementation::surface_T1_3pt_C_m1, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const std::array<double, 3> &)> integrand_3pt_m1 = std::bind(&Implementation::integrand_T1_3pt_m1, this, std::placeholders::_1, q2);
                const std::function<double (const std::array<double, 2> &)> surface_3pt_A_m1 = std::bind(&Implementation::surface_T1_3pt_A_m1, this, std::placeholders::_1, sigma_0, q2);

                integral_3pt_m1 = integrate(integrand_3pt_m1, { 0.0, 0.0, 0.0 }, { sigma_0, 1.0, 1.0 }, cubature::Config());
                surface_3pt_m1  = 0.0
                                - integrate(surface_3pt_A_m1, { 0.0, 0.0 }, { 1.0, 1.0 }, cubature::Config()) // integrate over x_1 and x_2
                                - integrate<GSL::QAGS>(surface_3pt_B_m1, 0.0, 1.0)                            // integrate over x_1
                                - integrate<GSL::QAGS>(surface_3pt_C_m1, 0.0, 1.0)                            // integrate over x_2
                                - surface_T1_3pt_D_m1(sigma_0, q2);
            }
            const double numerator       = integral_2pt_m1 + surface_2pt_m1 + integral_3pt_m1 + surface_3pt_m1;

            const double integral_2pt    = integrate<GSL::QAGS>(integrand_2pt, 0.0, sigma_0);
            const double surface_2pt     = 0.0 - surface_T1_2pt(sigma_0, q2);

            double integral_3pt    = 0.0;
            double surface_3pt     = 0.0;

            if (switch_3pt != 0.0)
            {
                const std::function<double (const double &)> surface_3pt_B    = std::bind(&Implementation::surface_T1_3pt_B, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const double &)> surface_3pt_C    = std::bind(&Implementation::surface_T1_3pt_C, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const std::array<double, 3> &)> integrand_3pt = std::bind(&Implementation::integrand_T1_3pt, this, std::placeholders::_1, q2);
                const std::function<double (const std::array<double, 2> &)> surface_3pt_A = std::bind(&Implementation::surface_T1_3pt_A, this, std::placeholders::_1, sigma_0, q2);

                integral_3pt    = integrate(integrand_3pt, { 0.0, 0.0, 0.0 }, { sigma_0, 1.0, 1.0 }, cubature::Config());
                surface_3pt     = 0.0
                                - integrate(surface_3pt_A, { 0.0, 0.0 }, { 1.0, 1.0 }, cubature::Config()) // integrate over x_1 and x_2
                                - integrate<GSL::QAGS>(surface_3pt_B, 0.0, 1.0)                            // integrate over x_1
                                - integrate<GSL::QAGS>(surface_3pt_C, 0.0, 1.0)                            // integrate over x_2
                                - surface_T1_3pt_D(sigma_0, q2);
            }
            const double denominator     = integral_2pt + surface_2pt + integral_3pt + surface_3pt;

            return numerator / denominator;
        }
        // }}}

        /* T_23A : 2-particle functions */
        // {{{
        inline
        double I1_T23A_2pt_phi_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to T23A proportional to phi_+
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v();

            const double C_1 = -1.0 - m_v / (m_B * sigmabar);

            return C_1 * this->phi_plus(sigma * m_B());
        }

        inline
        double I2_T23A_2pt_phi_bar(const double & sigma, const double & q2) const
        {
            // two-particle contribution to T23A proportional to phibar
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double C_2 = -(m_v2 - 2.0 * sigma * q2 + m_B * m_v * sigmabar) / (m_B * power_of<2>(sigmabar));

            return C_2 * this->phi_bar(sigma * m_B());
        }

        inline
        double I2_T23A_2pt_g_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to T23A proportional to g_+
            const double sigmabar = 1.0 - sigma;

            const double C_2   =  -4.0 / sigmabar;

            return C_2 * this->g_plus(sigma * m_B);
        }

        inline
        double I3_T23A_2pt_g_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to T23A proportional to g_+
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_plus    = this->g_plus(sigma * m_B);

            const double C_3 = 8.0 * m_v2 * (m_v + m_B * sigmabar) / (m_B * power_of<3>(sigmabar));

            return C_3 * g_plus;
        }

        inline
        double I3d1_T23A_2pt_g_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to T23A proportional to g_+
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_plus    = this->g_plus(sigma * m_B);
            const double g_plus_d1 = this->g_plus_d1(sigma * m_B);

            const double C_3   = 8.0 * m_v2 * (m_v + m_B * sigmabar) / (power_of<3>(sigmabar));
            const double C_3d1 = 8.0 * m_v2 * (3.0 * m_v + 2.0 * m_B * sigmabar) / (m_B * power_of<4>(sigmabar));

            return C_3 * g_plus_d1 + C_3d1 * g_plus;
        }

        inline
        double I2_T23A_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to T23A proportional to gbar
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double g_bar    = this->g_bar(sigma * m_B);

            const double C_2 = -4.0 / (m_B * sigmabar2);

            return C_2 * g_bar;
        }

        inline
        double I3_T23A_2pt_g_bar(const double & sigma, const double & q2) const
        {
            // two-particle contribution to T23A proportional to gbar
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);

            const double C_3 = 8.0 * (m_v2 + 2.0 * sigma * q2) / (m_B * power_of<3>(sigmabar));

            return C_3 * g_bar;
        }

        inline
        double I3d1_T23A_2pt_g_bar(const double & sigma, const double & q2) const
        {
            // two-particle contribution to T23A proportional to gbar
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);

            const double C_3   = 8.0 * (m_v2 + 2.0 * sigma * q2) / (power_of<3>(sigmabar));
            const double C_3d1 = 8.0 * (3.0 * m_v2 + q2 * (6.0 - 4.0 * sigmabar)) / (m_B * power_of<4>(sigmabar));

            return C_3 * g_bar_d1 + C_3d1 * g_bar;
        }

        inline
        double I4_T23A_2pt_g_bar(const double & sigma, const double & q2) const
        {
            // two-particle contribution to T23A proportional to gbar
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);

            const double C_4 = 24.0 * m_v2 * (m_v2 - 2.0 * sigma * q2 + m_B * m_v * sigmabar) / (m_B * power_of<4>(sigmabar));

            return C_4 * g_bar;
        }

        inline
        double I4d1_T23A_2pt_g_bar(const double & sigma, const double & q2) const
        {
            // two-particle contribution to T23A proportional to gbar
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);

            const double C_4   = 24.0 * m_v2 * (m_v2 - 2.0 * sigma * q2 + m_B * m_v * sigmabar) / (power_of<4>(sigmabar));
            const double C_4d1 = 24.0 * m_v2 * (4.0 * m_v2 - 8.0 * q2 + 3.0 * m_B * m_v * sigmabar + 6.0 * q2 * sigmabar) / (m_B * power_of<5>(sigmabar));

            return C_4 * g_bar_d1 + C_4d1 * g_bar;
        }

        inline
        double I4d2_T23A_2pt_g_bar(const double & sigma, const double & q2) const
        {
            // two-particle contribution to T23A proportional to gbar
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);
            const double g_bar_d2 = this->g_bar_d2(sigma * m_B);

            const double C_4   = 24.0 * m_v2 * (m_v2 - 2.0 * sigma * q2 + m_B * m_v * sigmabar) / (power_of<4>(sigmabar)) * m_B;
            const double C_4d1 = 48.0 * m_v2 * (4.0 * m_v2 - 8.0 * q2 + 3.0 * m_B * m_v * sigmabar + 6.0 * q2 * sigmabar) / (power_of<5>(sigmabar));
            const double C_4d2 = 96.0 * m_v2 * (5.0 * m_v2 + 3.0 * m_B * m_v * sigmabar + 2.0 * q2 * (-5.0 + 3.0 * sigmabar)) / (m_B * power_of<6>(sigmabar));

            return C_4 * g_bar_d2 + C_4d1 * g_bar_d1 + C_4d2 * g_bar;
        }
        // }}}

        /* T23A : 3-particle functions */
        // {{{
        double I2_T23A_3pt_phi_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to phi_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_3 = this->phi_3(omega_1, omega_2);

            const double C_2 = (m_B * m_v - 4.0 * q2 * u + m_B2 * u * sigmabar) / (m_B2 * power_of<2>(sigmabar));

            return C_2 * phi_3;
        }

        double I2_T23A_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to phi_bar_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_2 = (2.0 * m_v - m_B * u * sigmabar) / (m_B2 * power_of<3>(sigmabar));

            return C_2 * phi_bar_3;
        }

        double I3_T23A_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to phi_bar_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = 2.0 * (m_v * m_v2 + m_B * m_v2 * u * sigmabar + m_B * q2 * u * (3.0 - 4.0 * sigmabar) * sigmabar + m_B2 * m_v * sigmabar2
                             + m_B * m_B2 * u * power_of<3>(sigmabar) + m_v * q2 * (-1.0 + 4.0 * sigmabar))
                             / (m_B2 * power_of<4>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I3d1A_T23A_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to phi_bar_3
            const double m_B2     = power_of<2>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = (2.0 * (m_B4 * sigmabar4 + m_B4 * sigmabar3 * sigma + 4.0 * m_v * omega_2 * (m_v2 - q2 * sigma) +
                               m_B2 * sigmabar2 * (m_v2 + 2.0 * m_v * omega_2 + q2 * (-1 + 7.0 * sigma)) +
                               2.0 * m_B2 * sigma2 * q2 * sigmabar + (8.0 * m_v * omega_2 * q2 +
                               m_B2 * sigma * (3.0 * m_v2 + q2 * (-2.0 + 9.0 * sigma))) * sigmabar) -
                               m_B * omega_1 * (2.0 * m_B2 * sigmabar3 - 4.0 * sigma2 * q2 + 6.0 * m_v2 * sigmabar +
                               q2 * sigma * (4.0 + 19.0 * sigmabar) + q2 * sigmabar * (-5.0 + 7.0 * sigmabar)))
                             / (m_B2 * omega_2 * power_of<5>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I3d1B_T23A_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23A proportional to phi_bar_3
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar3 = power_of<3>(sigmabar);

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = -((2.0 * m_v3 + 2.0 * m_B3 * sigmabar3 - 2.0 * m_v * q2 * sigma + 2.0 * m_B * m_v2 * sigmabar +
                                m_B * q2 * sigma * sigmabar + m_B * q2 * (-2.0 + 7.0 * sigma) * sigmabar +
                                2.0 * m_v * sigmabar * (3.0 * q2 + m_B2 * sigmabar)))
                             / (m_B * (-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I3d1C_T23A_3pt_phi_bar_3(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to phi_bar_3
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = 2.0 * m_v * (m_v2 - sigma * q2 + sigmabar * (3.0 * q2 + m_B2 * sigmabar)) / (m_B * omega_2 * power_of<4>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I3_T23A_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to phi_bar_bar_3
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_3 = 6.0 * m_v * u / (m_B * power_of<3>(sigmabar));

            return C_3 * phi_bar_bar_3;
        }

        double I3d1A_T23A_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to phi_bar_bar_3
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_3 = 6.0 * m_v * (3.0 * sigma * m_B + m_B * sigmabar - 3.0 * omega_1)
                             / (m_B * omega_2 * power_of<4>(sigmabar));

            return C_3 * phi_bar_bar_3;
        }

        double I3d1B_T23A_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to phi_bar_bar_3
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_3 = -6.0 * m_v
                             / ((-omega_1 + m_B * sigma) * power_of<3>(sigmabar));

            return C_3 * phi_bar_bar_3;
        }

        double I3d1C_T23A_3pt_phi_bar_bar_3(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to phi_bar_bar_3

            return 0.0;
        }

        double I4_T23A_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to phi_bar_bar_3
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = 6.0 * m_v * u * (m_v * m_v - 4.0 * sigma * q2 + m_B * m_v * (-1.0 + 2.0 * u) * sigmabar)
                             / (m_B * power_of<4>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d1A_T23A_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to phi_bar_bar_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2  = power_of<2>(sigmabar);

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = 6.0 * m_v *
                               (-(m_B * (m_B * m_v * omega_2 * sigmabar2 - 4.0 * omega_2 * sigma * (m_v2 - 4.0 * q2 * sigma) -
                               8.0 * m_B2 * m_v * sigma2 * sigmabar + 2.0 * m_B2 * m_v * sigma * (-2.0 + 3.0 * sigma) * sigmabar +
                               omega_2 * (-m_v2 + 3.0 * m_B * m_v * sigma + 8.0 * q2 * sigma) * sigmabar)) +
                               omega_1 * (-(4.0 * omega_2 * (m_v2 - 4.0 * q2 * sigma)) - 16.0 * m_B2 * m_v * sigma * sigmabar +
                               (3.0 * m_B * m_v * omega_2 + 4.0 * omega_2 * q2 + 4.0 * m_B2 * m_v * (-1 + 2.0 * sigma)) * sigmabar) -
                               2.0 * m_B * m_v * (-4.0 + 4.0 * sigma + sigmabar) * power_of<2>(omega_1))
                             / (m_B * power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d1B_T23A_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23A proportional to phi_bar_bar_3
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = -6.0 * m_v * (m_v * m_v - 4.0 * sigma * q2 + m_B * m_v * sigmabar)
                             / (power_of<4>(sigmabar) * omega_2);

            return C_4 * phi_bar_bar_3;
        }

        double I4d1C_T23A_3pt_phi_bar_bar_3(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to phi_bar_bar_3

            return 0.0;
        }
        double I4d2A_T23A_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to phi_bar_bar_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = 12.0 * m_v *
                               (m_B * (-(sigmabar2 * (3.0 * m_B * m_v * omega_2 + 4.0 * omega_2 * q2 + 2.0 * m_B2 * m_v * (-1 + 3.0 * sigma))) -
                               2.0 * (4.0 * m_B2 * m_v * sigma * (-2.0 + 3.0 * sigma) +
                               omega_2 * (-(2.0 * m_v2) + 3.0 * m_B * m_v * sigma + 16.0 * q2 * sigma)) * sigmabar +
                               10.0 * sigma * (omega_2 * (m_v2 - 4.0 * q2 * sigma) + 2.0 * m_B2 * m_v * sigma * sigmabar)) +
                               2.0 * omega_1 * (-(5.0 * m_v2 * omega_2) + 20.0 * m_B2 * m_v * sigma2 + 8.0 * omega_2 * q2 * sigmabar +
                               m_B * m_v * sigmabar * (3.0 * omega_2 + 2.0 * m_B * (-4.0 + sigmabar)) +
                               4.0 * sigma * (5.0 * omega_2 * q2 + m_B2 * m_v * (-5.0 + 4.0 * sigmabar))) -
                               4.0 * m_B * m_v * (-5.0 + 5.0 * sigma + 2.0 * sigmabar) * power_of<2>(omega_1))
                             / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d2B_T23A_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23A proportional to phi_bar_bar_3
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_3     = this->phi_bar_3(omega_1, omega_2);
            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            return  -(6.0 * m_v * ((-(8.0 * m_v2 * omega_1) - 32 * m_B * sigma2 * q2 + 2.0 * m_B2 * m_v * sigmabar -
                    6.0 * m_B * m_v * omega_1 * sigmabar + 8.0 * omega_1 * q2 * sigmabar +
                    4.0 * sigma * (8.0 * omega_1 * q2 + m_B * (2.0 * m_v2 + m_B * m_v * sigmabar - 2.0 * q2 * sigmabar))) *
                    phi_bar_bar_3 + m_B * (-omega_1 + m_B * sigma) * sigmabar * (m_v2 - 4.0 * q2 * sigma + m_B * m_v * sigmabar) * phi_bar_3))
                    / (power_of<2>(omega_2) * power_of<5>(sigmabar));
        }

        double I4d2C_T23A_3pt_phi_bar_bar_3(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to phi_bar_bar_3
            const double omega_1  = m_B * sigma;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = 6.0 * m_B * m_v * (m_v2 - 4.0 * q2 * sigma - m_B * m_v * sigmabar) / (power_of<2>(omega_2) * power_of<4>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d2D_T23A_3pt_phi_bar_bar_3(const double & sigma, const double & q2) const
        {
            // three-particle contribution to T23A proportional to phi_bar_bar_3
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_3     = this->phi_bar_3(omega_1, omega_2);
            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            return    pow(m_B,-1) * pow(sigmabar,-4.0) * (6.0 * m_v * (m_B * m_v + 4.0 * q2) * phi_bar_bar_3 -
                      6.0 * m_B * m_v * (m_v2 - 4.0 * q2 * sigma + m_B * m_v * sigmabar) * phi_bar_3);
        }

        double I2_T23A_3pt_phi_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to phi_4
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_4 = this->phi_4(omega_1, omega_2);

            const double C_2 = (-1.0 + u) / sigmabar;

            return C_2 * phi_4;
        }

        double I2_T23A_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to phi_bar_4
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_2 = u / (m_B * power_of<2>(sigmabar));

            return C_2 * phi_bar_4;
        }

        double I3_T23A_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to phi_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * (q2 * (1.0 + u - 2.0 * sigmabar) + (m_v + m_B * sigmabar) * (m_v * u - m_B * (-1.0 + u) * sigmabar))
                             / (m_B * power_of<3>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I3d1A_T23A_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to phi_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma,   sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = ((8.0 * m_B * sigma3 * q2 - 8.0 * omega_1 * q2 * sigma * (-1 + sigmabar) +
                               2.0 * sigma2 * q2 * (-(4.0 * omega_1) + m_B * (-4.0 + 5.0 * sigmabar)) +
                               sigma * sigmabar * (4.0 * m_B3 * sigmabar2 - 23 * omega_2 * q2 +
                               2.0 * m_B * (-(6.0 * m_v2) + q2 * (-7.0 + sigmabar))) +
                               sigmabar * (12.0 * m_v2 * omega_1 - 4.0 * m_B2 * (omega_1 + omega_2) * sigmabar2 +
                               4.0 * m_B3 * sigmabar3 - 4.0 * m_B * m_v * (m_v + 2.0 * omega_2) * sigmabar +
                               q2 * (12.0 * omega_1 - 4.0 * m_B * sigmabar + omega_2 * (11.0 - 7.0 * sigmabar)))))
                             / (2.0 * m_B * omega_2 * power_of<5>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I3d1B_T23A_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23A proportional to phi_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = (-sigma * sigma * q2 + 2.0 * m_v * sigmabar * (m_v + m_B * sigmabar) + sigma * (q2 + 3.0 * q2 * sigmabar))
                             / ((-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I3d1C_T23A_3pt_phi_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to phi_bar_4
            const double omega_1  = m_B * sigma;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * ((-1.0 + 2.0 * sigma) * q2 + m_B * sigmabar * (m_v + m_B * sigmabar))
                             / (omega_2 * power_of<3>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I2_T23A_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_2 = 2.0 * u * (-1.0 + 2.0 * u)
                             / (m_B2 * power_of<3>(sigmabar));

            return C_2 * phi_bar_bar_4;
        }

        double I3_T23A_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * u * (m_v2 * (-2.0 + 4.0 * u) + m_B * m_v * sigmabar - (-1.0 + 2.0 * u) * (m_B2 * sigmabar2 + q2 * (-7.0 + 4.0 * sigmabar)))
                             / (m_B2 * power_of<4>(sigmabar));

            return C_3 * phi_bar_bar_4;
        }

        double I3d1A_T23A_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma), sigma4   = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -(2.0 * (-(4.0 * sigma4 * (5.0 * m_B2 * q2 + 2.0 * m_B4 * sigmabar)) +
                                2.0 * m_B * sigma3 * (10.0 * m_B * q2 + 5.0 * (4.0 * omega_1 + omega_2) * q2 +
                                2.0 * m_B2 * (4.0 * omega_1 + omega_2) * sigmabar - 4.0 * m_B3 * sigmabar * (-2.0 + sigmabar)) +
                                sigma2 * (-(10.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2) -
                                2.0 * m_B * (4.0 * omega_1 + omega_2) * q2 * (5.0 + sigmabar) +
                                4.0 * m_B4 * sigmabar * (-2.0 + 3.0 * sigmabar) +
                                m_B3 * (4.0 * omega_1 + omega_2) * sigmabar * (-8.0 + 3.0 * sigmabar) +
                                4.0 * m_B2 * sigmabar * (4.0 * m_v2 - omega_1 * (2.0 * omega_1 + omega_2) + 3.0 * q2 * (3.0 + sigmabar))) +
                                sigma * (-(4.0 * m_B4 * sigmabar2) - 4.0 * m_B3 * (4.0 * omega_1 + omega_2) * (-1 + sigmabar) * sigmabar +
                                2.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (5.0 + 2.0 * sigmabar) +
                                m_B2 * sigmabar * (8.0 * m_v2 * sigmabar + 3.0 * m_v * omega_2 * sigmabar + 12.0 * q2 * sigmabar -
                                2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-4.0 + sigmabar)) -
                                4.0 * m_B * (4.0 * omega_1 + omega_2) * sigmabar * (2.0 * m_v2 + q2 * (4.0 + sigmabar))) +
                                sigmabar * (m_B3 * (4.0 * omega_1 + omega_2) * sigmabar -
                                m_B * (3.0 * m_v * omega_1 * omega_2 + 2.0 * m_v2 * (4.0 * omega_1 + omega_2) +
                                3.0 * (4.0 * omega_1 + omega_2) * q2) * sigmabar +
                                m_B2 * (m_v * omega_2 * sigmabar2 + 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-2.0 + sigmabar)) +
                                2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (4.0 * m_v2 + q2 * (7.0 + sigmabar)))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_3 * phi_bar_bar_4;
        }

        double I3d1B_T23A_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23A proportional to phi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (m_B * m_v * sigmabar2 + 2.0 * q2 * sigma * sigmabar +
                               (2.0 * m_v2 - m_B2 * sigmabar2 + q2 * (3.0 + 2.0 * sigma)) * sigmabar)
                             / (m_B * (-omega_1 + m_B * sigma) * power_of<5>(sigmabar));

            return C_3 * phi_bar_bar_4;
        }

        double I3d1C_T23A_3pt_phi_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to phi_bar_bar_4

            return 0.0;
        }

        double I4_T23A_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(6.0 * u * (m_v * (m_B3 * sigmabar3 - m_B * q2 * sigmabar) + m_v4 * (-1 + 2.0 * u) +
                                2.0 * q2 * (-(m_B2 * sigmabar2) + q2) * (-1 + sigmabar) * (-1 + 2.0 * u) +
                                m_v2 * q2 * (1 + 2.0 * sigmabar) * (-1 + 2.0 * u)))
                             / (m_B2 * power_of<5>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d1A_T23A_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(2.0 * (2.0 * m_B2 * sigma5 * q2 * (6.0 * q2 + 5.0 * m_B2 * sigmabar) -
                               m_B * sigma4 * q2 * (6.0 * (4.0 * omega_1 + omega_2) * q2 +
                               5.0 * m_B2 * (4.0 * omega_1 + omega_2) * sigmabar + 10.0 * m_B3 * sigmabar * (2.0 + 3.0 * sigmabar) +
                               4.0 * m_B * q2 * (3.0 - 5.0 * sigmabar)) +
                               sigma3 * (2.0 * m_B3 * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (5.0 + 8.0 * sigmabar) +
                               m_B2 * q2 * sigmabar * (5.0 * omega_1 * (2.0 * omega_1 + omega_2) + q2 * (-68 + 8.0 * sigmabar)) +
                               2.0 * m_B4 * sigmabar * (6.0 * m_v * omega_2 * sigmabar +
                               q2 * (5.0 + 4.0 * sigmabar * (3.0 - 5.0 * sigmabar))) +
                               6.0 * omega_1 * (2.0 * omega_1 + omega_2) * power_of<2>(q2) -
                               3.0 * m_B * (4.0 * omega_1 + omega_2) * (-2.0 + 3.0 * sigmabar) * power_of<2>(q2)) +
                               sigma2 * (3.0 * m_B4 * sigmabar2 * (m_v * omega_2 * (-8.0 + 3.0 * sigmabar) + 2.0 * q2 * (1 + 5.0 * sigmabar)) +
                               m_B3 * sigmabar * (-(12.0 * m_v * omega_1 * omega_2 * sigmabar) +
                               (4.0 * omega_1 + omega_2) * q2 * (-5.0 + sigmabar * (-14.0 + 15.0 * sigmabar))) +
                               m_B2 * sigmabar * (30 * m_v4 + 6.0 * m_v2 * q2 * (5.0 + 8.0 * sigmabar) -
                               q2 * (36 * q2 * sigmabar + omega_1 * (2.0 * omega_1 + omega_2) * (10.0 + 17.0 * sigmabar))) -
                               3.0 * m_B * (4.0 * omega_1 + omega_2) * sigmabar * (-11.0 + sigmabar) * power_of<2>(q2) +
                               2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-3.0 + 4.0 * sigmabar) * power_of<2>(q2)) +
                               sigmabar * (3.0 * m_B4 * m_v * omega_2 * sigmabar2 +
                               6.0 * m_B3 * m_v * omega_1 * omega_2 * sigmabar * (-2.0 + sigmabar) -
                               3.0 * m_B * m_v * sigmabar * (m_v3 * (4.0 * omega_1 + omega_2) - 4.0 * omega_1 * omega_2 * q2 +
                               m_v * (4.0 * omega_1 + omega_2) * q2 * (1 + 2.0 * sigmabar)) +
                               m_B2 * q2 * sigmabar * (-(3.0 * m_v * omega_2 * sigmabar) +
                               omega_1 * (2.0 * omega_1 + omega_2) * (1 + 5.0 * sigmabar)) +
                               3.0 * omega_1 * (2.0 * omega_1 + omega_2) *
                               (5.0 * m_v4 + m_v2 * q2 * (5.0 + 8.0 * sigmabar) - 2.0 * sigmabar * power_of<2>(q2))) -
                               sigma * sigmabar * (12.0 * m_B4 * m_v * omega_2 * (-1 + sigmabar) * sigmabar +
                               2.0 * m_B3 * sigmabar * (3.0 * m_v * omega_1 * omega_2 * (-4.0 + sigmabar) +
                               (4.0 * omega_1 + omega_2) * q2 * (1 + 5.0 * sigmabar)) +
                               m_B2 * (-(12.0 * m_v4 * sigmabar) + 12.0 * m_v * omega_2 * q2 * sigmabar -
                               12.0 * m_v2 * q2 * sigmabar * (1 + 2.0 * sigmabar) +
                               omega_1 * (2.0 * omega_1 + omega_2) * q2 * (-5.0 + 2.0 * sigmabar * (-8.0 + 5.0 * sigmabar))) -
                               2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-16.0 + sigmabar) * power_of<2>(q2) +
                               3.0 * m_B * (4.0 * omega_1 + omega_2) *
                               (5.0 * m_v4 + m_v2 * q2 * (5.0 + 8.0 * sigmabar) - 4.0 * sigmabar * power_of<2>(q2)))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d1B_T23A_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23A proportional to phi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * (3.0 * m_v4 * sigmabar + q2 * (3.0 * m_v2 + m_B2 * sigmabar2 * sigma + q2 * sigma * (-6.0 + sigma)) * sigmabar +
                               sigmabar2 * (3.0 * m_B3 * m_v * sigmabar2 - 3.0 * m_B * m_v * q2 + 6.0 * m_v2 * q2 +
                               5.0 * m_B2 * q2 * sigma * sigmabar) - sigma2 * sigmabar * power_of<2>(q2))
                             / (m_B * power_of<6>(sigmabar) * omega_2);

            return C_4 * phi_bar_bar_4;
        }

        double I4d1C_T23A_3pt_phi_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to phi_bar_bar_4

            return 0.0;
        }
        double I4d2A_T23A_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 =-(4.0 * (6.0 * m_B2 * sigma5 * q2 * (7.0 * q2 + 5.0 * m_B2 * sigmabar) -
                               m_B * sigma4 * q2 * (21 * (4.0 * omega_1 + omega_2) * q2 + 15.0 * m_B2 * (4.0 * omega_1 + omega_2) * sigmabar +
                               6.0 * m_B * q2 * (7.0 - 15.0 * sigmabar) + 10.0 * m_B3 * sigmabar * (6.0 + 5.0 * sigmabar)) +
                               sigma3 * (30 * m_B3 * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (1 + sigmabar) +
                               3.0 * m_B2 * q2 * sigmabar * (5.0 * omega_1 * (2.0 * omega_1 + omega_2) +
                               4.0 * q2 * (-19.0 + 5.0 * sigmabar)) +
                               2.0 * m_B4 * sigmabar * (-(m_v * (m_v - 15.0 * omega_2) * sigmabar) +
                               5.0 * q2 * (3.0 + 2.0 * sigmabar * (1 - 7.0 * sigmabar))) +
                               21 * omega_1 * (2.0 * omega_1 + omega_2) * power_of<2>(q2) -
                               3.0 * m_B * (4.0 * omega_1 + omega_2) * (-7.0 + 13.0 * sigmabar) * power_of<2>(q2)) +
                               sigma2 * (m_B3 * sigmabar * (m_v * (4.0 * m_v * omega_1 + m_v * omega_2 - 30 * omega_1 * omega_2) * sigmabar +
                               (4.0 * omega_1 + omega_2) * q2 * (-15.0 + 54 * sigmabar2 - 20.0 * sigmabar)) +
                               2.0 * m_B4 * sigmabar2 * (-(m_v2 * (-1 + sigmabar)) + 6.0 * m_v * omega_2 * (-5.0 + 3.0 * sigmabar) +
                               3.0 * q2 * (5.0 + 2.0 * sigmabar * (8.0 - 5.0 * sigmabar))) +
                               m_B2 * sigmabar * (90 * m_v4 + 30 * m_v2 * q2 * (3.0 + 4.0 * sigmabar) +
                               q2 * (12.0 * q2 * sigmabar * (-16.0 + sigmabar) -
                               5.0 * omega_1 * (2.0 * omega_1 + omega_2) * (6.0 + 7.0 * sigmabar))) +
                               3.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-7.0 + 11.0 * sigmabar) * power_of<2>(q2) -
                               3.0 * m_B * (4.0 * omega_1 + omega_2) * sigmabar * (-36 + 7.0 * sigmabar) * power_of<2>(q2)) +
                               sigmabar * (-(6.0 * m_B4 * m_v * omega_2 * sigmabar2 * (-2.0 + sigmabar)) -
                               m_B3 * sigmabar * ((4.0 * omega_1 + omega_2) * q2 * sigmabar * (1 + 5.0 * sigmabar) +
                               3.0 * m_v * omega_1 * omega_2 * (10.0 + sigmabar * (-8.0 + sigmabar))) +
                               m_B2 * sigmabar * (6.0 * m_v4 * sigmabar - 12.0 * m_v * omega_2 * q2 * sigmabar +
                               m_v2 * (-(omega_1 * (2.0 * omega_1 + omega_2) * (-1 + sigmabar)) +
                               6.0 * q2 * sigmabar * (1 + 2.0 * sigmabar)) -
                               omega_1 * (2.0 * omega_1 + omega_2) * q2 * (-5.0 + sigmabar * (-18.0 + 5.0 * sigmabar))) -
                               3.0 * m_B * sigmabar * (5.0 * m_v4 * (4.0 * omega_1 + omega_2) - 10.0 * m_v * omega_1 * omega_2 * q2 +
                               m_v2 * (4.0 * omega_1 + omega_2) * q2 * (5.0 + 8.0 * sigmabar) -
                               2.0 * (4.0 * omega_1 + omega_2) * sigmabar * power_of<2>(q2)) +
                               omega_1 * (2.0 * omega_1 + omega_2) *
                               (45 * m_v4 + 15.0 * m_v2 * q2 * (3.0 + 4.0 * sigmabar) + (-31 + sigmabar) * sigmabar * power_of<2>(q2))) +
                               sigma * sigmabar * (m_B3 * sigmabar * (m_v2 * (4.0 * omega_1 + omega_2) * (-1 + sigmabar) +
                               12.0 * m_v * omega_1 * omega_2 * (5.0 - 2.0 * sigmabar) +
                               (4.0 * omega_1 + omega_2) * q2 * (-10.0 + sigmabar * (-34 + 15.0 * sigmabar))) +
                               3.0 * m_B4 * sigmabar * (2.0 * q2 * sigmabar * (1 + 5.0 * sigmabar) +
                               m_v * omega_2 * (10.0 + sigmabar * (-16.0 + 3.0 * sigmabar))) +
                               m_B2 * (60 * m_v4 * sigmabar - 30 * m_v * omega_2 * q2 * sigmabar +
                               m_v2 * sigmabar * (-(omega_1 * (2.0 * omega_1 + omega_2)) + 12.0 * q2 * (5.0 + 8.0 * sigmabar)) +
                               q2 * (-36 * sigmabar2 * q2 - omega_1 * (2.0 * omega_1 + omega_2) * (-15.0 + sigmabar * (-30 + 37 * sigmabar)))) +
                               omega_1 * (2.0 * omega_1 + omega_2) * (-102 + 13.0 * sigmabar) * power_of<2>(q2) -
                               3.0 * m_B * (4.0 * omega_1 + omega_2) *
                               (15.0 * m_v4 + 5.0 * m_v2 * q2 * (3.0 + 4.0 * sigmabar) + (-21 + sigmabar) * sigmabar * power_of<2>(q2)))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<8>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d2B_T23A_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23A proportional to phi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_4     = this->phi_bar_4(omega_1, omega_2);
            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            return  pow(m_B,-1) * pow(omega_1 - m_B * sigma,-2.0) * pow(sigmabar,-7.0) *
                    (4.0 * phi_bar_bar_4 * (m_B * sigma4 * q2 * (6.0 * q2 + 5.0 * m_B2 * sigmabar) +
                    sigmabar * (3.0 * m_B * m_v2 * sigmabar * (m_v2 + q2 + 2.0 * q2 * sigmabar) -
                    omega_1 * (15.0 * m_v4 + 3.0 * m_v2 * q2 * (5.0 + 8.0 * sigmabar) -
                    6.0 * m_B * m_v * sigmabar * (2.0 * q2 + m_B2 * (-2.0 + sigmabar)) +
                    q2 * sigmabar * (-(6.0 * q2) + m_B2 * (1 + 5.0 * sigmabar)))) +
                    sigma3 * (12.0 * m_B4 * m_v * sigmabar2 - 5.0 * m_B2 * omega_1 * q2 * sigmabar -
                    2.0 * m_B3 * q2 * sigmabar * (5.0 + 8.0 * sigmabar) - 6.0 * omega_1 * power_of<2>(q2) +
                    3.0 * m_B * (-2.0 + 3.0 * sigmabar) * power_of<2>(q2)) +
                    sigma2 * (6.0 * m_B4 * m_v * sigmabar2 * (-4.0 + sigmabar) +
                    m_B2 * omega_1 * q2 * sigmabar * (10.0 + 17.0 * sigmabar) +
                    m_B3 * sigmabar * (-(12.0 * m_v * omega_1 * sigmabar) + q2 * (5.0 + sigmabar * (14.0 - 15.0 * sigmabar))) +
                    3.0 * m_B * sigmabar * (-11.0 + sigmabar) * power_of<2>(q2) +
                    2.0 * omega_1 * (3.0 - 4.0 * sigmabar) * power_of<2>(q2)) +
                    sigma * sigmabar * (-(6.0 * m_B4 * m_v * sigmabar * (-2.0 + sigmabar)) +
                    2.0 * m_B3 * sigmabar * (q2 + 5.0 * q2 * sigmabar - 3.0 * m_v * omega_1 * (-4.0 + sigmabar)) -
                    m_B2 * q2 * (12.0 * m_v * sigmabar + omega_1 * (5.0 + 2.0 * sigmabar * (8.0 - 5.0 * sigmabar))) -
                    2.0 * omega_1 * (-16.0 + sigmabar) * power_of<2>(q2) +
                    3.0 * m_B * (5.0 * m_v4 + m_v2 * q2 * (5.0 + 8.0 * sigmabar) - 4.0 * sigmabar * power_of<2>(q2)))) +
                    2.0 * m_B * (-omega_1 + m_B * sigma) * sigmabar *
                    (3.0 * m_v4 * sigmabar + q2 * (3.0 * m_v2 + m_B2 * sigmabar2 * sigma + q2 * sigma * (-6.0 + sigma)) * sigmabar +
                    sigmabar2 * (3.0 * m_B3 * m_v * sigmabar2 - 3.0 * m_B * m_v * q2 + 6.0 * m_v2 * q2 +
                    5.0 * m_B2 * q2 * sigma * sigmabar) - sigma2 * sigmabar * power_of<2>(q2)) * phi_bar_4);

        }

        double I4d2C_T23A_3pt_phi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to phi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * (3.0 * m_v4 * sigmabar + q2 * (3.0 * m_v2 + m_B2 * sigmabar2 * sigma + q2 * sigma * (-6.0 + sigma)) * sigmabar +
                               sigmabar2 * (-(3.0 * m_B3 * m_v * sigmabar2) + 3.0 * m_B * m_v * q2 + 6.0 * m_v2 * q2 +
                               5.0 * m_B2 * q2 * sigma * sigmabar) - sigma2 * sigmabar * power_of<2>(q2))
                             / (power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d2D_T23A_3pt_phi_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to T23A proportional to phi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double phi_bar_4     = this->phi_bar_4(omega_1, omega_2);
            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            return    2.0 * pow(m_B,-2.0) * pow(sigmabar,-7.0) *
                      (phi_bar_bar_4 * (3.0 * m_v4 * sigmabar +
                      q2 * (3.0 * m_v2 + m_B2 * sigmabar2 * sigma + 4.0 * q2 * sigma * (-2.0 + sigma)) * sigmabar +
                      m_B2 * sigmabar3 * (5.0 * q2 * (1 - 2.0 * sigma) - 6.0 * m_B * m_v * sigmabar) +
                      sigmabar2 * q2 * (2.0 * q2 * (-3.0 + sigma) - m_B2 * (-1 + 3.0 * sigma) * sigmabar) -
                      2.0 * sigma2 * sigmabar * power_of<2>(q2)) +
                      m_B * sigmabar * (3.0 * m_v4 * sigmabar + q2 * (3.0 * m_v2 + m_B2 * sigmabar2 * sigma + q2 * sigma * (-6.0 + sigma)) *
                      sigmabar + sigmabar2 * (3.0 * m_B3 * m_v * sigmabar2 - 3.0 * m_B * m_v * q2 + 6.0 * m_v2 * q2 +
                      5.0 * m_B2 * q2 * sigma * sigmabar) - sigma2 * sigmabar * power_of<2>(q2)) * phi_bar_4);
        }

        double I2_T23A_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - 0.0                                                         - I2_T23A_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3_T23A_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I3_T23A_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2)    - I3_T23A_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1A_T23A_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I3d1A_T23A_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I3d1A_T23A_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1B_T23A_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return - I3d1B_T23A_3pt_psiA_bar_bar_4( sigma, omega_1, q2)          - I3d1B_T23A_3pt_psiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I3d1C_T23A_3pt_psi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return - I3d1C_T23A_3pt_psiA_bar_bar_4( sigma, omega_2, q2)          - I3d1C_T23A_3pt_psiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4_T23A_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I4_T23A_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2)    - I4_T23A_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1A_T23A_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I4d1A_T23A_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d1A_T23A_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1B_T23A_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return - I4d1B_T23A_3pt_psiA_bar_bar_4( sigma, omega_1, q2)          - I4d1B_T23A_3pt_psiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d1C_T23A_3pt_psi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return - I4d1C_T23A_3pt_psiA_bar_bar_4( sigma, omega_2, q2)          - I4d1C_T23A_3pt_psiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2A_T23A_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I4d2A_T23A_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d2A_T23A_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d2B_T23A_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return - I4d2B_T23A_3pt_psiA_bar_bar_4( sigma, omega_1, q2)          - I4d2B_T23A_3pt_psiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d2C_T23A_3pt_psi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return - I4d2C_T23A_3pt_psiA_bar_bar_4( sigma, omega_2, q2)          - I4d2C_T23A_3pt_psiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2D_T23A_3pt_psi_bar_bar_4(const double & sigma, const double & q2) const
        {
            return - I4d2D_T23A_3pt_psiA_bar_bar_4( sigma, q2)                   - I4d2D_T23A_3pt_psiB_bar_bar_4(sigma, q2);
        }

        double I2_T23A_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to psi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_2 = -(2.0 * m_v + m_B * (-1.0 + 2.0 * u) * sigmabar) / (m_B2 * power_of<3>(sigmabar));

            return C_2 * psi_bar_4;
        }

        double I3_T23A_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to psi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * (m_v * m_v2 + m_B * m_v2 * (1.0 - 2.0 * u) * sigmabar + m_B * (-1.0 + 2.0 * u) * sigmabar * (-q2 + m_B2 * sigmabar2)
                               -m_v * (q2 - 4.0 * q2 * sigmabar + m_B2 * sigmabar2))
                             / (m_B2 * power_of<4>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I3d1A_T23A_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to psi_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = -(2.0 * (4.0 * m_v3 * omega_2 + 4.0 * m_B2 * sigma3 * q2 +
                               sigmabar * (-(m_B3 * (2.0 * omega_1 + omega_2) * sigmabar2) + 2.0 * m_B4 * sigmabar3 +
                               8.0 * m_v * omega_2 * q2 + 3.0 * m_B * (2.0 * omega_1 + omega_2) * (m_v2 + q2) -
                               2.0 * m_B2 * (m_v * (m_v + omega_2) + q2) * sigmabar) +
                               m_B * sigma2 * q2 * (-(2.0 * (2.0 * omega_1 + omega_2)) + m_B * (-4.0 + 5.0 * sigmabar)) +
                               sigma * (2.0 * m_B4 * sigmabar3 - 4.0 * m_v * omega_2 * q2 -
                               2.0 * m_B * (2.0 * omega_1 + omega_2) * q2 * (-1 + sigmabar) +
                               m_B2 * sigmabar * (-(6.0 * m_v2) + q2 * (-7.0 + sigmabar)))))
                             / (m_B2 * omega_2 * power_of<5>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I3d1B_T23A_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23A proportional to psi_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar3 = power_of<3>(sigmabar);

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = (2.0 * m_v3 + 2.0 * m_B3 * sigmabar3 - 2.0 * m_B * m_v2 * sigmabar - m_B * q2 * sigma * sigmabar +
                                m_B * q2 * (-2.0 + sigma) * sigmabar - 2.0 * m_v * (q2 * sigma + sigmabar * (-(3.0 * q2) + m_B2 * sigmabar)))
                             / (m_B * (-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I3d1C_T23A_3pt_psi_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to psi_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar3 = power_of<3>(sigmabar);

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = (-(2.0 * m_v3) + 2.0 * m_B3 * sigmabar3 - 2.0 * m_B * m_v2 * sigmabar - m_B * q2 * sigma * sigmabar +
                                m_B * q2 * (-2.0 + sigma) * sigmabar + 2.0 * m_v * (q2 * sigma + sigmabar * (-(3.0 * q2) + m_B2 * sigmabar)))
                             / (m_B * omega_2 * power_of<4>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I3_T23A_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to psi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 6.0 * m_v * u / (m_B * power_of<3>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1A_T23A_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to psi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 6.0 * m_v * (3.0 * sigma * m_B + m_B * sigmabar - 3.0 * omega_1)
                             / (m_B * omega_2 * power_of<4>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1B_T23A_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -6.0 * m_v
                             / ((-omega_1 + m_B * sigma) * power_of<3>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1C_T23A_3pt_psiA_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to psi_bar_bar_4

            return 0.0;
        }

        double I4_T23A_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to psi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_v * u * (m_v * m_v - 4.0 * sigma * q2 + m_B * m_v * (-1.0 + 2.0 * u) * sigmabar)
                             / (m_B * power_of<4>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1A_T23A_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2  = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_v *
                               (-(m_B * (m_B * m_v * omega_2 * sigmabar2 - 4.0 * omega_2 * sigma * (m_v2 - 4.0 * q2 * sigma) -
                               8.0 * m_B2 * m_v * sigma2 * sigmabar + 2.0 * m_B2 * m_v * sigma * (-2.0 + 3.0 * sigma) * sigmabar +
                               omega_2 * (-m_v2 + 3.0 * m_B * m_v * sigma + 8.0 * q2 * sigma) * sigmabar)) +
                               omega_1 * (-(4.0 * omega_2 * (m_v2 - 4.0 * q2 * sigma)) - 16.0 * m_B2 * m_v * sigma * sigmabar +
                               (3.0 * m_B * m_v * omega_2 + 4.0 * omega_2 * q2 + 4.0 * m_B2 * m_v * (-1 + 2.0 * sigma)) * sigmabar) -
                               2.0 * m_B * m_v * (-4.0 + 4.0 * sigma + sigmabar) * power_of<2>(omega_1))
                             / (m_B * power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1B_T23A_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23A proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * m_v * (m_v * m_v - 4.0 * sigma * q2 + m_B * m_v * sigmabar)
                             / (power_of<4>(sigmabar) * omega_2);

            return C_4 * psi_bar_bar_4;
        }

        double I4d1C_T23A_3pt_psiA_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to psi_bar_bar_4

            return 0.0;
        }
        double I4d2A_T23A_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 12.0 * m_v *
                               (m_B * (-(sigmabar2 * (3.0 * m_B * m_v * omega_2 + 4.0 * omega_2 * q2 + 2.0 * m_B2 * m_v * (-1 + 3.0 * sigma))) -
                               2.0 * (4.0 * m_B2 * m_v * sigma * (-2.0 + 3.0 * sigma) +
                               omega_2 * (-(2.0 * m_v2) + 3.0 * m_B * m_v * sigma + 16.0 * q2 * sigma)) * sigmabar +
                               10.0 * sigma * (omega_2 * (m_v2 - 4.0 * q2 * sigma) + 2.0 * m_B2 * m_v * sigma * sigmabar)) +
                               2.0 * omega_1 * (-(5.0 * m_v2 * omega_2) + 20.0 * m_B2 * m_v * sigma2 + 8.0 * omega_2 * q2 * sigmabar +
                               m_B * m_v * sigmabar * (3.0 * omega_2 + 2.0 * m_B * (-4.0 + sigmabar)) +
                               4.0 * sigma * (5.0 * omega_2 * q2 + m_B2 * m_v * (-5.0 + 4.0 * sigmabar))) -
                               4.0 * m_B * m_v * (-5.0 + 5.0 * sigma + 2.0 * sigmabar) * power_of<2>(omega_1))
                             / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2B_T23A_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23A proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_4     = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return  -(6.0 * m_v * ((-(8.0 * m_v2 * omega_1) - 32 * m_B * sigma2 * q2 + 2.0 * m_B2 * m_v * sigmabar -
                    6.0 * m_B * m_v * omega_1 * sigmabar + 8.0 * omega_1 * q2 * sigmabar +
                    4.0 * sigma * (8.0 * omega_1 * q2 + m_B * (2.0 * m_v2 + m_B * m_v * sigmabar - 2.0 * q2 * sigmabar))) *
                    psi_bar_bar_4 + m_B * (-omega_1 + m_B * sigma) * sigmabar * (m_v2 - 4.0 * q2 * sigma + m_B * m_v * sigmabar) * psi_bar_4))
                    / (power_of<2>(omega_2) * power_of<5>(sigmabar));
        }

        double I4d2C_T23A_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_B * m_v * (m_v2 - 4.0 * q2 * sigma - m_B * m_v * sigmabar) / (power_of<2>(omega_2) * power_of<4>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2D_T23A_3pt_psiA_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to T23A proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_4     = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return    pow(m_B,-1) * pow(sigmabar,-4.0) * (6.0 * m_v * (m_B * m_v + 4.0 * q2) * psi_bar_bar_4 -
                      6.0 * m_B * m_v * (m_v2 - 4.0 * q2 * sigma + m_B * m_v * sigmabar) * psi_bar_4);
        }

        double I2_T23A_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_2 = 2.0 * u * (-1.0 + 2.0 * u)
                             / (m_B2 * power_of<3>(sigmabar));

            return C_2 * psi_bar_bar_4;
        }

        double I3_T23A_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * u * (m_v2 * (-2.0 + 4.0 * u) + m_B * m_v * sigmabar - (-1.0 + 2.0 * u) * (m_B2 * sigmabar2 + q2 * (-7.0 + 4.0 * sigmabar)))
                             / (m_B2 * power_of<4>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1A_T23A_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma), sigma4   = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -(2.0 * (-(4.0 * sigma4 * (5.0 * m_B2 * q2 + 2.0 * m_B4 * sigmabar)) +
                                2.0 * m_B * sigma3 * (10.0 * m_B * q2 + 5.0 * (4.0 * omega_1 + omega_2) * q2 +
                                2.0 * m_B2 * (4.0 * omega_1 + omega_2) * sigmabar - 4.0 * m_B3 * sigmabar * (-2.0 + sigmabar)) +
                                sigma2 * (-(10.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2) -
                                2.0 * m_B * (4.0 * omega_1 + omega_2) * q2 * (5.0 + sigmabar) +
                                4.0 * m_B4 * sigmabar * (-2.0 + 3.0 * sigmabar) +
                                m_B3 * (4.0 * omega_1 + omega_2) * sigmabar * (-8.0 + 3.0 * sigmabar) +
                                4.0 * m_B2 * sigmabar * (4.0 * m_v2 - omega_1 * (2.0 * omega_1 + omega_2) + 3.0 * q2 * (3.0 + sigmabar))) +
                                sigma * (-(4.0 * m_B4 * sigmabar2) - 4.0 * m_B3 * (4.0 * omega_1 + omega_2) * (-1 + sigmabar) * sigmabar +
                                2.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (5.0 + 2.0 * sigmabar) +
                                m_B2 * sigmabar * (8.0 * m_v2 * sigmabar + 3.0 * m_v * omega_2 * sigmabar + 12.0 * q2 * sigmabar -
                                2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-4.0 + sigmabar)) -
                                4.0 * m_B * (4.0 * omega_1 + omega_2) * sigmabar * (2.0 * m_v2 + q2 * (4.0 + sigmabar))) +
                                sigmabar * (m_B3 * (4.0 * omega_1 + omega_2) * sigmabar -
                                m_B * (3.0 * m_v * omega_1 * omega_2 + 2.0 * m_v2 * (4.0 * omega_1 + omega_2) +
                                3.0 * (4.0 * omega_1 + omega_2) * q2) * sigmabar +
                                m_B2 * (m_v * omega_2 * sigmabar2 + 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-2.0 + sigmabar)) +
                                2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (4.0 * m_v2 + q2 * (7.0 + sigmabar)))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1B_T23A_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23A proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (m_B * m_v * sigmabar2 + 2.0 * q2 * sigma * sigmabar +
                               (2.0 * m_v2 - m_B2 * sigmabar2 + q2 * (3.0 + 2.0 * sigma)) * sigmabar)
                             / (m_B * (-omega_1 + m_B * sigma) * power_of<5>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1C_T23A_3pt_psiB_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to psi_bar_bar_4

            return 0.0;
        }

        double I4_T23A_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(6.0 * u * (m_v * (m_B3 * sigmabar3 - m_B * q2 * sigmabar) + m_v4 * (-1 + 2.0 * u) +
                                2.0 * q2 * (-(m_B2 * sigmabar2) + q2) * (-1 + sigmabar) * (-1 + 2.0 * u) +
                                m_v2 * q2 * (1 + 2.0 * sigmabar) * (-1 + 2.0 * u)))
                             / (m_B2 * power_of<5>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1A_T23A_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(2.0 * (2.0 * m_B2 * sigma5 * q2 * (6.0 * q2 + 5.0 * m_B2 * sigmabar) -
                               m_B * sigma4 * q2 * (6.0 * (4.0 * omega_1 + omega_2) * q2 +
                               5.0 * m_B2 * (4.0 * omega_1 + omega_2) * sigmabar + 10.0 * m_B3 * sigmabar * (2.0 + 3.0 * sigmabar) +
                               4.0 * m_B * q2 * (3.0 - 5.0 * sigmabar)) +
                               sigma3 * (2.0 * m_B3 * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (5.0 + 8.0 * sigmabar) +
                               m_B2 * q2 * sigmabar * (5.0 * omega_1 * (2.0 * omega_1 + omega_2) + q2 * (-68 + 8.0 * sigmabar)) +
                               2.0 * m_B4 * sigmabar * (6.0 * m_v * omega_2 * sigmabar +
                               q2 * (5.0 + 4.0 * sigmabar * (3.0 - 5.0 * sigmabar))) +
                               6.0 * omega_1 * (2.0 * omega_1 + omega_2) * power_of<2>(q2) -
                               3.0 * m_B * (4.0 * omega_1 + omega_2) * (-2.0 + 3.0 * sigmabar) * power_of<2>(q2)) +
                               sigma2 * (3.0 * m_B4 * sigmabar2 * (m_v * omega_2 * (-8.0 + 3.0 * sigmabar) + 2.0 * q2 * (1 + 5.0 * sigmabar)) +
                               m_B3 * sigmabar * (-(12.0 * m_v * omega_1 * omega_2 * sigmabar) +
                               (4.0 * omega_1 + omega_2) * q2 * (-5.0 + sigmabar * (-14.0 + 15.0 * sigmabar))) +
                               m_B2 * sigmabar * (30 * m_v4 + 6.0 * m_v2 * q2 * (5.0 + 8.0 * sigmabar) -
                               q2 * (36 * q2 * sigmabar + omega_1 * (2.0 * omega_1 + omega_2) * (10.0 + 17.0 * sigmabar))) -
                               3.0 * m_B * (4.0 * omega_1 + omega_2) * sigmabar * (-11.0 + sigmabar) * power_of<2>(q2) +
                               2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-3.0 + 4.0 * sigmabar) * power_of<2>(q2)) +
                               sigmabar * (3.0 * m_B4 * m_v * omega_2 * sigmabar2 +
                               6.0 * m_B3 * m_v * omega_1 * omega_2 * sigmabar * (-2.0 + sigmabar) -
                               3.0 * m_B * m_v * sigmabar * (m_v3 * (4.0 * omega_1 + omega_2) - 4.0 * omega_1 * omega_2 * q2 +
                               m_v * (4.0 * omega_1 + omega_2) * q2 * (1 + 2.0 * sigmabar)) +
                               m_B2 * q2 * sigmabar * (-(3.0 * m_v * omega_2 * sigmabar) +
                               omega_1 * (2.0 * omega_1 + omega_2) * (1 + 5.0 * sigmabar)) +
                               3.0 * omega_1 * (2.0 * omega_1 + omega_2) *
                               (5.0 * m_v4 + m_v2 * q2 * (5.0 + 8.0 * sigmabar) - 2.0 * sigmabar * power_of<2>(q2))) -
                               sigma * sigmabar * (12.0 * m_B4 * m_v * omega_2 * (-1 + sigmabar) * sigmabar +
                               2.0 * m_B3 * sigmabar * (3.0 * m_v * omega_1 * omega_2 * (-4.0 + sigmabar) +
                               (4.0 * omega_1 + omega_2) * q2 * (1 + 5.0 * sigmabar)) +
                               m_B2 * (-(12.0 * m_v4 * sigmabar) + 12.0 * m_v * omega_2 * q2 * sigmabar -
                               12.0 * m_v2 * q2 * sigmabar * (1 + 2.0 * sigmabar) +
                               omega_1 * (2.0 * omega_1 + omega_2) * q2 * (-5.0 + 2.0 * sigmabar * (-8.0 + 5.0 * sigmabar))) -
                               2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-16.0 + sigmabar) * power_of<2>(q2) +
                               3.0 * m_B * (4.0 * omega_1 + omega_2) *
                               (5.0 * m_v4 + m_v2 * q2 * (5.0 + 8.0 * sigmabar) - 4.0 * sigmabar * power_of<2>(q2)))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1B_T23A_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23A proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * (3.0 * m_v4 * sigmabar + q2 * (3.0 * m_v2 + m_B2 * sigmabar2 * sigma + q2 * sigma * (-6.0 + sigma)) * sigmabar +
                               sigmabar2 * (3.0 * m_B3 * m_v * sigmabar2 - 3.0 * m_B * m_v * q2 + 6.0 * m_v2 * q2 +
                               5.0 * m_B2 * q2 * sigma * sigmabar) - sigma2 * sigmabar * power_of<2>(q2))
                             / (m_B * power_of<6>(sigmabar) * omega_2);

            return C_4 * psi_bar_bar_4;
        }

        double I4d1C_T23A_3pt_psiB_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to psi_bar_bar_4

            return 0.0;
        }
        double I4d2A_T23A_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 =-(4.0 * (6.0 * m_B2 * sigma5 * q2 * (7.0 * q2 + 5.0 * m_B2 * sigmabar) -
                               m_B * sigma4 * q2 * (21 * (4.0 * omega_1 + omega_2) * q2 + 15.0 * m_B2 * (4.0 * omega_1 + omega_2) * sigmabar +
                               6.0 * m_B * q2 * (7.0 - 15.0 * sigmabar) + 10.0 * m_B3 * sigmabar * (6.0 + 5.0 * sigmabar)) +
                               sigma3 * (30 * m_B3 * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (1 + sigmabar) +
                               3.0 * m_B2 * q2 * sigmabar * (5.0 * omega_1 * (2.0 * omega_1 + omega_2) +
                               4.0 * q2 * (-19.0 + 5.0 * sigmabar)) +
                               2.0 * m_B4 * sigmabar * (-(m_v * (m_v - 15.0 * omega_2) * sigmabar) +
                               5.0 * q2 * (3.0 + 2.0 * sigmabar * (1 - 7.0 * sigmabar))) +
                               21 * omega_1 * (2.0 * omega_1 + omega_2) * power_of<2>(q2) -
                               3.0 * m_B * (4.0 * omega_1 + omega_2) * (-7.0 + 13.0 * sigmabar) * power_of<2>(q2)) +
                               sigma2 * (m_B3 * sigmabar * (m_v * (4.0 * m_v * omega_1 + m_v * omega_2 - 30 * omega_1 * omega_2) * sigmabar +
                               (4.0 * omega_1 + omega_2) * q2 * (-15.0 + 54 * sigmabar2 - 20.0 * sigmabar)) +
                               2.0 * m_B4 * sigmabar2 * (-(m_v2 * (-1 + sigmabar)) + 6.0 * m_v * omega_2 * (-5.0 + 3.0 * sigmabar) +
                               3.0 * q2 * (5.0 + 2.0 * sigmabar * (8.0 - 5.0 * sigmabar))) +
                               m_B2 * sigmabar * (90 * m_v4 + 30 * m_v2 * q2 * (3.0 + 4.0 * sigmabar) +
                               q2 * (12.0 * q2 * sigmabar * (-16.0 + sigmabar) -
                               5.0 * omega_1 * (2.0 * omega_1 + omega_2) * (6.0 + 7.0 * sigmabar))) +
                               3.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-7.0 + 11.0 * sigmabar) * power_of<2>(q2) -
                               3.0 * m_B * (4.0 * omega_1 + omega_2) * sigmabar * (-36 + 7.0 * sigmabar) * power_of<2>(q2)) +
                               sigmabar * (-(6.0 * m_B4 * m_v * omega_2 * sigmabar2 * (-2.0 + sigmabar)) -
                               m_B3 * sigmabar * ((4.0 * omega_1 + omega_2) * q2 * sigmabar * (1 + 5.0 * sigmabar) +
                               3.0 * m_v * omega_1 * omega_2 * (10.0 + sigmabar * (-8.0 + sigmabar))) +
                               m_B2 * sigmabar * (6.0 * m_v4 * sigmabar - 12.0 * m_v * omega_2 * q2 * sigmabar +
                               m_v2 * (-(omega_1 * (2.0 * omega_1 + omega_2) * (-1 + sigmabar)) +
                               6.0 * q2 * sigmabar * (1 + 2.0 * sigmabar)) -
                               omega_1 * (2.0 * omega_1 + omega_2) * q2 * (-5.0 + sigmabar * (-18.0 + 5.0 * sigmabar))) -
                               3.0 * m_B * sigmabar * (5.0 * m_v4 * (4.0 * omega_1 + omega_2) - 10.0 * m_v * omega_1 * omega_2 * q2 +
                               m_v2 * (4.0 * omega_1 + omega_2) * q2 * (5.0 + 8.0 * sigmabar) -
                               2.0 * (4.0 * omega_1 + omega_2) * sigmabar * power_of<2>(q2)) +
                               omega_1 * (2.0 * omega_1 + omega_2) *
                               (45 * m_v4 + 15.0 * m_v2 * q2 * (3.0 + 4.0 * sigmabar) + (-31 + sigmabar) * sigmabar * power_of<2>(q2))) +
                               sigma * sigmabar * (m_B3 * sigmabar * (m_v2 * (4.0 * omega_1 + omega_2) * (-1 + sigmabar) +
                               12.0 * m_v * omega_1 * omega_2 * (5.0 - 2.0 * sigmabar) +
                               (4.0 * omega_1 + omega_2) * q2 * (-10.0 + sigmabar * (-34 + 15.0 * sigmabar))) +
                               3.0 * m_B4 * sigmabar * (2.0 * q2 * sigmabar * (1 + 5.0 * sigmabar) +
                               m_v * omega_2 * (10.0 + sigmabar * (-16.0 + 3.0 * sigmabar))) +
                               m_B2 * (60 * m_v4 * sigmabar - 30 * m_v * omega_2 * q2 * sigmabar +
                               m_v2 * sigmabar * (-(omega_1 * (2.0 * omega_1 + omega_2)) + 12.0 * q2 * (5.0 + 8.0 * sigmabar)) +
                               q2 * (-36 * sigmabar2 * q2 - omega_1 * (2.0 * omega_1 + omega_2) * (-15.0 + sigmabar * (-30 + 37 * sigmabar)))) +
                               omega_1 * (2.0 * omega_1 + omega_2) * (-102 + 13.0 * sigmabar) * power_of<2>(q2) -
                               3.0 * m_B * (4.0 * omega_1 + omega_2) *
                               (15.0 * m_v4 + 5.0 * m_v2 * q2 * (3.0 + 4.0 * sigmabar) + (-21 + sigmabar) * sigmabar * power_of<2>(q2)))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<8>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2B_T23A_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23A proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_4     = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return  pow(m_B,-1) * pow(omega_1 - m_B * sigma,-2.0) * pow(sigmabar,-7.0) *
                    (4.0 * psi_bar_bar_4 * (m_B * sigma4 * q2 * (6.0 * q2 + 5.0 * m_B2 * sigmabar) +
                    sigmabar * (3.0 * m_B * m_v2 * sigmabar * (m_v2 + q2 + 2.0 * q2 * sigmabar) -
                    omega_1 * (15.0 * m_v4 + 3.0 * m_v2 * q2 * (5.0 + 8.0 * sigmabar) -
                    6.0 * m_B * m_v * sigmabar * (2.0 * q2 + m_B2 * (-2.0 + sigmabar)) +
                    q2 * sigmabar * (-(6.0 * q2) + m_B2 * (1 + 5.0 * sigmabar)))) +
                    sigma3 * (12.0 * m_B4 * m_v * sigmabar2 - 5.0 * m_B2 * omega_1 * q2 * sigmabar -
                    2.0 * m_B3 * q2 * sigmabar * (5.0 + 8.0 * sigmabar) - 6.0 * omega_1 * power_of<2>(q2) +
                    3.0 * m_B * (-2.0 + 3.0 * sigmabar) * power_of<2>(q2)) +
                    sigma2 * (6.0 * m_B4 * m_v * sigmabar2 * (-4.0 + sigmabar) +
                    m_B2 * omega_1 * q2 * sigmabar * (10.0 + 17.0 * sigmabar) +
                    m_B3 * sigmabar * (-(12.0 * m_v * omega_1 * sigmabar) + q2 * (5.0 + sigmabar * (14.0 - 15.0 * sigmabar))) +
                    3.0 * m_B * sigmabar * (-11.0 + sigmabar) * power_of<2>(q2) +
                    2.0 * omega_1 * (3.0 - 4.0 * sigmabar) * power_of<2>(q2)) +
                    sigma * sigmabar * (-(6.0 * m_B4 * m_v * sigmabar * (-2.0 + sigmabar)) +
                    2.0 * m_B3 * sigmabar * (q2 + 5.0 * q2 * sigmabar - 3.0 * m_v * omega_1 * (-4.0 + sigmabar)) -
                    m_B2 * q2 * (12.0 * m_v * sigmabar + omega_1 * (5.0 + 2.0 * sigmabar * (8.0 - 5.0 * sigmabar))) -
                    2.0 * omega_1 * (-16.0 + sigmabar) * power_of<2>(q2) +
                    3.0 * m_B * (5.0 * m_v4 + m_v2 * q2 * (5.0 + 8.0 * sigmabar) - 4.0 * sigmabar * power_of<2>(q2)))) +
                    2.0 * m_B * (-omega_1 + m_B * sigma) * sigmabar *
                    (3.0 * m_v4 * sigmabar + q2 * (3.0 * m_v2 + m_B2 * sigmabar2 * sigma + q2 * sigma * (-6.0 + sigma)) * sigmabar +
                    sigmabar2 * (3.0 * m_B3 * m_v * sigmabar2 - 3.0 * m_B * m_v * q2 + 6.0 * m_v2 * q2 +
                    5.0 * m_B2 * q2 * sigma * sigmabar) - sigma2 * sigmabar * power_of<2>(q2)) * psi_bar_4);

        }

        double I4d2C_T23A_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * (3.0 * m_v4 * sigmabar + q2 * (3.0 * m_v2 + m_B2 * sigmabar2 * sigma + q2 * sigma * (-6.0 + sigma)) * sigmabar +
                               sigmabar2 * (-(3.0 * m_B3 * m_v * sigmabar2) + 3.0 * m_B * m_v * q2 + 6.0 * m_v2 * q2 +
                               5.0 * m_B2 * q2 * sigma * sigmabar) - sigma2 * sigmabar * power_of<2>(q2))
                             / (power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2D_T23A_3pt_psiB_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to T23A proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double psi_bar_4     = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return    2.0 * pow(m_B,-2.0) * pow(sigmabar,-7.0) *
                      (psi_bar_bar_4 * (3.0 * m_v4 * sigmabar +
                      q2 * (3.0 * m_v2 + m_B2 * sigmabar2 * sigma + 4.0 * q2 * sigma * (-2.0 + sigma)) * sigmabar +
                      m_B2 * sigmabar3 * (5.0 * q2 * (1 - 2.0 * sigma) - 6.0 * m_B * m_v * sigmabar) +
                      sigmabar2 * q2 * (2.0 * q2 * (-3.0 + sigma) - m_B2 * (-1 + 3.0 * sigma) * sigmabar) -
                      2.0 * sigma2 * sigmabar * power_of<2>(q2)) +
                      m_B * sigmabar * (3.0 * m_v4 * sigmabar + q2 * (3.0 * m_v2 + m_B2 * sigmabar2 * sigma + q2 * sigma * (-6.0 + sigma)) *
                      sigmabar + sigmabar2 * (3.0 * m_B3 * m_v * sigmabar2 - 3.0 * m_B * m_v * q2 + 6.0 * m_v2 * q2 +
                      5.0 * m_B2 * q2 * sigma * sigmabar) - sigma2 * sigmabar * power_of<2>(q2)) * psi_bar_4);
        }

        double I2_T23A_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to chi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_2 = (2.0 * m_v + m_B * (1.0 - 2.0 * u) * sigmabar) / (m_B2 * power_of<3>(sigmabar));

            return C_2 * chi_bar_4;
        }

        double I3_T23A_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to chi_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (m_v3 + m_B2 * m_v * sigmabar2 + m_B3 * sigmabar3 + m_v * q2 * (-1 + 4.0 * sigmabar) +
                               m_B * m_v2 * sigmabar * (-1 + 2.0 * u) + m_B * q2 * sigmabar * (-1 - 4.0 * (-1 + sigmabar) * u))
                             / (m_B2 * power_of<4>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I3d1A_T23A_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to chi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (4.0 * m_v3 * omega_2 + m_B * m_v2 * sigmabar *
                               (-(6.0 * omega_1) - 3.0 * omega_2 + 6.0 * m_B * sigma + 2.0 * m_B * sigmabar) +
                               m_B * sigmabar * (m_B2 * omega_2 * sigmabar2 - 3.0 * omega_2 * q2 + 12.0 * m_B * sigma2 * q2 +
                               8.0 * m_B * q2 * sigma * sigmabar - 4.0 * omega_1 * q2 * (3.0 * sigma + sigmabar)) +
                               2.0 * m_v * omega_2 * (-(2.0 * q2 * sigma) + sigmabar * (4.0 * q2 + m_B2 * sigmabar)))
                             / (m_B2 * omega_2 * power_of<5>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I3d1B_T23A_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23A proportional to chi_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar3 = power_of<3>(sigmabar);

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = -(2.0 * (m_v3 + m_B3 * sigmabar3 - m_v * q2 * sigma + m_B * m_v2 * sigmabar +
                                m_B * q2 * (-1 + 4.0 * sigma) * sigmabar + m_v * sigmabar * (3.0 * q2 + m_B2 * sigmabar)))
                             / (m_B * (-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I3d1C_T23A_3pt_chi_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to chi_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar3 = power_of<3>(sigmabar);

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (m_v3 + m_B3 * sigmabar3 - m_v * q2 * sigma - m_B * m_v2 * sigmabar - m_B * q2 * sigmabar +
                               m_v * sigmabar * (3.0 * q2 + m_B2 * sigmabar))
                             / (m_B * omega_2 * power_of<4>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I3_T23A_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to chi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 6.0 * m_v * u / (m_B * power_of<3>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1A_T23A_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to chi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 6.0 * m_v * (3.0 * sigma * m_B + m_B * sigmabar - 3.0 * omega_1)
                             / (m_B * omega_2 * power_of<4>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1B_T23A_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -6.0 * m_v
                             / ((-omega_1 + m_B * sigma) * power_of<3>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1C_T23A_3pt_chiA_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to chi_bar_bar_4

            return 0.0;
        }

        double I4_T23A_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to chi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_v * u * (m_v * m_v - 4.0 * sigma * q2 + m_B * m_v * (-1.0 + 2.0 * u) * sigmabar)
                             / (m_B * power_of<4>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1A_T23A_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2  = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_v *
                               (-(m_B * (m_B * m_v * omega_2 * sigmabar2 - 4.0 * omega_2 * sigma * (m_v2 - 4.0 * q2 * sigma) -
                               8.0 * m_B2 * m_v * sigma2 * sigmabar + 2.0 * m_B2 * m_v * sigma * (-2.0 + 3.0 * sigma) * sigmabar +
                               omega_2 * (-m_v2 + 3.0 * m_B * m_v * sigma + 8.0 * q2 * sigma) * sigmabar)) +
                               omega_1 * (-(4.0 * omega_2 * (m_v2 - 4.0 * q2 * sigma)) - 16.0 * m_B2 * m_v * sigma * sigmabar +
                               (3.0 * m_B * m_v * omega_2 + 4.0 * omega_2 * q2 + 4.0 * m_B2 * m_v * (-1 + 2.0 * sigma)) * sigmabar) -
                               2.0 * m_B * m_v * (-4.0 + 4.0 * sigma + sigmabar) * power_of<2>(omega_1))
                             / (m_B * power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1B_T23A_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23A proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -6.0 * m_v * (m_v * m_v - 4.0 * sigma * q2 + m_B * m_v * sigmabar)
                             / (power_of<4>(sigmabar) * omega_2);

            return C_4 * chi_bar_bar_4;
        }

        double I4d1C_T23A_3pt_chiA_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to chi_bar_bar_4

            return 0.0;
        }
        double I4d2A_T23A_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 12.0 * m_v *
                               (m_B * (-(sigmabar2 * (3.0 * m_B * m_v * omega_2 + 4.0 * omega_2 * q2 + 2.0 * m_B2 * m_v * (-1 + 3.0 * sigma))) -
                               2.0 * (4.0 * m_B2 * m_v * sigma * (-2.0 + 3.0 * sigma) +
                               omega_2 * (-(2.0 * m_v2) + 3.0 * m_B * m_v * sigma + 16.0 * q2 * sigma)) * sigmabar +
                               10.0 * sigma * (omega_2 * (m_v2 - 4.0 * q2 * sigma) + 2.0 * m_B2 * m_v * sigma * sigmabar)) +
                               2.0 * omega_1 * (-(5.0 * m_v2 * omega_2) + 20.0 * m_B2 * m_v * sigma2 + 8.0 * omega_2 * q2 * sigmabar +
                               m_B * m_v * sigmabar * (3.0 * omega_2 + 2.0 * m_B * (-4.0 + sigmabar)) +
                               4.0 * sigma * (5.0 * omega_2 * q2 + m_B2 * m_v * (-5.0 + 4.0 * sigmabar))) -
                               4.0 * m_B * m_v * (-5.0 + 5.0 * sigma + 2.0 * sigmabar) * power_of<2>(omega_1))
                             / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2B_T23A_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23A proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_4     = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return  -(6.0 * m_v * ((-(8.0 * m_v2 * omega_1) - 32 * m_B * sigma2 * q2 + 2.0 * m_B2 * m_v * sigmabar -
                    6.0 * m_B * m_v * omega_1 * sigmabar + 8.0 * omega_1 * q2 * sigmabar +
                    4.0 * sigma * (8.0 * omega_1 * q2 + m_B * (2.0 * m_v2 + m_B * m_v * sigmabar - 2.0 * q2 * sigmabar))) *
                    chi_bar_bar_4 + m_B * (-omega_1 + m_B * sigma) * sigmabar * (m_v2 - 4.0 * q2 * sigma + m_B * m_v * sigmabar) * chi_bar_4))
                    / (power_of<2>(omega_2) * power_of<5>(sigmabar));
        }

        double I4d2C_T23A_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_B * m_v * (m_v2 - 4.0 * q2 * sigma - m_B * m_v * sigmabar) / (power_of<2>(omega_2) * power_of<4>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2D_T23A_3pt_chiA_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to T23A proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_4     = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return    pow(m_B,-1) * pow(sigmabar,-4.0) * (6.0 * m_v * (m_B * m_v + 4.0 * q2) * chi_bar_bar_4 -
                      6.0 * m_B * m_v * (m_v2 - 4.0 * q2 * sigma + m_B * m_v * sigmabar) * chi_bar_4);
        }

        double I2_T23A_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_2 = 2.0 * u * (-1.0 + 2.0 * u)
                             / (m_B2 * power_of<3>(sigmabar));

            return C_2 * chi_bar_bar_4;
        }

        double I3_T23A_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -2.0 * u * (m_v2 * (-2.0 + 4.0 * u) + m_B * m_v * sigmabar - (-1.0 + 2.0 * u) * (m_B2 * sigmabar2 + q2 * (-7.0 + 4.0 * sigmabar)))
                             / (m_B2 * power_of<4>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1A_T23A_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma), sigma4   = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -(2.0 * (-(4.0 * sigma4 * (5.0 * m_B2 * q2 + 2.0 * m_B4 * sigmabar)) +
                                2.0 * m_B * sigma3 * (10.0 * m_B * q2 + 5.0 * (4.0 * omega_1 + omega_2) * q2 +
                                2.0 * m_B2 * (4.0 * omega_1 + omega_2) * sigmabar - 4.0 * m_B3 * sigmabar * (-2.0 + sigmabar)) +
                                sigma2 * (-(10.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2) -
                                2.0 * m_B * (4.0 * omega_1 + omega_2) * q2 * (5.0 + sigmabar) +
                                4.0 * m_B4 * sigmabar * (-2.0 + 3.0 * sigmabar) +
                                m_B3 * (4.0 * omega_1 + omega_2) * sigmabar * (-8.0 + 3.0 * sigmabar) +
                                4.0 * m_B2 * sigmabar * (4.0 * m_v2 - omega_1 * (2.0 * omega_1 + omega_2) + 3.0 * q2 * (3.0 + sigmabar))) +
                                sigma * (-(4.0 * m_B4 * sigmabar2) - 4.0 * m_B3 * (4.0 * omega_1 + omega_2) * (-1 + sigmabar) * sigmabar +
                                2.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (5.0 + 2.0 * sigmabar) +
                                m_B2 * sigmabar * (8.0 * m_v2 * sigmabar + 3.0 * m_v * omega_2 * sigmabar + 12.0 * q2 * sigmabar -
                                2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-4.0 + sigmabar)) -
                                4.0 * m_B * (4.0 * omega_1 + omega_2) * sigmabar * (2.0 * m_v2 + q2 * (4.0 + sigmabar))) +
                                sigmabar * (m_B3 * (4.0 * omega_1 + omega_2) * sigmabar -
                                m_B * (3.0 * m_v * omega_1 * omega_2 + 2.0 * m_v2 * (4.0 * omega_1 + omega_2) +
                                3.0 * (4.0 * omega_1 + omega_2) * q2) * sigmabar +
                                m_B2 * (m_v * omega_2 * sigmabar2 + 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-2.0 + sigmabar)) +
                                2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (4.0 * m_v2 + q2 * (7.0 + sigmabar)))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1B_T23A_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23A proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (m_B * m_v * sigmabar2 + 2.0 * q2 * sigma * sigmabar +
                               (2.0 * m_v2 - m_B2 * sigmabar2 + q2 * (3.0 + 2.0 * sigma)) * sigmabar)
                             / (m_B * (-omega_1 + m_B * sigma) * power_of<5>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1C_T23A_3pt_chiB_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to chi_bar_bar_4

            return 0.0;
        }

        double I4_T23A_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(6.0 * u * (m_v * (m_B3 * sigmabar3 - m_B * q2 * sigmabar) + m_v4 * (-1 + 2.0 * u) +
                                2.0 * q2 * (-(m_B2 * sigmabar2) + q2) * (-1 + sigmabar) * (-1 + 2.0 * u) +
                                m_v2 * q2 * (1 + 2.0 * sigmabar) * (-1 + 2.0 * u)))
                             / (m_B2 * power_of<5>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1A_T23A_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(2.0 * (2.0 * m_B2 * sigma5 * q2 * (6.0 * q2 + 5.0 * m_B2 * sigmabar) -
                               m_B * sigma4 * q2 * (6.0 * (4.0 * omega_1 + omega_2) * q2 +
                               5.0 * m_B2 * (4.0 * omega_1 + omega_2) * sigmabar + 10.0 * m_B3 * sigmabar * (2.0 + 3.0 * sigmabar) +
                               4.0 * m_B * q2 * (3.0 - 5.0 * sigmabar)) +
                               sigma3 * (2.0 * m_B3 * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (5.0 + 8.0 * sigmabar) +
                               m_B2 * q2 * sigmabar * (5.0 * omega_1 * (2.0 * omega_1 + omega_2) + q2 * (-68 + 8.0 * sigmabar)) +
                               2.0 * m_B4 * sigmabar * (6.0 * m_v * omega_2 * sigmabar +
                               q2 * (5.0 + 4.0 * sigmabar * (3.0 - 5.0 * sigmabar))) +
                               6.0 * omega_1 * (2.0 * omega_1 + omega_2) * power_of<2>(q2) -
                               3.0 * m_B * (4.0 * omega_1 + omega_2) * (-2.0 + 3.0 * sigmabar) * power_of<2>(q2)) +
                               sigma2 * (3.0 * m_B4 * sigmabar2 * (m_v * omega_2 * (-8.0 + 3.0 * sigmabar) + 2.0 * q2 * (1 + 5.0 * sigmabar)) +
                               m_B3 * sigmabar * (-(12.0 * m_v * omega_1 * omega_2 * sigmabar) +
                               (4.0 * omega_1 + omega_2) * q2 * (-5.0 + sigmabar * (-14.0 + 15.0 * sigmabar))) +
                               m_B2 * sigmabar * (30 * m_v4 + 6.0 * m_v2 * q2 * (5.0 + 8.0 * sigmabar) -
                               q2 * (36 * q2 * sigmabar + omega_1 * (2.0 * omega_1 + omega_2) * (10.0 + 17.0 * sigmabar))) -
                               3.0 * m_B * (4.0 * omega_1 + omega_2) * sigmabar * (-11.0 + sigmabar) * power_of<2>(q2) +
                               2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-3.0 + 4.0 * sigmabar) * power_of<2>(q2)) +
                               sigmabar * (3.0 * m_B4 * m_v * omega_2 * sigmabar2 +
                               6.0 * m_B3 * m_v * omega_1 * omega_2 * sigmabar * (-2.0 + sigmabar) -
                               3.0 * m_B * m_v * sigmabar * (m_v3 * (4.0 * omega_1 + omega_2) - 4.0 * omega_1 * omega_2 * q2 +
                               m_v * (4.0 * omega_1 + omega_2) * q2 * (1 + 2.0 * sigmabar)) +
                               m_B2 * q2 * sigmabar * (-(3.0 * m_v * omega_2 * sigmabar) +
                               omega_1 * (2.0 * omega_1 + omega_2) * (1 + 5.0 * sigmabar)) +
                               3.0 * omega_1 * (2.0 * omega_1 + omega_2) *
                               (5.0 * m_v4 + m_v2 * q2 * (5.0 + 8.0 * sigmabar) - 2.0 * sigmabar * power_of<2>(q2))) -
                               sigma * sigmabar * (12.0 * m_B4 * m_v * omega_2 * (-1 + sigmabar) * sigmabar +
                               2.0 * m_B3 * sigmabar * (3.0 * m_v * omega_1 * omega_2 * (-4.0 + sigmabar) +
                               (4.0 * omega_1 + omega_2) * q2 * (1 + 5.0 * sigmabar)) +
                               m_B2 * (-(12.0 * m_v4 * sigmabar) + 12.0 * m_v * omega_2 * q2 * sigmabar -
                               12.0 * m_v2 * q2 * sigmabar * (1 + 2.0 * sigmabar) +
                               omega_1 * (2.0 * omega_1 + omega_2) * q2 * (-5.0 + 2.0 * sigmabar * (-8.0 + 5.0 * sigmabar))) -
                               2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-16.0 + sigmabar) * power_of<2>(q2) +
                               3.0 * m_B * (4.0 * omega_1 + omega_2) *
                               (5.0 * m_v4 + m_v2 * q2 * (5.0 + 8.0 * sigmabar) - 4.0 * sigmabar * power_of<2>(q2)))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1B_T23A_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23A proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * (3.0 * m_v4 * sigmabar + q2 * (3.0 * m_v2 + m_B2 * sigmabar2 * sigma + q2 * sigma * (-6.0 + sigma)) * sigmabar +
                               sigmabar2 * (3.0 * m_B3 * m_v * sigmabar2 - 3.0 * m_B * m_v * q2 + 6.0 * m_v2 * q2 +
                               5.0 * m_B2 * q2 * sigma * sigmabar) - sigma2 * sigmabar * power_of<2>(q2))
                             / (m_B * power_of<6>(sigmabar) * omega_2);

            return C_4 * chi_bar_bar_4;
        }

        double I4d1C_T23A_3pt_chiB_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T23A proportional to chi_bar_bar_4

            return 0.0;
        }
        double I4d2A_T23A_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 =-(4.0 * (6.0 * m_B2 * sigma5 * q2 * (7.0 * q2 + 5.0 * m_B2 * sigmabar) -
                               m_B * sigma4 * q2 * (21 * (4.0 * omega_1 + omega_2) * q2 + 15.0 * m_B2 * (4.0 * omega_1 + omega_2) * sigmabar +
                               6.0 * m_B * q2 * (7.0 - 15.0 * sigmabar) + 10.0 * m_B3 * sigmabar * (6.0 + 5.0 * sigmabar)) +
                               sigma3 * (30 * m_B3 * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (1 + sigmabar) +
                               3.0 * m_B2 * q2 * sigmabar * (5.0 * omega_1 * (2.0 * omega_1 + omega_2) +
                               4.0 * q2 * (-19.0 + 5.0 * sigmabar)) +
                               2.0 * m_B4 * sigmabar * (-(m_v * (m_v - 15.0 * omega_2) * sigmabar) +
                               5.0 * q2 * (3.0 + 2.0 * sigmabar * (1 - 7.0 * sigmabar))) +
                               21 * omega_1 * (2.0 * omega_1 + omega_2) * power_of<2>(q2) -
                               3.0 * m_B * (4.0 * omega_1 + omega_2) * (-7.0 + 13.0 * sigmabar) * power_of<2>(q2)) +
                               sigma2 * (m_B3 * sigmabar * (m_v * (4.0 * m_v * omega_1 + m_v * omega_2 - 30 * omega_1 * omega_2) * sigmabar +
                               (4.0 * omega_1 + omega_2) * q2 * (-15.0 + 54 * sigmabar2 - 20.0 * sigmabar)) +
                               2.0 * m_B4 * sigmabar2 * (-(m_v2 * (-1 + sigmabar)) + 6.0 * m_v * omega_2 * (-5.0 + 3.0 * sigmabar) +
                               3.0 * q2 * (5.0 + 2.0 * sigmabar * (8.0 - 5.0 * sigmabar))) +
                               m_B2 * sigmabar * (90 * m_v4 + 30 * m_v2 * q2 * (3.0 + 4.0 * sigmabar) +
                               q2 * (12.0 * q2 * sigmabar * (-16.0 + sigmabar) -
                               5.0 * omega_1 * (2.0 * omega_1 + omega_2) * (6.0 + 7.0 * sigmabar))) +
                               3.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-7.0 + 11.0 * sigmabar) * power_of<2>(q2) -
                               3.0 * m_B * (4.0 * omega_1 + omega_2) * sigmabar * (-36 + 7.0 * sigmabar) * power_of<2>(q2)) +
                               sigmabar * (-(6.0 * m_B4 * m_v * omega_2 * sigmabar2 * (-2.0 + sigmabar)) -
                               m_B3 * sigmabar * ((4.0 * omega_1 + omega_2) * q2 * sigmabar * (1 + 5.0 * sigmabar) +
                               3.0 * m_v * omega_1 * omega_2 * (10.0 + sigmabar * (-8.0 + sigmabar))) +
                               m_B2 * sigmabar * (6.0 * m_v4 * sigmabar - 12.0 * m_v * omega_2 * q2 * sigmabar +
                               m_v2 * (-(omega_1 * (2.0 * omega_1 + omega_2) * (-1 + sigmabar)) +
                               6.0 * q2 * sigmabar * (1 + 2.0 * sigmabar)) -
                               omega_1 * (2.0 * omega_1 + omega_2) * q2 * (-5.0 + sigmabar * (-18.0 + 5.0 * sigmabar))) -
                               3.0 * m_B * sigmabar * (5.0 * m_v4 * (4.0 * omega_1 + omega_2) - 10.0 * m_v * omega_1 * omega_2 * q2 +
                               m_v2 * (4.0 * omega_1 + omega_2) * q2 * (5.0 + 8.0 * sigmabar) -
                               2.0 * (4.0 * omega_1 + omega_2) * sigmabar * power_of<2>(q2)) +
                               omega_1 * (2.0 * omega_1 + omega_2) *
                               (45 * m_v4 + 15.0 * m_v2 * q2 * (3.0 + 4.0 * sigmabar) + (-31 + sigmabar) * sigmabar * power_of<2>(q2))) +
                               sigma * sigmabar * (m_B3 * sigmabar * (m_v2 * (4.0 * omega_1 + omega_2) * (-1 + sigmabar) +
                               12.0 * m_v * omega_1 * omega_2 * (5.0 - 2.0 * sigmabar) +
                               (4.0 * omega_1 + omega_2) * q2 * (-10.0 + sigmabar * (-34 + 15.0 * sigmabar))) +
                               3.0 * m_B4 * sigmabar * (2.0 * q2 * sigmabar * (1 + 5.0 * sigmabar) +
                               m_v * omega_2 * (10.0 + sigmabar * (-16.0 + 3.0 * sigmabar))) +
                               m_B2 * (60 * m_v4 * sigmabar - 30 * m_v * omega_2 * q2 * sigmabar +
                               m_v2 * sigmabar * (-(omega_1 * (2.0 * omega_1 + omega_2)) + 12.0 * q2 * (5.0 + 8.0 * sigmabar)) +
                               q2 * (-36 * sigmabar2 * q2 - omega_1 * (2.0 * omega_1 + omega_2) * (-15.0 + sigmabar * (-30 + 37 * sigmabar)))) +
                               omega_1 * (2.0 * omega_1 + omega_2) * (-102 + 13.0 * sigmabar) * power_of<2>(q2) -
                               3.0 * m_B * (4.0 * omega_1 + omega_2) *
                               (15.0 * m_v4 + 5.0 * m_v2 * q2 * (3.0 + 4.0 * sigmabar) + (-21 + sigmabar) * sigmabar * power_of<2>(q2)))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<8>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2B_T23A_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23A proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_4     = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return  pow(m_B,-1) * pow(omega_1 - m_B * sigma,-2.0) * pow(sigmabar,-7.0) *
                    (4.0 * chi_bar_bar_4 * (m_B * sigma4 * q2 * (6.0 * q2 + 5.0 * m_B2 * sigmabar) +
                    sigmabar * (3.0 * m_B * m_v2 * sigmabar * (m_v2 + q2 + 2.0 * q2 * sigmabar) -
                    omega_1 * (15.0 * m_v4 + 3.0 * m_v2 * q2 * (5.0 + 8.0 * sigmabar) -
                    6.0 * m_B * m_v * sigmabar * (2.0 * q2 + m_B2 * (-2.0 + sigmabar)) +
                    q2 * sigmabar * (-(6.0 * q2) + m_B2 * (1 + 5.0 * sigmabar)))) +
                    sigma3 * (12.0 * m_B4 * m_v * sigmabar2 - 5.0 * m_B2 * omega_1 * q2 * sigmabar -
                    2.0 * m_B3 * q2 * sigmabar * (5.0 + 8.0 * sigmabar) - 6.0 * omega_1 * power_of<2>(q2) +
                    3.0 * m_B * (-2.0 + 3.0 * sigmabar) * power_of<2>(q2)) +
                    sigma2 * (6.0 * m_B4 * m_v * sigmabar2 * (-4.0 + sigmabar) +
                    m_B2 * omega_1 * q2 * sigmabar * (10.0 + 17.0 * sigmabar) +
                    m_B3 * sigmabar * (-(12.0 * m_v * omega_1 * sigmabar) + q2 * (5.0 + sigmabar * (14.0 - 15.0 * sigmabar))) +
                    3.0 * m_B * sigmabar * (-11.0 + sigmabar) * power_of<2>(q2) +
                    2.0 * omega_1 * (3.0 - 4.0 * sigmabar) * power_of<2>(q2)) +
                    sigma * sigmabar * (-(6.0 * m_B4 * m_v * sigmabar * (-2.0 + sigmabar)) +
                    2.0 * m_B3 * sigmabar * (q2 + 5.0 * q2 * sigmabar - 3.0 * m_v * omega_1 * (-4.0 + sigmabar)) -
                    m_B2 * q2 * (12.0 * m_v * sigmabar + omega_1 * (5.0 + 2.0 * sigmabar * (8.0 - 5.0 * sigmabar))) -
                    2.0 * omega_1 * (-16.0 + sigmabar) * power_of<2>(q2) +
                    3.0 * m_B * (5.0 * m_v4 + m_v2 * q2 * (5.0 + 8.0 * sigmabar) - 4.0 * sigmabar * power_of<2>(q2)))) +
                    2.0 * m_B * (-omega_1 + m_B * sigma) * sigmabar *
                    (3.0 * m_v4 * sigmabar + q2 * (3.0 * m_v2 + m_B2 * sigmabar2 * sigma + q2 * sigma * (-6.0 + sigma)) * sigmabar +
                    sigmabar2 * (3.0 * m_B3 * m_v * sigmabar2 - 3.0 * m_B * m_v * q2 + 6.0 * m_v2 * q2 +
                    5.0 * m_B2 * q2 * sigma * sigmabar) - sigma2 * sigmabar * power_of<2>(q2)) * chi_bar_4);

        }

        double I4d2C_T23A_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23A proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 2.0 * (3.0 * m_v4 * sigmabar + q2 * (3.0 * m_v2 + m_B2 * sigmabar2 * sigma + q2 * sigma * (-6.0 + sigma)) * sigmabar +
                               sigmabar2 * (-(3.0 * m_B3 * m_v * sigmabar2) + 3.0 * m_B * m_v * q2 + 6.0 * m_v2 * q2 +
                               5.0 * m_B2 * q2 * sigma * sigmabar) - sigma2 * sigmabar * power_of<2>(q2))
                             / (power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2D_T23A_3pt_chiB_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to T23A proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double chi_bar_4     = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return    2.0 * pow(m_B,-2.0) * pow(sigmabar,-7.0) *
                      (chi_bar_bar_4 * (3.0 * m_v4 * sigmabar +
                      q2 * (3.0 * m_v2 + m_B2 * sigmabar2 * sigma + 4.0 * q2 * sigma * (-2.0 + sigma)) * sigmabar +
                      m_B2 * sigmabar3 * (5.0 * q2 * (1 - 2.0 * sigma) - 6.0 * m_B * m_v * sigmabar) +
                      sigmabar2 * q2 * (2.0 * q2 * (-3.0 + sigma) - m_B2 * (-1 + 3.0 * sigma) * sigmabar) -
                      2.0 * sigma2 * sigmabar * power_of<2>(q2)) +
                      m_B * sigmabar * (3.0 * m_v4 * sigmabar + q2 * (3.0 * m_v2 + m_B2 * sigmabar2 * sigma + q2 * sigma * (-6.0 + sigma)) *
                      sigmabar + sigmabar2 * (3.0 * m_B3 * m_v * sigmabar2 - 3.0 * m_B * m_v * q2 + 6.0 * m_v2 * q2 +
                      5.0 * m_B2 * q2 * sigma * sigmabar) - sigma2 * sigmabar * power_of<2>(q2)) * chi_bar_4);
        }

        double I2_T23A_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + 0.0                                                         - I2_T23A_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3_T23A_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I3_T23A_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2)    - I3_T23A_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1A_T23A_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I3d1A_T23A_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I3d1A_T23A_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1B_T23A_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return + I3d1B_T23A_3pt_chiA_bar_bar_4( sigma, omega_1, q2)          - I3d1B_T23A_3pt_chiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I3d1C_T23A_3pt_chi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return + I3d1C_T23A_3pt_chiA_bar_bar_4( sigma, omega_2, q2)          - I3d1C_T23A_3pt_chiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4_T23A_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I4_T23A_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2)    - I4_T23A_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1A_T23A_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I4d1A_T23A_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d1A_T23A_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1B_T23A_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return + I4d1B_T23A_3pt_chiA_bar_bar_4( sigma, omega_1, q2)          - I4d1B_T23A_3pt_chiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d1C_T23A_3pt_chi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return + I4d1C_T23A_3pt_chiA_bar_bar_4( sigma, omega_2, q2)          - I4d1C_T23A_3pt_chiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2A_T23A_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I4d2A_T23A_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d2A_T23A_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d2B_T23A_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return + I4d2B_T23A_3pt_chiA_bar_bar_4( sigma, omega_1, q2)          - I4d2B_T23A_3pt_chiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d2C_T23A_3pt_chi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return + I4d2C_T23A_3pt_chiA_bar_bar_4( sigma, omega_2, q2)          - I4d2C_T23A_3pt_chiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2D_T23A_3pt_chi_bar_bar_4(const double & sigma, const double & q2) const
        {
            return + I4d2D_T23A_3pt_chiA_bar_bar_4( sigma, q2)                   - I4d2D_T23A_3pt_chiB_bar_bar_4(sigma, q2);
        }
        // }}}

        /* T23A : integrands and surface terms */
        // {{{
        double integrand_T23A_2pt_borel(const double & sigma, const double & q2) const
        {
            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double I1   = I1_T23A_2pt_phi_p(sigma, q2);
            const double I2   = I2_T23A_2pt_phi_bar(sigma, q2)   + I2_T23A_2pt_g_p(sigma, q2)      + I2_T23A_2pt_g_bar(sigma, q2);
            const double I3   = I3_T23A_2pt_g_p(sigma, q2)       + I3_T23A_2pt_g_bar(sigma, q2);
            const double I4   = I4_T23A_2pt_g_bar(sigma, q2);

            double result = 0.0;
            result += - I1;
            result +=   I2 / M2;
            result += - I3 / (2.0 * M4);
            result +=   I4 / (6.0 * M6);
            result *= exp;

            return result;
        }

        double surface_T23A_2pt(const double & sigma, const double & q2) const
        {
            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_T23A_2pt_phi_bar(sigma, q2)   + I2_T23A_2pt_g_p(sigma, q2)      + I2_T23A_2pt_g_bar(sigma, q2);
            const double I3   = I3_T23A_2pt_g_p(sigma, q2)       + I3_T23A_2pt_g_bar(sigma, q2);
            const double I3d1 = I3d1_T23A_2pt_g_p(sigma, q2)     + I3d1_T23A_2pt_g_bar(sigma, q2);
            const double I4   = I4_T23A_2pt_g_bar(sigma, q2);
            const double I4d1 = I4d1_T23A_2pt_g_bar(sigma, q2);
            const double I4d2 = I4d2_T23A_2pt_g_bar(sigma, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result += 0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / (power_of<2>( M2())));
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;

            return result;
        }

        /*
         * rewrite integration ranges such that:
         * 1.)
         *    0 <= x_1 <= 1,     and    0 <= x_2 <= 1,
         * 2.)
         *    x_1 and x_2 integration boundaries do not depend on the other variables
         *
         * We obtain the integrand
         *
         *    sigma m_B f(sigma m_B x_1, sigma m_B (xbar_1 xbar_2 + x_2) / xbar_2) / (xbar_1 xbar_2^2 + x_2 xbar_2),
         *
         * where
         *
         *    xbar_1 = 1.0 - x_1,    and    xbar_2 = 1.0 - x_2.
         */
        double integrand_T23A_3pt(const std::array<double, 3> & args, const double & q2) const
        {
            const double sigma  = args[0];
            const double x_1    = args[1];
            const double x_2    = args[2];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double I1 = 0.0;
            const double I2 = I2_T23A_3pt_phi_3(sigma, omega_1, omega_2, q2)         + I2_T23A_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                            + I2_T23A_3pt_phi_4(sigma, omega_1, omega_2, q2)         + I2_T23A_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_T23A_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_T23A_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I2_T23A_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_T23A_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I2_T23A_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3 = I3_T23A_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)     + I3_T23A_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)
                            + I3_T23A_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3_T23A_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I3_T23A_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3_T23A_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                            + I3_T23A_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3_T23A_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4 = I4_T23A_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4_T23A_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I4_T23A_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4_T23A_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result = 0.0;
            result += - I1;
            result +=   I2 / M2;
            result += - I3 / (2.0 * M4);
            result +=   I4 / (6.0 * M6);
            result *=   prefactor * exp;

            return result;
        }

        double surface_T23A_3pt_A(const std::array<double, 2> & args, const double & sigma, const double & q2) const
        {
            const double x_1    = args[0];
            const double x_2    = args[1];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_T23A_3pt_phi_3(sigma, omega_1, omega_2, q2)            + I2_T23A_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                              + I2_T23A_3pt_phi_4(sigma, omega_1, omega_2, q2)            + I2_T23A_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_T23A_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_T23A_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I2_T23A_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_T23A_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I2_T23A_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3   = I3_T23A_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)        + I3_T23A_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)
                              + I3_T23A_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)        + I3_T23A_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_T23A_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I3_T23A_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_T23A_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I3_T23A_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3d1 = I3d1A_T23A_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)     + I3d1A_T23A_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)
                              + I3d1A_T23A_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_T23A_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_T23A_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_T23A_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_T23A_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3d1A_T23A_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4   = I4_T23A_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)    + I4_T23A_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4_T23A_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I4_T23A_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d1 = I4d1A_T23A_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d1A_T23A_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d1A_T23A_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d1A_T23A_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d2 = I4d2A_T23A_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d2A_T23A_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d2A_T23A_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d2A_T23A_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        double surface_T23A_3pt_B(const double & x_1, const double & sigma, const double & q2) const
        {
            // this ONLY includes the Jacobian from the transformation (omega_1 -> x_1).
            const double prefactor = sigma * m_B();

            const double omega_1 = sigma * m_B() * x_1;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1B_T23A_3pt_phi_bar_3(sigma, omega_1, q2)     + I3d1B_T23A_3pt_phi_bar_bar_3(sigma, omega_1, q2)
                                  + I3d1B_T23A_3pt_phi_bar_4(sigma, omega_1, q2)     + I3d1B_T23A_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I3d1B_T23A_3pt_psi_bar_4(sigma, omega_1, q2)     + I3d1B_T23A_3pt_chi_bar_4(sigma, omega_1, q2)
                                  + I3d1B_T23A_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I3d1B_T23A_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1B_T23A_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d1B_T23A_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d1B_T23A_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d1B_T23A_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            const     double I4d2 = I4d2B_T23A_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d2B_T23A_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d2B_T23A_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d2B_T23A_3pt_chi_bar_bar_4(sigma, omega_1, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        double surface_T23A_3pt_C(const double & x_2, const double & sigma, const double & q2) const
        {
            const double xbar_2 = 1.0 - x_2;

            // this ONLY includes the Jacobian from the transformation (omega_2 -> x_2).
            const double prefactor = sigma * m_B() / (xbar_2 * xbar_2);

            const double omega_2 = sigma * m_B() * (x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1C_T23A_3pt_phi_bar_3(sigma, omega_2, q2)     + I3d1C_T23A_3pt_phi_bar_bar_3(sigma, omega_2, q2)
                                  + I3d1C_T23A_3pt_phi_bar_4(sigma, omega_2, q2)     + I3d1C_T23A_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I3d1C_T23A_3pt_psi_bar_4(sigma, omega_2, q2)     + I3d1C_T23A_3pt_chi_bar_4(sigma, omega_2, q2)
                                  + I3d1C_T23A_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I3d1C_T23A_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1C_T23A_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d1C_T23A_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d1C_T23A_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d1C_T23A_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            const     double I4d2 = I4d2C_T23A_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d2C_T23A_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d2C_T23A_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d2C_T23A_3pt_chi_bar_bar_4(sigma, omega_2, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        double surface_T23A_3pt_D(const double & sigma, const double & q2) const
        {
            // this does NOT includes the original factor of 1 / omega_2
            const double prefactor = 1.0;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);


            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            constexpr double I3d1 = 0.0;
            constexpr double I4   = 0.0;
            constexpr double I4d1 = 0.0;
            const     double I4d2 = I4d2D_T23A_3pt_phi_bar_bar_3(sigma, q2) + I4d2D_T23A_3pt_phi_bar_bar_4(sigma, q2)
                                  + I4d2D_T23A_3pt_psi_bar_bar_4(sigma, q2) + I4d2D_T23A_3pt_chi_bar_bar_4(sigma, q2);


            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        /*
         * Integrands for the first moments. Only the borel method is implemented
         */

        double integrand_T23A_2pt_borel_m1(const double & sigma, const double & q2) const
        {
            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double I1   = I1_T23A_2pt_phi_p(sigma, q2);
            const double I2   = I2_T23A_2pt_phi_bar(sigma, q2)   + I2_T23A_2pt_g_p(sigma, q2)      + I2_T23A_2pt_g_bar(sigma, q2);
            const double I3   = I3_T23A_2pt_g_p(sigma, q2)       + I3_T23A_2pt_g_bar(sigma, q2);
            const double I4   = I4_T23A_2pt_g_bar(sigma, q2);

            double result1 = 0.0;
            result1 += - I1;
            result1 +=   I2 / M2;
            result1 += - I3 / (2.0 * M4);
            result1 +=   I4 / (6.0 * M6);
            result1 *=   exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - I2;
            result2 +=   I3 / M2;
            result2 += - I4 / (2.0 * M4);
            result2 *=   exp;

            return result1 + result2;
        }

        double surface_T23A_2pt_m1(const double & sigma, const double & q2) const
        {
            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double m_V2 = power_of<2>(m_V());
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_T23A_2pt_phi_bar(sigma, q2)   + I2_T23A_2pt_g_p(sigma, q2)      + I2_T23A_2pt_g_bar(sigma, q2);
            const double I3   = I3_T23A_2pt_g_p(sigma, q2)       + I3_T23A_2pt_g_bar(sigma, q2);
            const double I3d1 = I3d1_T23A_2pt_g_p(sigma, q2)     + I3d1_T23A_2pt_g_bar(sigma, q2);
            const double I4   = I4_T23A_2pt_g_bar(sigma, q2);
            const double I4d1 = I4d1_T23A_2pt_g_bar(sigma, q2);
            const double I4d2 = I4d2_T23A_2pt_g_bar(sigma, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return result1 + result2;
        }

        double integrand_T23A_3pt_m1(const std::array<double, 3> & args, const double & q2) const
        {
            const double sigma  = args[0];
            const double x_1    = args[1];
            const double x_2    = args[2];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double I1 = 0.0;
            const double I2 = I2_T23A_3pt_phi_3(sigma, omega_1, omega_2, q2)         + I2_T23A_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                            + I2_T23A_3pt_phi_4(sigma, omega_1, omega_2, q2)         + I2_T23A_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_T23A_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_T23A_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I2_T23A_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_T23A_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I2_T23A_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3 = I3_T23A_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)     + I3_T23A_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)
                            + I3_T23A_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3_T23A_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I3_T23A_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3_T23A_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                            + I3_T23A_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3_T23A_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4 = I4_T23A_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4_T23A_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I4_T23A_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4_T23A_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result1 = 0.0;
            result1 += - I1;
            result1 +=   I2 / M2;
            result1 += - I3 / (2.0 * M4);
            result1 +=   I4 / (6.0 * M6);
            result1 *=   exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - I2;
            result2 +=   I3 / M2;
            result2 += - I4 / (2.0 * M4);
            result2 *=   exp;

            return (result1 + result2) * prefactor;
        }

        double surface_T23A_3pt_A_m1(const std::array<double, 2> & args, const double & sigma, const double & q2) const
        {
            const double x_1    = args[0];
            const double x_2    = args[1];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_T23A_3pt_phi_3(sigma, omega_1, omega_2, q2)            + I2_T23A_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                              + I2_T23A_3pt_phi_4(sigma, omega_1, omega_2, q2)            + I2_T23A_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_T23A_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_T23A_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I2_T23A_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_T23A_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I2_T23A_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3   = I3_T23A_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)        + I3_T23A_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)
                              + I3_T23A_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)        + I3_T23A_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_T23A_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I3_T23A_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_T23A_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I3_T23A_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3d1 = I3d1A_T23A_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)     + I3d1A_T23A_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)
                              + I3d1A_T23A_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_T23A_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_T23A_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_T23A_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_T23A_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3d1A_T23A_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4   = I4_T23A_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)    + I4_T23A_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4_T23A_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I4_T23A_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d1 = I4d1A_T23A_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d1A_T23A_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d1A_T23A_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d1A_T23A_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d2 = I4d2A_T23A_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d2A_T23A_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d2A_T23A_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d2A_T23A_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }

        double surface_T23A_3pt_B_m1(const double & x_1, const double & sigma, const double & q2) const
        {
            // this ONLY includes the Jacobian from the transformation (omega_1 -> x_1).
            const double prefactor = sigma * m_B();

            const double omega_1 = sigma * m_B() * x_1;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1B_T23A_3pt_phi_bar_3(sigma, omega_1, q2)     + I3d1B_T23A_3pt_phi_bar_bar_3(sigma, omega_1, q2)
                                  + I3d1B_T23A_3pt_phi_bar_4(sigma, omega_1, q2)     + I3d1B_T23A_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I3d1B_T23A_3pt_psi_bar_4(sigma, omega_1, q2)     + I3d1B_T23A_3pt_chi_bar_4(sigma, omega_1, q2)
                                  + I3d1B_T23A_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I3d1B_T23A_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1B_T23A_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d1B_T23A_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d1B_T23A_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d1B_T23A_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            const     double I4d2 = I4d2B_T23A_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d2B_T23A_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d2B_T23A_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d2B_T23A_3pt_chi_bar_bar_4(sigma, omega_1, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }

        double surface_T23A_3pt_C_m1(const double & x_2, const double & sigma, const double & q2) const
        {
            const double xbar_2 = 1.0 - x_2;

            // this ONLY includes the Jacobian from the transformation (omega_2 -> x_2).
            const double prefactor = sigma * m_B() / (xbar_2 * xbar_2);

            const double omega_2 = sigma * m_B() * (x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1C_T23A_3pt_phi_bar_3(sigma, omega_2, q2)     + I3d1C_T23A_3pt_phi_bar_bar_3(sigma, omega_2, q2)
                                  + I3d1C_T23A_3pt_phi_bar_4(sigma, omega_2, q2)     + I3d1C_T23A_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I3d1C_T23A_3pt_psi_bar_4(sigma, omega_2, q2)     + I3d1C_T23A_3pt_chi_bar_4(sigma, omega_2, q2)
                                  + I3d1C_T23A_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I3d1C_T23A_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1C_T23A_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d1C_T23A_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d1C_T23A_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d1C_T23A_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            const     double I4d2 = I4d2C_T23A_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d2C_T23A_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d2C_T23A_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d2C_T23A_3pt_chi_bar_bar_4(sigma, omega_2, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }

        double surface_T23A_3pt_D_m1(const double & sigma, const double & q2) const
        {
            // this does NOT includes the original factor of 1 / omega_2
            const double prefactor = 1.0;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);


            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            constexpr double I3d1 = 0.0;
            constexpr double I4   = 0.0;
            constexpr double I4d1 = 0.0;
            const     double I4d2 = I4d2D_T23A_3pt_phi_bar_bar_3(sigma, q2) + I4d2D_T23A_3pt_phi_bar_bar_4(sigma, q2)
                                  + I4d2D_T23A_3pt_psi_bar_bar_4(sigma, q2) + I4d2D_T23A_3pt_chi_bar_bar_4(sigma, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }
        // }}}

        /* T23A : form factor and moments */
        // {{{
        double t_23A(const double & q2) const
        {
            const double sigma_0 = this->sigma_0(q2, s0_0_T23A(), s0_1_T23A());

            const std::function<double (const double &)> integrand_2pt = std::bind(integrand_t23A_2pt, this, std::placeholders::_1, q2);

            const double integral_2pt = integrate<GSL::QAGS>(integrand_2pt, 0.0, sigma_0);
            const double surface_2pt  = 0.0 - surface_T23A_2pt(switch_borel ? sigma_0 : 0.0, q2);

            double integral_3pt = 0.0;
            double surface_3pt  = 0.0;

            if (switch_3pt != 0.0)
            {
                const std::function<double (const double &)> surface_3pt_B = std::bind(&Implementation::surface_T23A_3pt_B, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const double &)> surface_3pt_C = std::bind(&Implementation::surface_T23A_3pt_C, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const std::array<double, 3> &)> integrand_3pt = std::bind(&Implementation::integrand_T23A_3pt, this, std::placeholders::_1, q2);
                const std::function<double (const std::array<double, 2> &)> surface_3pt_A = std::bind(&Implementation::surface_T23A_3pt_A, this, std::placeholders::_1, sigma_0, q2);

                integral_3pt = integrate(integrand_3pt, { 0.0, 0.0, 0.0 }, { sigma_0, 1.0, 1.0 }, cubature::Config());
                surface_3pt  = 0.0
                             - integrate(surface_3pt_A, { 0.0, 0.0 }, { 1.0, 1.0 }, cubature::Config()) // integrate over x_1 and x_2
                             - integrate<GSL::QAGS>(surface_3pt_B, 0.0, 1.0)                            // integrate over x_1
                             - integrate<GSL::QAGS>(surface_3pt_C, 0.0, 1.0)                            // integrate over x_2
                             - surface_T23A_3pt_D(sigma_0, q2);
            }

            return f_B() * power_of<2>(m_B()) / (2.0 * f_V() * m_V) * (integral_2pt + surface_2pt + integral_3pt + surface_3pt) / ( Process_::chi2);
        }

        double normalized_moment_1_t_23A(const double & q2) const
        {
            const double sigma_0 = this->sigma_0(q2, s0_0_T23A(), s0_1_T23A()) ;

            const std::function<double (const double &)> integrand_2pt_m1 = std::bind(&Implementation::integrand_T23A_2pt_borel_m1, this, std::placeholders::_1, q2);


            const std::function<double (const double &)> integrand_2pt    = std::bind(&Implementation::integrand_T23A_2pt_borel, this, std::placeholders::_1, q2);

            const double integral_2pt_m1 = integrate<GSL::QAGS>(integrand_2pt_m1, 0.0, sigma_0);
            const double surface_2pt_m1  = 0.0 - surface_T23A_2pt_m1(sigma_0, q2);

            double integral_3pt_m1 = 0.0;
            double surface_3pt_m1  = 0.0;

            if (switch_3pt != 0.0)
            {
                const std::function<double (const double &)> surface_3pt_B_m1 = std::bind(&Implementation::surface_T23A_3pt_B_m1, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const double &)> surface_3pt_C_m1 = std::bind(&Implementation::surface_T23A_3pt_C_m1, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const std::array<double, 3> &)> integrand_3pt_m1 = std::bind(&Implementation::integrand_T23A_3pt_m1, this, std::placeholders::_1, q2);
                const std::function<double (const std::array<double, 2> &)> surface_3pt_A_m1 = std::bind(&Implementation::surface_T23A_3pt_A_m1, this, std::placeholders::_1, sigma_0, q2);

                integral_3pt_m1 = integrate(integrand_3pt_m1, { 0.0, 0.0, 0.0 }, { sigma_0, 1.0, 1.0 }, cubature::Config());
                surface_3pt_m1  = 0.0
                                - integrate(surface_3pt_A_m1, { 0.0, 0.0 }, { 1.0, 1.0 }, cubature::Config()) // integrate over x_1 and x_2
                                - integrate<GSL::QAGS>(surface_3pt_B_m1, 0.0, 1.0)                            // integrate over x_1
                                - integrate<GSL::QAGS>(surface_3pt_C_m1, 0.0, 1.0)                            // integrate over x_2
                                - surface_T23A_3pt_D_m1(sigma_0, q2);
            }
            const double numerator       = integral_2pt_m1 + surface_2pt_m1 + integral_3pt_m1 + surface_3pt_m1;

            const double integral_2pt    = integrate<GSL::QAGS>(integrand_2pt, 0.0, sigma_0);
            const double surface_2pt     = 0.0 - surface_T23A_2pt(sigma_0, q2);

            double integral_3pt    = 0.0;
            double surface_3pt     = 0.0;

            if (switch_3pt != 0.0)
            {
                const std::function<double (const double &)> surface_3pt_B    = std::bind(&Implementation::surface_T23A_3pt_B, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const double &)> surface_3pt_C    = std::bind(&Implementation::surface_T23A_3pt_C, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const std::array<double, 3> &)> integrand_3pt = std::bind(&Implementation::integrand_T23A_3pt, this, std::placeholders::_1, q2);
                const std::function<double (const std::array<double, 2> &)> surface_3pt_A = std::bind(&Implementation::surface_T23A_3pt_A, this, std::placeholders::_1, sigma_0, q2);

                integral_3pt    = integrate(integrand_3pt, { 0.0, 0.0, 0.0 }, { sigma_0, 1.0, 1.0 }, cubature::Config());
                surface_3pt     = 0.0
                                - integrate(surface_3pt_A, { 0.0, 0.0 }, { 1.0, 1.0 }, cubature::Config()) // integrate over x_1 and x_2
                                - integrate<GSL::QAGS>(surface_3pt_B, 0.0, 1.0)                            // integrate over x_1
                                - integrate<GSL::QAGS>(surface_3pt_C, 0.0, 1.0)                            // integrate over x_2
                                - surface_T23A_3pt_D(sigma_0, q2);
            }
            const double denominator     = integral_2pt + surface_2pt + integral_3pt + surface_3pt;

            return numerator / denominator;
        }
        // }}}

        /* T_23B : 2-particle functions */
        // {{{
        inline
        double I1_T23B_2pt_phi_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to T23B proportional to phi_+

            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v();

            const double C_1 = -(-sigma * m_B + m_v) / (m_B * sigmabar);

            return C_1 * this->phi_plus(sigma * m_B());
        }

        inline
        double I1_T23B_2pt_phi_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to T23B proportional to phibar
            const double sigmabar = 1.0 - sigma;

            const double C_1 = (1.0 - sigmabar) / (m_B * power_of<2>(sigmabar));

            return C_1 * this->phi_bar(sigma * m_B());
        }

        inline
        double I2_T23B_2pt_phi_bar(const double & sigma, const double & q2) const
        {
            // two-particle contribution to T23B proportional to phibar
            const double sigmabar = 1.0 - sigma;
            const double m_B2 = power_of<2>(m_B());
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double C_2 = (m_v2 * (1.0 - 2.0 * sigmabar) + sigma * m_B * m_v * sigmabar - sigma * (q2 - 2.0 * q2 * sigmabar + m_B2 * power_of<2>(sigmabar)))
                             / (m_B * power_of<3>(sigmabar));

            return C_2 * this->phi_bar(sigma * m_B());
        }

        inline
        double I2_T23B_2pt_g_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to T23B proportional to g_+
            const double sigmabar = 1.0 - sigma;

            const double C_2   =  (4.0 - 4.0 * sigmabar) / power_of<2>(sigmabar);

            return C_2 * this->g_plus(sigma * m_B);
        }

        inline
        double I3_T23B_2pt_g_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to T23B proportional to g_+
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_plus    = this->g_plus(sigma * m_B);

            const double C_3 = 8.0 * m_v2 * (- m_B * sigma + m_v) / (m_B * power_of<3>(sigmabar));

            return C_3 * g_plus;
        }

        inline
        double I3d1_T23B_2pt_g_p(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to T23B proportional to g_+
            const double sigmabar = 1.0 - sigma;
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_plus    = this->g_plus(sigma * m_B);
            const double g_plus_d1 = this->g_plus_d1(sigma * m_B);

            const double C_3   = 8.0 * m_v2 * (- m_B * sigma + m_v) / (power_of<3>(sigmabar));
            const double C_3d1 = 8.0 * m_v2 * (3.0 * m_v + m_B * (-3.0 + 2.0 * sigmabar)) / (m_B * power_of<4>(sigmabar));

            return C_3 * g_plus_d1 + C_3d1 * g_plus;
        }

        inline
        double I2_T23B_2pt_g_bar(const double & sigma, const double & /*q2*/) const
        {
            // two-particle contribution to T23B proportional to gbar
            const double sigmabar = 1.0 - sigma;
            const double m_B = this->m_B()/*, m_B2 = power_of<2>(m_B)*/;

            const double g_bar    = this->g_bar(sigma * m_B);

            const double C_2 = (8.0 - 12.0 * sigmabar) / (m_B * power_of<3>(sigmabar));

            return C_2 * g_bar;
        }

        inline
        double I3_T23B_2pt_g_bar(const double & sigma, const double & q2) const
        {
            // two-particle contribution to T23B proportional to gbar
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double m_B2 = power_of<2>(m_B);
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);

            const double C_3 = 8.0 * (m_v2 * (-2.0 + 3.0 * sigmabar) - sigma * (q2 - 2.0 * q2 * sigmabar + m_B2 * sigmabar2)) / (m_B * power_of<4>(sigmabar));

            return C_3 * g_bar;
        }

        inline
        double I3d1_T23B_2pt_g_bar(const double & sigma, const double & q2) const
        {
            // two-particle contribution to T23B proportional to gbar
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double m_B2 = power_of<2>(m_B);
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);

            const double C_3   = 8.0 * (m_v2 * (-2.0 + 3.0 * sigmabar) - sigma * (q2 - 2.0 * q2 * sigmabar + m_B2 * sigmabar2)) / (power_of<4>(sigmabar));
            const double C_3d1 = 8.0 * (m_B2 * (-2.0 + sigmabar) * sigmabar2 + m_v2 * (-8.0 + 9.0 * sigmabar) + q2 * (-4.0 + 9.0 * sigmabar - 4.0 * sigmabar2))
                               / (m_B * power_of<5>(sigmabar));

            return C_3 * g_bar_d1 + C_3d1 * g_bar;
        }

        inline
        double I4_T23B_2pt_g_bar(const double & sigma, const double & q2) const
        {
            // two-particle contribution to T23B proportional to gbar
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double m_B2 = power_of<2>(m_B);
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);

            const double C_4 = 24.0 * m_v2 * (-sigma * m_B * m_v * sigmabar + m_v2 * (-1.0 + 2.0 * sigmabar) + sigma * (q2 - 2.0 * q2 * sigmabar + m_B2 * sigmabar2))
                             / (m_B * power_of<5>(sigmabar));

            return C_4 * g_bar;
        }

        inline
        double I4d1_T23B_2pt_g_bar(const double & sigma, const double & q2) const
        {
            // two-particle contribution to T23B proportional to gbar
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double m_B2 = power_of<2>(m_B);
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);

            const double C_4   =  24.0 * m_v2 * (-sigma * m_B * m_v * sigmabar + m_v2 * (-1.0 + 2.0 * sigmabar) + sigma * (q2 - 2.0 * q2 * sigmabar + m_B2 * sigmabar2))
                               / (power_of<5>(sigmabar));
            const double C_4d1 = 24.0 * m_v2 * (m_B2 * (3.0 - 2.0 * sigmabar) * sigmabar2 + m_B * m_v * sigmabar * (-4.0 + 3.0 * sigmabar)
                               + m_v2 * (-5.0 + 8.0 * sigmabar) + q2 * (5.0 - 12.0 * sigmabar + 6.0 * sigmabar2))
                               / (m_B * power_of<6>(sigmabar));

            return C_4 * g_bar_d1 + C_4d1 * g_bar;
        }

        inline
        double I4d2_T23B_2pt_g_bar(const double & sigma, const double & q2) const
        {
            // two-particle contribution to T23B proportional to gbar
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double m_B2 = power_of<2>(m_B);
            const double m_v = this->m_v(), m_v2 = power_of<2>(m_v);

            const double g_bar    = this->g_bar(sigma * m_B);
            const double g_bar_d1 = this->g_bar_d1(sigma * m_B);
            const double g_bar_d2 = this->g_bar_d2(sigma * m_B);

            const double C_4   = 24.0 * m_v2 * (-sigma * m_B * m_v * sigmabar + m_v2 * (-1.0 + 2.0 * sigmabar) + sigma * (q2 - 2.0 * q2 * sigmabar + m_B2 * sigmabar2))
                               / (power_of<5>(sigmabar)) * m_B;
            const double C_4d1 = 48.0 * m_v2 * (m_B2 * (3.0 - 2.0 * sigmabar) * sigmabar2 + m_B * m_v * sigmabar * (-4.0 + 3.0 * sigmabar)
                               + m_v2 * (-5.0 + 8.0 * sigmabar) + q2 * (5.0 - 12.0 * sigmabar + 6.0 * sigmabar2))
                               / (power_of<6>(sigmabar));
            const double C_4d2 = 48.0 * m_v2 * (-3.0 * m_B2 * (-2.0 + sigmabar) * sigmabar2 + 2.0 * m_B * m_v * sigmabar * (-5.0 + 3.0 * sigmabar)
                               + 5.0 * m_v2 * (-3.0 + 4.0 * sigmabar) + 3.0 * q2 * (5.0 - 10.0 * sigmabar + 4.0 * sigmabar2))
                               / (m_B * power_of<7>(sigmabar));

            return C_4 * g_bar_d2 + C_4d1 * g_bar_d1 + C_4d2 * g_bar;
        }
        // }}}

        /* T23B : 3-particle functions */
        // {{{
        double I1_T23B_3pt_phi_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to phi_3
            const double m_B2     = power_of<2>(m_B);
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_3 = this->phi_3(omega_1, omega_2);

            const double C_1 = -2.0 * u / (m_B2 * power_of<2>(sigmabar));

            return C_1 * phi_3;
        }

        double I2_T23B_3pt_phi_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to phi_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_3 = this->phi_3(omega_1, omega_2);

            const double C_2 = (-2.0 * m_v * m_v * u + q2 * u * (2.0 - 4.0 * sigmabar) + m_B * m_v * sigmabar + m_B2 * u * sigmabar * (-1.0 + 3.0 * sigmabar))
                             / (m_B2 * power_of<3>(sigmabar));

            return C_2 * phi_3;
        }

        double I2_T23B_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to phi_bar_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_2 = (6.0 * m_v + m_B * u * (2.0 - 5.0 * sigmabar)) / (m_B2 * power_of<3>(sigmabar));

            return C_2 * phi_bar_3;
        }

        double I3_T23B_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to phi_bar_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = 2.0 * (3.0 * m_v * m_v2 + sigma * m_B * m_v2 * u - m_B2 * m_v * sigmabar2 + m_v * q2 * (-3.0 + 4.0 * sigmabar)
                             - sigma * m_B * u * (q2 - 4.0 * q2 * sigmabar + 3.0 * m_B2 * sigmabar2))
                             / (m_B2 * power_of<4>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I3d1A_T23B_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to phi_bar_3
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = -((-24 * m_v3 * omega_2 + 20.0 * m_B2 * sigma3 * q2 +
                               4.0 * m_v * omega_2 * (m_B2 * sigmabar2 + 2.0 * q2 * (-1 + sigmabar)) +
                               3.0 * m_B * omega_1 * sigmabar * (-(2.0 * m_B2 * sigmabar2) + q2 + q2 * sigmabar) +
                               2.0 * m_B * sigma2 * (-(10.0 * m_B * m_v2) + 6.0 * m_B3 * sigmabar2 - 10.0 * omega_1 * q2 +
                               3.0 * m_B * q2 * (-2.0 + sigmabar)) +
                               m_B * m_v2 * (-(3.0 * m_B * (-1 + sigmabar) * sigmabar) + 2.0 * omega_1 * (-6.0 + 7.0 * sigmabar)) +
                               sigma * (-(12.0 * m_B3 * omega_1 * sigmabar2) + 12.0 * m_B4 * sigmabar3 + 32 * m_v * omega_2 * q2 +
                               m_B * omega_1 * (20.0 * m_v2 - q2 * (-12.0 + sigmabar)) -
                               m_B2 * (6.0 * q2 * sigmabar * (1 + sigmabar) + m_v2 * (-12.0 + 19.0 * sigmabar)))))
                             / (m_B2 * omega_2 * power_of<5>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I3d1B_T23B_3pt_phi_bar_3(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23B proportional to phi_bar_3
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = (2.0 * m_B2 * m_v * sigmabar2 + 6.0 * m_B3 * sigmabar2 * sigma +
                               m_B * (-3.0 + 5.0 * sigma) * (-m_v2 + q2 * sigma) - 2.0 * m_v * (3.0 * m_v2 + q2 - 4.0 * q2 * sigma) -
                               3.0 * m_B * (m_v2 + q2 * sigma) * sigmabar)
                             / (m_B * (-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I3d1C_T23B_3pt_phi_bar_3(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to phi_bar_3
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_3 = this->phi_bar_3(omega_1, omega_2);

            const double C_3 = 2.0 * m_v * (3.0 * m_v2 + q2 - 4.0 * sigma * q2 - m_B2 * sigmabar2) / (m_B * omega_2 * power_of<4>(sigmabar));

            return C_3 * phi_bar_3;
        }

        double I3_T23B_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to phi_bar_bar_3
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_3 = 6.0 * m_v * u * (-2.0 + 3.0 * sigmabar) / (m_B * power_of<4>(sigmabar));

            return C_3 * phi_bar_bar_3;
        }

        double I3d1A_T23B_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to phi_bar_bar_3
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_3 = 6.0 * m_v * (-12.0 * sigma * sigma * m_B + sigma * m_B * (4.0 - 6.0 * sigmabar) - 4.0 * omega_1 + 12.0 * sigma * omega_1
                             + sigmabar * (m_B + 3.0 * omega_1))
                             / (m_B * omega_2 * power_of<5>(sigmabar));

            return C_3 * phi_bar_bar_3;
        }

        double I3d1B_T23B_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to phi_bar_bar_3
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_3 = 6.0 * (-1.0 + 3.0 * sigma) * m_v
                             / ((-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * phi_bar_bar_3;
        }

        double I3d1C_T23B_3pt_phi_bar_bar_3(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to phi_bar_bar_3

            return 0.0;
        }

        double I4_T23B_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to phi_bar_bar_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2  = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = 6.0 * m_v * u * (m_v2 * (-2.0 + 3.0 * sigmabar) -
                               2.0 * (-1 + sigmabar) * (m_B2 * sigmabar2 + q2 - 2.0 * q2 * sigmabar) +
                               m_B * m_v * (-1 + sigmabar) * sigmabar * (-1 + 2.0 * u))
                             / (m_B * power_of<5>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d1A_T23B_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to phi_bar_bar_3
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2  = power_of<2>(sigmabar), sigmabar3  = power_of<3>(sigmabar);

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = -(6.0 * m_v * (m_B * (-(4.0 * m_B2 * omega_2 * sigmabar3 * sigma) +
                               2.0 * m_B * sigmabar2 * sigma * (-(m_v * omega_2) + 3.0 * m_B * (m_v - omega_2) * sigma) -
                               5.0 * omega_2 * sigma * (2.0 * q2 * sigma * (-1 + 2.0 * sigma) + m_v2 * (1 - 3.0 * sigma)) +
                               (8.0 * m_B2 * m_v * sigma3 - omega_2 *
                               (4.0 * q2 * sigma * (-1 + 3.0 * sigma) + m_v * (m_v + 4.0 * m_B * sigma2 - 6.0 * m_v * sigma))) * sigmabar) +
                               omega_1 * (m_v2 * omega_2 * (5.0 - 15.0 * sigma - 3.0 * sigmabar) +
                               2.0 * omega_2 * (m_B2 * sigmabar3 + 10.0 * sigma2 * q2 + 3.0 * m_B2 * sigmabar2 * sigma - q2 * sigmabar +
                               q2 * sigma * (-5.0 + 4.0 * sigmabar)) +
                               m_B * m_v * sigmabar * (-(16.0 * m_B * sigma2) + omega_2 * sigmabar +
                               4.0 * sigma * (omega_2 - 2.0 * m_B * sigmabar))) +
                               2.0 * m_B * m_v * sigmabar * (4.0 * sigma + sigmabar) * power_of<2>(omega_1)))
                             / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d1B_T23B_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23B proportional to phi_bar_bar_3
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2  = power_of<2>(sigmabar);

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = 6.0 * m_v * (m_v2 * (-1 + 3.0 * sigma) + 2.0 * sigma * (-(m_B2 * sigmabar2) + q2 - 2.0 * q2 * sigma) +
                               m_B * m_v * sigma * sigmabar)
                             / (power_of<5>(sigmabar) * omega_2);

            return C_4 * phi_bar_bar_3;
        }

        double I4d1C_T23B_3pt_phi_bar_bar_3(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to phi_bar_bar_3

            return 0.0;
        }
        double I4d2A_T23B_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to phi_bar_bar_3
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = -(12.0 * m_v * (m_B2 * (6.0 * omega_1 * omega_2 - m_v * (4.0 * omega_1 + omega_2)) * sigmabar3 -
                               2.0 * m_B3 * omega_2 * sigmabar4 + 20.0 * sigma3 * (-(3.0 * m_B * omega_2 * q2) + m_B3 * m_v * sigmabar) +
                               omega_1 * omega_2 * (-(15.0 * m_v2 * (-1 + sigmabar)) + 2.0 * q2 * sigmabar * (-5.0 + 2.0 * sigmabar)) +
                               m_B * sigmabar * (4.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar + 2.0 * omega_2 * q2 * sigmabar +
                               m_v2 * omega_2 * (-5.0 + 3.0 * sigmabar)) +
                               sigma2 * (12.0 * m_B3 * (2.0 * m_v - omega_2) * sigmabar2 + 60 * omega_1 * omega_2 * q2 -
                               10.0 * m_B2 * m_v * (4.0 * omega_1 + omega_2) * sigmabar +
                               15.0 * m_B * omega_2 * (3.0 * m_v2 + 2.0 * q2 - 4.0 * q2 * sigmabar)) +
                               sigma * (4.0 * m_B2 * (3.0 * omega_1 * omega_2 - 2.0 * m_v * (4.0 * omega_1 + omega_2)) * sigmabar2 +
                               6.0 * m_B3 * (m_v - 2.0 * omega_2) * sigmabar3 -
                               5.0 * omega_1 * omega_2 * (9.0 * m_v2 + 6.0 * q2 - 8.0 * q2 * sigmabar) +
                               m_B * (10.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar +
                               15.0 * m_v2 * omega_2 * (-1 + 2.0 * sigmabar) + 4.0 * omega_2 * q2 * sigmabar * (5.0 - 3.0 * sigmabar)))))
                             / (m_B * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d2B_T23B_3pt_phi_bar_bar_3(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23B proportional to phi_bar_bar_3
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double phi_bar_3     = this->phi_bar_3(omega_1, omega_2);
            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            return  6.0 * m_v * pow(omega_1 - m_B * sigma,-2.0) * pow(sigmabar,-6.0) *
                    (-(2.0 * (omega_1 * (-(2.0 * m_B2 * sigmabar3) + 10.0 * q2 * sigma * (1 - 2.0 * sigma) +
                    5.0 * m_v2 * (-1 + 3.0 * sigma) + m_B * sigmabar2 * (m_v - 6.0 * m_B * sigma) +
                    (3.0 * m_v2 + 2.0 * q2 + 4.0 * m_B * m_v * sigma - 8.0 * q2 * sigma) * sigmabar) +
                    m_B * sigma * (2.0 * m_B2 * sigmabar3 + 20.0 * sigma2 * q2 + 6.0 * m_B2 * sigmabar2 * sigma -
                    2.0 * q2 * sigmabar - 2.0 * m_B * m_v * sigmabar * (2.0 * sigma + sigmabar) +
                    m_v2 * (5.0 - 15.0 * sigma - 3.0 * sigmabar) + 2.0 * q2 * sigma * (-5.0 + 4.0 * sigmabar))) * phi_bar_bar_3) -
                    m_B * (-omega_1 + m_B * sigma) * sigmabar * (m_v2 * (1 - 3.0 * sigma) +
                    2.0 * sigma * (m_B2 * sigmabar2 + q2 * (-1 + 2.0 * sigma)) - m_B * m_v * sigma * sigmabar) * phi_bar_3);
        }

        double I4d2C_T23B_3pt_phi_bar_bar_3(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to phi_bar_bar_3
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            const double C_4 = 6.0 * m_B * m_v * (m_v2 * (1 - 3.0 * sigma) + 2.0 * sigma * (m_B2 * sigmabar2 + q2 * (-1 + 2.0 * sigma)) +
                               m_B * m_v * sigma * sigmabar) / (power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * phi_bar_bar_3;
        }

        double I4d2D_T23B_3pt_phi_bar_bar_3(const double & sigma, const double & q2) const
        {
            // three-particle contribution to T23B proportional to phi_bar_bar_3
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_3     = this->phi_bar_3(omega_1, omega_2);
            const double phi_bar_bar_3 = this->phi_bar_bar_3(omega_1, omega_2);

            return    6.0 * m_v * pow(m_B,-1) * pow(sigmabar,-6.0) *
                      ((m_B * m_v * sigmabar2 - 4.0 * sigma2 * q2 + 2.0 * (-(m_B2 * sigmabar2) + q2) * sigmabar +
                      m_v2 * (-1 + 3.0 * sigma + 3.0 * sigmabar) + 2.0 * sigma * (m_B2 * sigmabar2 + q2 - 4.0 * q2 * sigmabar)) * phi_bar_bar_3 + m_B * sigmabar *
                      (m_v2 * (-1 + 3.0 * sigma) + 2.0 * sigma * (-(m_B2 * sigmabar2) + q2 - 2.0 * q2 * sigma) +
                      m_B * m_v * sigma * sigmabar) * phi_bar_3);
        }

        double I2_T23B_3pt_phi_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to phi_4
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_4 = this->phi_4(omega_1, omega_2);

            const double C_2 = - sigma * (-1.0 + u) / (power_of<2>(sigmabar));

            return C_2 * phi_4;
        }

        double I2_T23B_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to phi_bar_4
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_2 = (u * (-2.0 + sigmabar) + 2.0 * sigmabar) / (m_B * power_of<3>(sigmabar));

            return C_2 * phi_bar_4;
        }

        double I3_T23B_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to phi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = -(2.0 * (m_B * m_v * (-1 + sigmabar) * sigmabar + m_v * m_v * (sigmabar * (-1 + u) + u) +
                               (-1 + sigmabar) * (-(m_B2 * sigmabar2 * (-2.0 + u)) + q2 * (-(2.0 * sigmabar) + u))))
                             / (m_B * power_of<4>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I3d1A_T23B_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to phi_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma,   sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = ((12.0 * m_B3 * sigma3 * sigmabar + 2.0 * m_B * m_v * omega_2 * sigmabar * (-3.0 + 5.0 * sigmabar) +
                               4.0 * sigma2 * (5.0 * omega_2 * q2 - 2.0 * m_B * (m_v2 - 2.0 * q2) - 3.0 * m_B2 * omega_1 * sigmabar +
                               3.0 * m_B3 * (-1 + sigmabar) * sigmabar) -
                               2.0 * m_v2 * (2.0 * omega_2 * (-4.0 + sigmabar) + m_B * sigmabar * (1 + 3.0 * sigmabar) -
                               2.0 * omega_1 * (2.0 + 5.0 * sigmabar)) +
                               sigma * (8.0 * m_v2 * (omega_1 - 2.0 * omega_2) - 8.0 * m_B3 * sigmabar2 - 16.0 * omega_1 * q2 +
                               omega_2 * q2 * (-20.0 + sigmabar) + m_B *
                               (18.0 * m_v * omega_2 * sigmabar + 8.0 * q2 * sigmabar - 2.0 * m_v2 * (4.0 + 11.0 * sigmabar)) +
                               4.0 * m_B2 * sigmabar * (4.0 * omega_2 * sigmabar + omega_1 * (3.0 - 2.0 * sigmabar))) +
                               sigmabar * (4.0 * m_B2 * sigmabar * (omega_1 + 2.0 * omega_2 * sigmabar) -
                               q2 * (4.0 * omega_1 + omega_2 * (5.0 + 3.0 * sigmabar)))))
                             / (2.0 * m_B * omega_2 * power_of<5>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I3d1B_T23B_3pt_phi_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23B proportional to phi_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = ((-(2.0 * m_B * m_v * sigmabar * (-1 + 3.0 * sigma + sigmabar)) + m_v2 * (-2.0 + 6.0 * sigma + 6.0 * sigmabar) +
                               sigma * (-(4.0 * m_B2 * sigmabar2) + q2 - 5.0 * q2 * sigma + 3.0 * q2 * sigmabar)))
                             / (2.0 * (-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I3d1C_T23B_3pt_phi_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to phi_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_4 = this->phi_bar_4(omega_1, omega_2);

            const double C_3 = ((8.0 * m_B2 * sigmabar2 * sigma + 4.0 * m_v2 * sigmabar +
                               2.0 * m_B * m_v * sigmabar * (-1 + 3.0 * sigma + sigmabar) + q2 * sigma * (-5.0 + 5.0 * sigma - 3.0 * sigmabar)))
                             / (2.0 * omega_2 * power_of<4>(sigmabar));

            return C_3 * phi_bar_4;
        }

        double I2_T23B_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_2 = - 6.0 * sigma * u * (-1.0 + 2.0 * u)
                             / (m_B2 * power_of<4>(sigmabar));

            return C_2 * phi_bar_bar_4;
        }

        double I3_T23B_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar3 = power_of<3>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -(2.0 * u * (m_B * m_v * sigmabar * (-3.0 + sigmabar) + 3.0 * m_v2 * (2.0 + sigmabar) * (-1 + 2.0 * u) -
                               2.0 * (m_B2 * sigmabar3 + q2 * (3.0 + 2.0 * sigmabar * (-3.0 + sigmabar))) * (-1 + 2.0 * u)))
                             / (m_B2 * power_of<5>(sigmabar));

            return C_3 * phi_bar_bar_4;
        }

        double I3d1A_T23B_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma), sigma4   = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (4.0 * sigma4 * (15.0 * m_B2 * q2 + 4.0 * m_B4 * sigmabar) +
                               2.0 * m_B * sigma3 * (-(15.0 * (4.0 * omega_1 + omega_2) * q2) -
                               4.0 * m_B2 * (4.0 * omega_1 + omega_2) * sigmabar + 8.0 * m_B3 * sigmabar * (-2.0 + sigmabar) +
                               m_B * (-30 * m_v2 + 32 * q2 * sigmabar)) + 2.0 * sigma *
                               (4.0 * m_B4 * sigmabar2 + 4.0 * m_B3 * (4.0 * omega_1 + omega_2) * (-1 + sigmabar) * sigmabar -
                               5.0 * omega_1 * (2.0 * omega_1 + omega_2) * (3.0 * m_v2 - 2.0 * q2 * sigmabar) -
                               2.0 * m_B * sigmabar * (m_v * omega_1 * omega_2 - 12.0 * m_v2 * (4.0 * omega_1 + omega_2) +
                               (4.0 * omega_1 + omega_2) * q2 * (-2.0 + sigmabar)) +
                               m_B2 * sigmabar * (-(18.0 * m_v2 * sigmabar) - 4.0 * q2 * sigmabar +
                               2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-4.0 + sigmabar) + m_v * omega_2 * (4.0 + sigmabar))) -
                               sigmabar * (2.0 * m_B3 * (4.0 * omega_1 + omega_2) * sigmabar -
                               2.0 * m_B2 * (m_v * omega_2 * sigmabar - 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-2.0 + sigmabar)) +
                               2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (21 * m_v2 - q2 * (-4.0 + sigmabar)) +
                               m_B * (-(9.0 * m_v2 * (4.0 * omega_1 + omega_2) * sigmabar) -
                               2.0 * (4.0 * omega_1 + omega_2) * q2 * sigmabar + m_v * omega_1 * omega_2 * (8.0 + sigmabar))) -
                               2.0 * sigma2 * (-(15.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2) +
                               4.0 * m_B4 * sigmabar * (-2.0 + 3.0 * sigmabar) +
                               m_B3 * (4.0 * omega_1 + omega_2) * sigmabar * (-8.0 + 3.0 * sigmabar) -
                               m_B * (4.0 * omega_1 + omega_2) * (15.0 * m_v2 - 13.0 * q2 * sigmabar) -
                               2.0 * m_B2 * sigmabar * (-27 * m_v2 + m_v * omega_2 + 2.0 * omega_1 * (2.0 * omega_1 + omega_2) +
                               q2 * (-4.0 + 3.0 * sigmabar))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_3 * phi_bar_bar_4;
        }

        double I3d1B_T23B_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23B proportional to phi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -(2.0 * (6.0 * sigma * (-m_v2 + q2 * sigma) +
                               sigmabar * (-(9.0 * m_v2) + 2.0 * m_B2 * sigmabar2 + m_B * m_v * (2.0 + sigma) - 2.0 * q2 * sigmabar)))
                             / (m_B * (-omega_1 + m_B * sigma) * power_of<5>(sigmabar));

            return C_3 * phi_bar_bar_4;
        }

        double I3d1C_T23B_3pt_phi_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to phi_bar_bar_4

            return 0.0;
        }

        double I4_T23B_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(6.0 * u * (-(m_B * m_v3 * sigmabar) + m_B * m_v * (m_B2 * sigmabar2 - q2) * (-1 + sigmabar) * sigmabar +
                                m_v4 * (1 + 2.0 * sigmabar) * (-1 + 2.0 * u) +
                                (m_B2 * sigmabar2 - q2) * (-1 + sigmabar) * (m_B2 * sigmabar2 + q2 - 2.0 * q2 * sigmabar) * (-1 + 2.0 * u) +
                                m_v2 * (q2 * (-2.0 + 2.0 * sigmabar2 + sigmabar) + m_B2 * sigmabar2 * (1 - 2.0 * sigmabar)) * (-1 + 2.0 * u)))
                             / (m_B2 * power_of<6>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d1A_T23B_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B), m_B6 = power_of<6>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * (4.0 * m_B2 * sigma5 * (-(3.0 * q2) + m_B2 * sigmabar) * (q2 + 2.0 * m_B2 * sigmabar) -
                               sigma3 * (4.0 * m_B5 * (4.0 * omega_1 + omega_2) * sigmabar2 * (-2.0 + sigmabar) +
                               8.0 * m_B6 * sigmabar2 * (-1 + 2.0 * sigmabar) +
                               3.0 * m_B * (4.0 * omega_1 + omega_2) * q2 * (4.0 * m_v2 - 3.0 * q2 * sigmabar) +
                               m_B3 * (4.0 * omega_1 + omega_2) * sigmabar * (10.0 * m_v2 + q2 * (15.0 - 8.0 * sigmabar)) -
                               2.0 * m_B4 * sigmabar * (-(5.0 * q2) - 2.0 * m_v * omega_2 * sigmabar +
                               2.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar + 8.0 * q2 * sigmabar +
                               m_v2 * (-15.0 + 8.0 * sigmabar)) +
                               2.0 * m_B2 * (6.0 * m_v4 - 28 * m_v2 * q2 * sigmabar +
                               q2 * sigmabar * (5.0 * omega_1 * (2.0 * omega_1 + omega_2) + q2 * (-5.0 + 4.0 * sigmabar))) +
                               6.0 * omega_1 * (2.0 * omega_1 + omega_2) * power_of<2>(q2)) +
                               2.0 * m_B * sigma4 * (-(2.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar2) +
                               5.0 * m_B2 * (4.0 * omega_1 + omega_2) * q2 * sigmabar + m_B5 * sigmabar2 * (-8.0 + 5.0 * sigmabar) +
                               5.0 * m_B3 * sigmabar * (2.0 * m_v2 + 3.0 * q2 - 2.0 * q2 * sigmabar) +
                               2.0 * m_B * q2 * (6.0 * m_v2 - 5.0 * q2 * sigmabar) + 3.0 * (4.0 * omega_1 + omega_2) * power_of<2>(q2)) +
                               sigmabar * (m_B4 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar2 -
                               m_B3 * m_v * sigmabar * (m_v * (4.0 * omega_1 + omega_2) + omega_1 * omega_2 * sigmabar) +
                               m_B * m_v * (-(5.0 * m_v2 * omega_1 * omega_2) + 3.0 * m_v3 * (4.0 * omega_1 + omega_2) * sigmabar +
                               omega_1 * omega_2 * q2 * sigmabar + m_v * (4.0 * omega_1 + omega_2) * q2 * sigmabar) +
                               m_B2 * (m_v3 * omega_2 * sigmabar - omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar * (1 + sigmabar) -
                               m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * (-5.0 + 3.0 * sigmabar)) -
                               omega_1 * (2.0 * omega_1 + omega_2) *
                               (16.0 * m_v4 + m_v2 * q2 * (5.0 - 4.0 * sigmabar) - sigmabar * power_of<2>(q2))) +
                               sigma * (-(2.0 * m_B5 * (4.0 * omega_1 + omega_2) * sigmabar3) +
                               2.0 * m_B4 * sigmabar2 * (2.0 * m_v2 - 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-1 + sigmabar) +
                               m_v * omega_2 * sigmabar) + m_B3 * sigmabar *
                               (2.0 * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (1 + sigmabar) +
                               2.0 * m_v * omega_1 * omega_2 * sigmabar * (-2.0 + sigmabar) +
                               m_v2 * (4.0 * omega_1 + omega_2) * (-5.0 + 6.0 * sigmabar)) +
                               m_B2 * sigmabar * (5.0 * m_v3 * omega_2 - 12.0 * m_v4 * sigmabar - 2.0 * m_v * omega_2 * q2 * sigmabar +
                               omega_1 * (2.0 * omega_1 + omega_2) * q2 * (-5.0 + 2.0 * sigmabar) +
                               m_v2 * (-(4.0 * q2 * sigmabar) + omega_1 * (2.0 * omega_1 + omega_2) * (-15.0 + 4.0 * sigmabar))) +
                               m_B * sigmabar * (17.0 * m_v4 * (4.0 * omega_1 + omega_2) + 5.0 * m_v * omega_1 * omega_2 * q2 -
                               m_v2 * (4.0 * omega_1 + omega_2) * q2 * (-5.0 + 8.0 * sigmabar) -
                               2.0 * (4.0 * omega_1 + omega_2) * sigmabar * power_of<2>(q2)) -
                               omega_1 * (2.0 * omega_1 + omega_2) *
                               (6.0 * m_v4 - 24 * m_v2 * q2 * sigmabar + sigmabar * (-5.0 + 2.0 * sigmabar) * power_of<2>(q2))) +
                               sigma2 * (6.0 * m_B6 * sigmabar3 + 2.0 * m_B5 * (4.0 * omega_1 + omega_2) * sigmabar2 *
                               (-2.0 + 3.0 * sigmabar) + 4.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 *
                               (3.0 * m_v2 - 2.0 * q2 * sigmabar) + m_B3 * sigmabar *
                               (-(5.0 * (4.0 * omega_1 + omega_2) * q2 * (-1 + sigmabar)) + 4.0 * m_v * omega_1 * omega_2 * sigmabar -
                               3.0 * m_v2 * (4.0 * omega_1 + omega_2) * (-5.0 + 2.0 * sigmabar)) -
                               m_B4 * sigmabar * (6.0 * q2 * sigmabar * (1 + sigmabar) + m_v * omega_2 * sigmabar * (-4.0 + 3.0 * sigmabar) -
                               omega_1 * (2.0 * omega_1 + omega_2) * sigmabar * (-8.0 + 3.0 * sigmabar) +
                               2.0 * m_v2 * (-5.0 + 9.0 * sigmabar)) +
                               m_B2 * sigmabar * (-36 * m_v4 - 5.0 * m_v * omega_2 * q2 +
                               2.0 * m_v2 * (5.0 * omega_1 * (2.0 * omega_1 + omega_2) + q2 * (-5.0 + 12.0 * sigmabar)) +
                               3.0 * q2 * (2.0 * q2 * sigmabar - omega_1 * (2.0 * omega_1 + omega_2) * (-5.0 + 2.0 * sigmabar))) +
                               m_B * (4.0 * omega_1 + omega_2) * (6.0 * m_v4 - 26 * m_v2 * q2 * sigmabar +
                               sigmabar * (-5.0 + 3.0 * sigmabar) * power_of<2>(q2))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d1B_T23B_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23B proportional to phi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * (-((m_v2 - q2 * sigma) * sigmabar * (m_B * m_v - 3.0 * m_v2 - q2 * sigmabar - m_B2 * (-1 + 2.0 * sigma) * sigmabar)) +
                               m_B2 * sigmabar2 * sigma * (q2 - m_B * (m_B + m_v - m_B * sigma) * sigmabar) + sigma * power_of<2>(m_v2 - q2 * sigma))
                             / (m_B * power_of<6>(sigmabar) * omega_2);

            return C_4 * phi_bar_bar_4;
        }

        double I4d1C_T23B_3pt_phi_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to phi_bar_bar_4

            return 0.0;
        }
        double I4d2A_T23B_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to phi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B), m_B6 = power_of<6>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 12.0 * (sigma5 * (20.0 * m_B6 * sigmabar2 - 60 * m_B4 * q2 * sigmabar - 42 * m_B2 * power_of<2>(q2)) +
                               sigma3 * (-(4.0 * m_B5 * (4.0 * omega_1 + omega_2) * sigmabar2 * (-5.0 + 4.0 * sigmabar)) +
                               3.0 * m_B * (4.0 * omega_1 + omega_2) * q2 * (-(14.0 * m_v2) + 13.0 * q2 * sigmabar) +
                               4.0 * m_B6 * sigmabar2 * (5.0 + sigmabar * (-16.0 + 5.0 * sigmabar)) +
                               10.0 * m_B4 * sigmabar * (-(3.0 * q2) - m_v * omega_2 * sigmabar +
                               omega_1 * (2.0 * omega_1 + omega_2) * sigmabar + 2.0 * q2 * sigmabar * (5.0 - 2.0 * sigmabar) +
                               m_v2 * (-9.0 + 8.0 * sigmabar)) + 5.0 * m_B3 * (4.0 * omega_1 + omega_2) * sigmabar *
                               (-(6.0 * m_v2) + q2 * (-9.0 + 8.0 * sigmabar)) -
                               6.0 * m_B2 * (7.0 * m_v4 - 36 * m_v2 * q2 * sigmabar +
                               5.0 * q2 * sigmabar * (omega_1 * (2.0 * omega_1 + omega_2) + q2 * (-1 + 2.0 * sigmabar))) -
                               21 * omega_1 * (2.0 * omega_1 + omega_2) * power_of<2>(q2)) +
                               m_B * sigma4 * (-(10.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar2) +
                               40 * m_B5 * sigmabar2 * (-1 + sigmabar) + 30 * m_B2 * (4.0 * omega_1 + omega_2) * q2 * sigmabar +
                               6.0 * m_B * q2 * (14.0 * m_v2 - 15.0 * q2 * sigmabar) +
                               10.0 * m_B3 * sigmabar * (6.0 * m_v2 + q2 * (9.0 - 10.0 * sigmabar)) +
                               21 * (4.0 * omega_1 + omega_2) * power_of<2>(q2)) -
                               sigmabar * (m_B5 * (4.0 * omega_1 + omega_2) * sigmabar3 -
                               m_B4 * sigmabar2 * (2.0 * m_v2 + m_v * omega_2 * sigmabar -
                               2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-2.0 + sigmabar)) -
                               m_B3 * sigmabar * ((4.0 * omega_1 + omega_2) * q2 * sigmabar * (1 + sigmabar) +
                               m_v * omega_1 * omega_2 * sigmabar * (-4.0 + sigmabar) +
                               m_v2 * (4.0 * omega_1 + omega_2) * (-5.0 + 3.0 * sigmabar)) +
                               m_B2 * (6.0 * m_v4 * sigmabar2 + m_v * omega_2 * sigmabar2 * q2 - 5.0 * m_v3 * omega_2 * sigmabar +
                               omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar * (5.0 + sigmabar) +
                               m_v2 * (2.0 * sigmabar2 * q2 - omega_1 * (2.0 * omega_1 + omega_2) *
                               (15.0 + sigmabar * (-15.0 + 2.0 * sigmabar)))) +
                               m_B * (15.0 * m_v3 * omega_1 * omega_2 - 16.0 * m_v4 * (4.0 * omega_1 + omega_2) * sigmabar -
                               5.0 * m_v * omega_1 * omega_2 * q2 * sigmabar +
                               m_v2 * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (-5.0 + 4.0 * sigmabar) +
                               (4.0 * omega_1 + omega_2) * sigmabar2 * power_of<2>(q2)) +
                               omega_1 * (2.0 * omega_1 + omega_2) *
                               (51 * m_v4 + m_v2 * q2 * (15.0 - 22 * sigmabar) + sigmabar * (-5.0 + sigmabar) * power_of<2>(q2))) +
                               sigma * (6.0 * m_B6 * sigmabar4 + 2.0 * m_B5 * (4.0 * omega_1 + omega_2) * sigmabar3 *
                               (-4.0 + 3.0 * sigmabar) - m_B3 * sigmabar *
                               ((4.0 * omega_1 + omega_2) * q2 * sigmabar * (-10.0 + sigmabar) +
                               2.0 * m_v * omega_1 * omega_2 * sigmabar * (5.0 - 4.0 * sigmabar) +
                               3.0 * m_v2 * (4.0 * omega_1 + omega_2) * (5.0 + 2.0 * sigmabar * (-5.0 + sigmabar))) +
                               m_B4 * sigmabar2 * (-(6.0 * q2 * sigmabar * (1 + sigmabar)) + m_v2 * (20.0 - 18.0 * sigmabar) +
                               m_v * omega_2 * sigmabar * (8.0 - 3.0 * sigmabar) +
                               omega_1 * (2.0 * omega_1 + omega_2) * (10.0 + sigmabar * (-16.0 + 3.0 * sigmabar))) +
                               m_B2 * sigmabar * (15.0 * m_v3 * omega_2 - 66 * m_v4 * sigmabar - 10.0 * m_v * omega_2 * q2 * sigmabar +
                               q2 * (6.0 * sigmabar2 * q2 - omega_1 * (2.0 * omega_1 + omega_2) *
                               (15.0 + 6.0 * sigmabar2 - 20.0 * sigmabar)) +
                               m_v2 * (5.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-9.0 + 4.0 * sigmabar) +
                               4.0 * q2 * sigmabar * (-5.0 + 6.0 * sigmabar))) -
                               omega_1 * (2.0 * omega_1 + omega_2) *
                               (21 * m_v4 - 84 * m_v2 * q2 * sigmabar + sigmabar * (-15.0 + 13.0 * sigmabar) * power_of<2>(q2)) +
                               m_B * sigmabar * (57 * m_v4 * (4.0 * omega_1 + omega_2) + 15.0 * m_v * omega_1 * omega_2 * q2 -
                               m_v2 * (4.0 * omega_1 + omega_2) * q2 * (-15.0 + 46 * sigmabar) +
                               (4.0 * omega_1 + omega_2) * sigmabar * (-10.0 + 3.0 * sigmabar) * power_of<2>(q2))) +
                               sigma2 * (-24 * m_B6 * sigmabar3 * (-1 + sigmabar) +
                               3.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (14.0 * m_v2 - 11.0 * q2 * sigmabar) -
                               2.0 * m_B5 * (4.0 * omega_1 + omega_2) * sigmabar2 * (5.0 + 3.0 * sigmabar * (-4.0 + sigmabar)) +
                               m_B3 * sigmabar * (10.0 * m_v * omega_1 * omega_2 * sigmabar -
                               15.0 * m_v2 * (4.0 * omega_1 + omega_2) * (-3.0 + 2.0 * sigmabar) +
                               (4.0 * omega_1 + omega_2) * q2 * (15.0 + sigmabar * (-35 + 12.0 * sigmabar))) -
                               3.0 * m_B2 * sigmabar * (42 * m_v4 + 5.0 * m_v * omega_2 * q2 -
                               2.0 * m_v2 * (5.0 * omega_1 * (2.0 * omega_1 + omega_2) + q2 * (-5.0 + 24 * sigmabar)) +
                               q2 * (5.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-3.0 + 2.0 * sigmabar) +
                               2.0 * q2 * sigmabar * (-5.0 + 2.0 * sigmabar))) +
                               2.0 * m_B4 * sigmabar * (3.0 * q2 * sigmabar * (-5.0 + 2.0 * sigmabar) +
                               2.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar * (-5.0 + 3.0 * sigmabar) +
                               m_v * omega_2 * sigmabar * (5.0 - 6.0 * sigmabar) +
                               3.0 * m_v2 * (5.0 + sigmabar * (-15.0 + 4.0 * sigmabar))) +
                               3.0 * m_B * (4.0 * omega_1 + omega_2) *
                               (7.0 * m_v4 - 32 * m_v2 * q2 * sigmabar + sigmabar * (-5.0 + 7.0 * sigmabar) * power_of<2>(q2))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<8>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d2B_T23B_3pt_phi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23B proportional to phi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double phi_bar_4     = this->phi_bar_4(omega_1, omega_2);
            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            return  (-(12.0 * phi_bar_bar_4 *
                    (2.0 * m_B * sigma4 * (-(3.0 * q2) + m_B2 * sigmabar) * (q2 + 2.0 * m_B2 * sigmabar) +
                    sigma3 * (-(4.0 * m_B4 * (m_v + omega_1) * sigmabar2) + 10.0 * m_B2 * omega_1 * q2 * sigmabar +
                    4.0 * m_B5 * sigmabar2 * (-2.0 + sigmabar) + 3.0 * m_B * q2 * (4.0 * m_v2 - 3.0 * q2 * sigmabar) +
                    m_B3 * sigmabar * (10.0 * m_v2 + q2 * (15.0 - 8.0 * sigmabar)) + 6.0 * omega_1 * power_of<2>(q2)) +
                    sigmabar * (-(m_B4 * omega_1 * sigmabar2) + m_B3 * m_v * sigmabar * (m_v - omega_1 * sigmabar) -
                    m_B * m_v * (5.0 * m_v2 * omega_1 + 3.0 * m_v3 * sigmabar + m_v * q2 * sigmabar - omega_1 * q2 * sigmabar) +
                    m_B2 * omega_1 * (q2 * sigmabar * (1 + sigmabar) + m_v2 * (-5.0 + 3.0 * sigmabar)) +
                    omega_1 * (16.0 * m_v4 + m_v2 * q2 * (5.0 - 4.0 * sigmabar) - sigmabar * power_of<2>(q2))) +
                    sigma * (2.0 * m_B5 * sigmabar3 + m_B4 * sigmabar2 * (4.0 * omega_1 * (-1 + sigmabar) + m_v * sigmabar) +
                    m_B2 * sigmabar * (5.0 * m_v3 - m_v * q2 * sigmabar + omega_1 * q2 * (5.0 - 2.0 * sigmabar) +
                    m_v2 * omega_1 * (15.0 - 4.0 * sigmabar)) +
                    m_B3 * sigmabar * (-(2.0 * q2 * sigmabar * (1 + sigmabar)) +
                    2.0 * m_v * omega_1 * sigmabar * (-2.0 + sigmabar) + m_v2 * (5.0 - 6.0 * sigmabar)) +
                    m_B * sigmabar * (-(17.0 * m_v4) + 5.0 * m_v * omega_1 * q2 + m_v2 * q2 * (-5.0 + 8.0 * sigmabar) +
                    2.0 * sigmabar * power_of<2>(q2)) +
                    omega_1 * (6.0 * m_v4 - 24 * m_v2 * q2 * sigmabar + sigmabar * (-5.0 + 2.0 * sigmabar) * power_of<2>(q2))) +
                    sigma2 * (2.0 * m_B5 * sigmabar2 * (2.0 - 3.0 * sigmabar) +
                    4.0 * omega_1 * q2 * (-(3.0 * m_v2) + 2.0 * q2 * sigmabar) +
                    m_B3 * sigmabar * (5.0 * q2 * (-1 + sigmabar) + 4.0 * m_v * omega_1 * sigmabar +
                    3.0 * m_v2 * (-5.0 + 2.0 * sigmabar)) +
                    m_B2 * sigmabar * (-(10.0 * m_v2 * omega_1) - 5.0 * m_v * q2 +
                    3.0 * omega_1 * q2 * (-5.0 + 2.0 * sigmabar)) +
                    m_B4 * sigmabar2 * (-(2.0 * m_v * (-2.0 + sigmabar)) + omega_1 * (8.0 - 3.0 * sigmabar)) +
                    m_B * (-(6.0 * m_v4) + 26 * m_v2 * q2 * sigmabar + sigmabar * (5.0 - 3.0 * sigmabar) * power_of<2>(q2))))) +
                    6.0 * m_B * (-omega_1 + m_B * sigma) * sigmabar *
                    (-((m_v2 - q2 * sigma) * sigmabar * (m_B * m_v - 3.0 * m_v2 - q2 * sigmabar -
                    m_B2 * (-1.0 + 2.0 * sigma) * sigmabar)) +
                    m_B2 * sigmabar2 * sigma * (q2 - m_B * (m_B + m_v - m_B * sigma) * sigmabar) +
                    sigma * power_of<2>(m_v2 - q2 * sigma)) * phi_bar_4)
                    / (m_B * power_of<2>(omega_2) * power_of<7>(sigmabar));

        }

        double I4d2C_T23B_3pt_phi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to phi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * ((m_v2 - q2 * sigma) * (m_B * m_v + 3.0 * m_v2 + q2 - q2 * sigma + m_B2 * (-1.0 + sigma * (3.0 - 2.0 * sigma))) *
                               sigmabar + m_B2 * sigmabar2 * sigma * (q2 + m_B * sigmabar * (m_v - m_B * sigmabar)) +
                               sigma * power_of<2>(m_v2 - q2 * sigma))
                             / (power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * phi_bar_bar_4;
        }

        double I4d2D_T23B_3pt_phi_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to T23B proportional to phi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double phi_bar_4     = this->phi_bar_4(omega_1, omega_2);
            const double phi_bar_bar_4 = this->phi_bar_bar_4(omega_1, omega_2);

            return    6.0 * pow(m_B,-2.0) * pow(sigmabar,-7.0) *
                      (phi_bar_bar_4 * ((-m_v2 + q2 * sigma) * sigmabar *
                      (m_B * m_v - 4.0 * m_v2 - q2 + 4.0 * q2 * sigma - m_B2 * (-1.0 + 2.0 * sigma) * sigmabar) +
                      sigmabar2 * (m_B * m_v * q2 + q2 * (-(4.0 * m_v2) - q2 + 2.0 * q2 * sigma) +
                      m_B2 * (q2 + m_v2 * (3.0 - 4.0 * sigma) - 6.0 * q2 * sigma * sigmabar)) +
                      m_B2 * sigmabar3 * (q2 - m_B * (m_v - 2.0 * m_v * sigma - m_B * (-1.0 + 3.0 * sigma) * sigmabar)) +
                      2.0 * sigma * power_of<2>(m_v2 - q2 * sigma)) +
                      m_B * sigmabar * (-((m_v2 - q2 * sigma) * sigmabar *
                      (m_B * m_v - 3.0 * m_v2 - q2 * sigmabar - m_B2 * (-1.0 + 2.0 * sigma) * sigmabar)) +
                      m_B2 * sigmabar2 * sigma * (q2 - m_B * (m_B + m_v - m_B * sigma) * sigmabar) +
                      sigma * power_of<2>(m_v2 - q2 * sigma)) * phi_bar_4);
        }

        double I2_T23B_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to psi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_2 = -(6.0 * m_v + m_B * (-1.0 + 2.0 * u) * (-2.0 + sigmabar)) / (m_B2 * power_of<3>(sigmabar));

            return C_2 * psi_bar_4;
        }

        double I3_T23B_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to psi_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = -(2.0 * (3.0 * m_v3 + m_B2 * m_v * sigmabar * (2.0 - 3.0 * sigmabar) + m_v * q2 * (-3.0 + 4.0 * sigmabar) +
                               m_B3 * sigmabar2 * (-1.0 + sigmabar) * (-1.0 + 2.0 * u) - m_B * (q2 * (-1.0 + sigmabar) + m_v2 * (1 + sigmabar)) * (-1.0 + 2.0 * u)))
                             / (m_B2 * power_of<4>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I3d1A_T23B_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to psi_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (-(m_B3 * (2.0 * omega_1 + omega_2) * sigmabar3) +
                               4.0 * m_B2 * sigma2 * (m_v2 + m_B2 * sigmabar2 - 2.0 * q2) +
                               m_B2 * m_v * sigmabar * (m_v - 3.0 * omega_2 * (-1.0 + sigmabar) + 3.0 * m_v * sigmabar) -
                               4.0 * m_v * omega_2 * (3.0 * m_v2 + q2 - q2 * sigmabar) +
                               m_B * (2.0 * omega_1 + omega_2) * (q2 * sigmabar - m_v2 * (2.0 + 5.0 * sigmabar)) +
                               sigma * (-(2.0 * m_B3 * (2.0 * omega_1 + omega_2) * sigmabar2) + 4.0 * m_B4 * sigmabar3 +
                               16.0 * m_v * omega_2 * q2 - 2.0 * m_B * (2.0 * omega_1 + omega_2) * (m_v2 - 2.0 * q2) +
                               m_B2 * (-(9.0 * m_v * omega_2 * sigmabar) - 4.0 * q2 * sigmabar + m_v2 * (4.0 + 11.0 * sigmabar))))
                             / (m_B2 * omega_2 * power_of<5>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I3d1B_T23B_3pt_psi_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23B proportional to psi_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = -((2.0 * m_B3 * sigmabar2 * sigma - 2.0 * m_B * q2 * sigma - 2.0 * m_v * (3.0 * m_v2 + q2 - 4.0 * q2 * sigma) +
                               2.0 * m_B2 * m_v * (1 - 3.0 * sigma) * sigmabar + m_B * m_v2 * (1 + sigma + 3.0 * sigmabar)))
                             / (m_B * (-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I3d1C_T23B_3pt_psi_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to psi_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_4 = this->psi_bar_4(omega_1, omega_2);

            const double C_3 = -((2.0 * m_B3 * sigmabar2 * sigma - 2.0 * m_B * q2 * sigma + 2.0 * m_v * (3.0 * m_v2 + q2 - 4.0 * q2 * sigma) +
                               2.0 * m_B2 * m_v * (-1.0 + 3.0 * sigma) * sigmabar + m_B * m_v2 * (1 + sigma + 3.0 * sigmabar)))
                             / (m_B * omega_2 * power_of<4>(sigmabar));

            return C_3 * psi_bar_4;
        }

        double I3_T23B_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to psi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 6.0 * m_v * u * (-2.0 + 3.0 * sigmabar) / (m_B * power_of<4>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1A_T23B_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to psi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 6.0 * m_v * (-12.0 * sigma * sigma * m_B + sigma * m_B * (4.0 - 6.0 * sigmabar) - 4.0 * omega_1 + 12.0 * sigma * omega_1
                             + sigmabar * (m_B + 3.0 * omega_1))
                             / (m_B * omega_2 * power_of<5>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1B_T23B_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 6.0 * (-1.0 + 3.0 * sigma) * m_v
                             / ((-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1C_T23B_3pt_psiA_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to psi_bar_bar_4

            return 0.0;
        }

        double I4_T23B_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2  = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_v * u * (m_v2 * (-2.0 + 3.0 * sigmabar) -
                               2.0 * (-1 + sigmabar) * (m_B2 * sigmabar2 + q2 - 2.0 * q2 * sigmabar) +
                               m_B * m_v * (-1 + sigmabar) * sigmabar * (-1 + 2.0 * u))
                             / (m_B * power_of<5>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1A_T23B_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2  = power_of<2>(sigmabar), sigmabar3  = power_of<3>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(6.0 * m_v * (m_B * (-(4.0 * m_B2 * omega_2 * sigmabar3 * sigma) +
                               2.0 * m_B * sigmabar2 * sigma * (-(m_v * omega_2) + 3.0 * m_B * (m_v - omega_2) * sigma) -
                               5.0 * omega_2 * sigma * (2.0 * q2 * sigma * (-1 + 2.0 * sigma) + m_v2 * (1 - 3.0 * sigma)) +
                               (8.0 * m_B2 * m_v * sigma3 - omega_2 *
                               (4.0 * q2 * sigma * (-1 + 3.0 * sigma) + m_v * (m_v + 4.0 * m_B * sigma2 - 6.0 * m_v * sigma))) * sigmabar) +
                               omega_1 * (m_v2 * omega_2 * (5.0 - 15.0 * sigma - 3.0 * sigmabar) +
                               2.0 * omega_2 * (m_B2 * sigmabar3 + 10.0 * sigma2 * q2 + 3.0 * m_B2 * sigmabar2 * sigma - q2 * sigmabar +
                               q2 * sigma * (-5.0 + 4.0 * sigmabar)) +
                               m_B * m_v * sigmabar * (-(16.0 * m_B * sigma2) + omega_2 * sigmabar +
                               4.0 * sigma * (omega_2 - 2.0 * m_B * sigmabar))) +
                               2.0 * m_B * m_v * sigmabar * (4.0 * sigma + sigmabar) * power_of<2>(omega_1)))
                             / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1B_T23B_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23B proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2  = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_v * (m_v2 * (-1 + 3.0 * sigma) + 2.0 * sigma * (-(m_B2 * sigmabar2) + q2 - 2.0 * q2 * sigma) +
                               m_B * m_v * sigma * sigmabar)
                             / (power_of<5>(sigmabar) * omega_2);

            return C_4 * psi_bar_bar_4;
        }

        double I4d1C_T23B_3pt_psiA_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to psi_bar_bar_4

            return 0.0;
        }
        double I4d2A_T23B_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(12.0 * m_v * (m_B2 * (6.0 * omega_1 * omega_2 - m_v * (4.0 * omega_1 + omega_2)) * sigmabar3 -
                               2.0 * m_B3 * omega_2 * sigmabar4 + 20.0 * sigma3 * (-(3.0 * m_B * omega_2 * q2) + m_B3 * m_v * sigmabar) +
                               omega_1 * omega_2 * (-(15.0 * m_v2 * (-1 + sigmabar)) + 2.0 * q2 * sigmabar * (-5.0 + 2.0 * sigmabar)) +
                               m_B * sigmabar * (4.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar + 2.0 * omega_2 * q2 * sigmabar +
                               m_v2 * omega_2 * (-5.0 + 3.0 * sigmabar)) +
                               sigma2 * (12.0 * m_B3 * (2.0 * m_v - omega_2) * sigmabar2 + 60 * omega_1 * omega_2 * q2 -
                               10.0 * m_B2 * m_v * (4.0 * omega_1 + omega_2) * sigmabar +
                               15.0 * m_B * omega_2 * (3.0 * m_v2 + 2.0 * q2 - 4.0 * q2 * sigmabar)) +
                               sigma * (4.0 * m_B2 * (3.0 * omega_1 * omega_2 - 2.0 * m_v * (4.0 * omega_1 + omega_2)) * sigmabar2 +
                               6.0 * m_B3 * (m_v - 2.0 * omega_2) * sigmabar3 -
                               5.0 * omega_1 * omega_2 * (9.0 * m_v2 + 6.0 * q2 - 8.0 * q2 * sigmabar) +
                               m_B * (10.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar +
                               15.0 * m_v2 * omega_2 * (-1 + 2.0 * sigmabar) + 4.0 * omega_2 * q2 * sigmabar * (5.0 - 3.0 * sigmabar)))))
                             / (m_B * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2B_T23B_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23B proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double psi_bar_4     = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return  6.0 * m_v * pow(omega_1 - m_B * sigma,-2.0) * pow(sigmabar,-6.0) *
                    (-(2.0 * (omega_1 * (-(2.0 * m_B2 * sigmabar3) + 10.0 * q2 * sigma * (1 - 2.0 * sigma) +
                    5.0 * m_v2 * (-1 + 3.0 * sigma) + m_B * sigmabar2 * (m_v - 6.0 * m_B * sigma) +
                    (3.0 * m_v2 + 2.0 * q2 + 4.0 * m_B * m_v * sigma - 8.0 * q2 * sigma) * sigmabar) +
                    m_B * sigma * (2.0 * m_B2 * sigmabar3 + 20.0 * sigma2 * q2 + 6.0 * m_B2 * sigmabar2 * sigma -
                    2.0 * q2 * sigmabar - 2.0 * m_B * m_v * sigmabar * (2.0 * sigma + sigmabar) +
                    m_v2 * (5.0 - 15.0 * sigma - 3.0 * sigmabar) + 2.0 * q2 * sigma * (-5.0 + 4.0 * sigmabar))) * psi_bar_bar_4) -
                    m_B * (-omega_1 + m_B * sigma) * sigmabar * (m_v2 * (1 - 3.0 * sigma) +
                    2.0 * sigma * (m_B2 * sigmabar2 + q2 * (-1 + 2.0 * sigma)) - m_B * m_v * sigma * sigmabar) * psi_bar_4);
        }

        double I4d2C_T23B_3pt_psiA_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_B * m_v * (m_v2 * (1 - 3.0 * sigma) + 2.0 * sigma * (m_B2 * sigmabar2 + q2 * (-1 + 2.0 * sigma)) +
                               m_B * m_v * sigma * sigmabar) / (power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2D_T23B_3pt_psiA_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to T23B proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_4     = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return    6.0 * m_v * pow(m_B,-1) * pow(sigmabar,-6.0) *
                      ((m_B * m_v * sigmabar2 - 4.0 * sigma2 * q2 + 2.0 * (-(m_B2 * sigmabar2) + q2) * sigmabar +
                      m_v2 * (-1 + 3.0 * sigma + 3.0 * sigmabar) + 2.0 * sigma * (m_B2 * sigmabar2 + q2 - 4.0 * q2 * sigmabar)) * psi_bar_bar_4 + m_B * sigmabar *
                      (m_v2 * (-1 + 3.0 * sigma) + 2.0 * sigma * (-(m_B2 * sigmabar2) + q2 - 2.0 * q2 * sigma) +
                      m_B * m_v * sigma * sigmabar) * psi_bar_4);
        }

        double I2_T23B_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_2 = - 6.0 * sigma * u * (-1.0 + 2.0 * u)
                             / (m_B2 * power_of<4>(sigmabar));

            return C_2 * psi_bar_bar_4;
        }

        double I3_T23B_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar3 = power_of<3>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -(2.0 * u * (m_B * m_v * sigmabar * (-3.0 + sigmabar) + 3.0 * m_v2 * (2.0 + sigmabar) * (-1 + 2.0 * u) -
                               2.0 * (m_B2 * sigmabar3 + q2 * (3.0 + 2.0 * sigmabar * (-3.0 + sigmabar))) * (-1 + 2.0 * u)))
                             / (m_B2 * power_of<5>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1A_T23B_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma), sigma4   = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (4.0 * sigma4 * (15.0 * m_B2 * q2 + 4.0 * m_B4 * sigmabar) +
                               2.0 * m_B * sigma3 * (-(15.0 * (4.0 * omega_1 + omega_2) * q2) -
                               4.0 * m_B2 * (4.0 * omega_1 + omega_2) * sigmabar + 8.0 * m_B3 * sigmabar * (-2.0 + sigmabar) +
                               m_B * (-30 * m_v2 + 32 * q2 * sigmabar)) + 2.0 * sigma *
                               (4.0 * m_B4 * sigmabar2 + 4.0 * m_B3 * (4.0 * omega_1 + omega_2) * (-1 + sigmabar) * sigmabar -
                               5.0 * omega_1 * (2.0 * omega_1 + omega_2) * (3.0 * m_v2 - 2.0 * q2 * sigmabar) -
                               2.0 * m_B * sigmabar * (m_v * omega_1 * omega_2 - 12.0 * m_v2 * (4.0 * omega_1 + omega_2) +
                               (4.0 * omega_1 + omega_2) * q2 * (-2.0 + sigmabar)) +
                               m_B2 * sigmabar * (-(18.0 * m_v2 * sigmabar) - 4.0 * q2 * sigmabar +
                               2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-4.0 + sigmabar) + m_v * omega_2 * (4.0 + sigmabar))) -
                               sigmabar * (2.0 * m_B3 * (4.0 * omega_1 + omega_2) * sigmabar -
                               2.0 * m_B2 * (m_v * omega_2 * sigmabar - 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-2.0 + sigmabar)) +
                               2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (21 * m_v2 - q2 * (-4.0 + sigmabar)) +
                               m_B * (-(9.0 * m_v2 * (4.0 * omega_1 + omega_2) * sigmabar) -
                               2.0 * (4.0 * omega_1 + omega_2) * q2 * sigmabar + m_v * omega_1 * omega_2 * (8.0 + sigmabar))) -
                               2.0 * sigma2 * (-(15.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2) +
                               4.0 * m_B4 * sigmabar * (-2.0 + 3.0 * sigmabar) +
                               m_B3 * (4.0 * omega_1 + omega_2) * sigmabar * (-8.0 + 3.0 * sigmabar) -
                               m_B * (4.0 * omega_1 + omega_2) * (15.0 * m_v2 - 13.0 * q2 * sigmabar) -
                               2.0 * m_B2 * sigmabar * (-27 * m_v2 + m_v * omega_2 + 2.0 * omega_1 * (2.0 * omega_1 + omega_2) +
                               q2 * (-4.0 + 3.0 * sigmabar))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1B_T23B_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23B proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -(2.0 * (6.0 * sigma * (-m_v2 + q2 * sigma) +
                               sigmabar * (-(9.0 * m_v2) + 2.0 * m_B2 * sigmabar2 + m_B * m_v * (2.0 + sigma) - 2.0 * q2 * sigmabar)))
                             / (m_B * (-omega_1 + m_B * sigma) * power_of<5>(sigmabar));

            return C_3 * psi_bar_bar_4;
        }

        double I3d1C_T23B_3pt_psiB_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to psi_bar_bar_4

            return 0.0;
        }

        double I4_T23B_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(6.0 * u * (-(m_B * m_v3 * sigmabar) + m_B * m_v * (m_B2 * sigmabar2 - q2) * (-1 + sigmabar) * sigmabar +
                                m_v4 * (1 + 2.0 * sigmabar) * (-1 + 2.0 * u) +
                                (m_B2 * sigmabar2 - q2) * (-1 + sigmabar) * (m_B2 * sigmabar2 + q2 - 2.0 * q2 * sigmabar) * (-1 + 2.0 * u) +
                                m_v2 * (q2 * (-2.0 + 2.0 * sigmabar2 + sigmabar) + m_B2 * sigmabar2 * (1 - 2.0 * sigmabar)) * (-1 + 2.0 * u)))
                             / (m_B2 * power_of<6>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1A_T23B_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B), m_B6 = power_of<6>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * (4.0 * m_B2 * sigma5 * (-(3.0 * q2) + m_B2 * sigmabar) * (q2 + 2.0 * m_B2 * sigmabar) -
                               sigma3 * (4.0 * m_B5 * (4.0 * omega_1 + omega_2) * sigmabar2 * (-2.0 + sigmabar) +
                               8.0 * m_B6 * sigmabar2 * (-1 + 2.0 * sigmabar) +
                               3.0 * m_B * (4.0 * omega_1 + omega_2) * q2 * (4.0 * m_v2 - 3.0 * q2 * sigmabar) +
                               m_B3 * (4.0 * omega_1 + omega_2) * sigmabar * (10.0 * m_v2 + q2 * (15.0 - 8.0 * sigmabar)) -
                               2.0 * m_B4 * sigmabar * (-(5.0 * q2) - 2.0 * m_v * omega_2 * sigmabar +
                               2.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar + 8.0 * q2 * sigmabar +
                               m_v2 * (-15.0 + 8.0 * sigmabar)) +
                               2.0 * m_B2 * (6.0 * m_v4 - 28 * m_v2 * q2 * sigmabar +
                               q2 * sigmabar * (5.0 * omega_1 * (2.0 * omega_1 + omega_2) + q2 * (-5.0 + 4.0 * sigmabar))) +
                               6.0 * omega_1 * (2.0 * omega_1 + omega_2) * power_of<2>(q2)) +
                               2.0 * m_B * sigma4 * (-(2.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar2) +
                               5.0 * m_B2 * (4.0 * omega_1 + omega_2) * q2 * sigmabar + m_B5 * sigmabar2 * (-8.0 + 5.0 * sigmabar) +
                               5.0 * m_B3 * sigmabar * (2.0 * m_v2 + 3.0 * q2 - 2.0 * q2 * sigmabar) +
                               2.0 * m_B * q2 * (6.0 * m_v2 - 5.0 * q2 * sigmabar) + 3.0 * (4.0 * omega_1 + omega_2) * power_of<2>(q2)) +
                               sigmabar * (m_B4 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar2 -
                               m_B3 * m_v * sigmabar * (m_v * (4.0 * omega_1 + omega_2) + omega_1 * omega_2 * sigmabar) +
                               m_B * m_v * (-(5.0 * m_v2 * omega_1 * omega_2) + 3.0 * m_v3 * (4.0 * omega_1 + omega_2) * sigmabar +
                               omega_1 * omega_2 * q2 * sigmabar + m_v * (4.0 * omega_1 + omega_2) * q2 * sigmabar) +
                               m_B2 * (m_v3 * omega_2 * sigmabar - omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar * (1 + sigmabar) -
                               m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * (-5.0 + 3.0 * sigmabar)) -
                               omega_1 * (2.0 * omega_1 + omega_2) *
                               (16.0 * m_v4 + m_v2 * q2 * (5.0 - 4.0 * sigmabar) - sigmabar * power_of<2>(q2))) +
                               sigma * (-(2.0 * m_B5 * (4.0 * omega_1 + omega_2) * sigmabar3) +
                               2.0 * m_B4 * sigmabar2 * (2.0 * m_v2 - 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-1 + sigmabar) +
                               m_v * omega_2 * sigmabar) + m_B3 * sigmabar *
                               (2.0 * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (1 + sigmabar) +
                               2.0 * m_v * omega_1 * omega_2 * sigmabar * (-2.0 + sigmabar) +
                               m_v2 * (4.0 * omega_1 + omega_2) * (-5.0 + 6.0 * sigmabar)) +
                               m_B2 * sigmabar * (5.0 * m_v3 * omega_2 - 12.0 * m_v4 * sigmabar - 2.0 * m_v * omega_2 * q2 * sigmabar +
                               omega_1 * (2.0 * omega_1 + omega_2) * q2 * (-5.0 + 2.0 * sigmabar) +
                               m_v2 * (-(4.0 * q2 * sigmabar) + omega_1 * (2.0 * omega_1 + omega_2) * (-15.0 + 4.0 * sigmabar))) +
                               m_B * sigmabar * (17.0 * m_v4 * (4.0 * omega_1 + omega_2) + 5.0 * m_v * omega_1 * omega_2 * q2 -
                               m_v2 * (4.0 * omega_1 + omega_2) * q2 * (-5.0 + 8.0 * sigmabar) -
                               2.0 * (4.0 * omega_1 + omega_2) * sigmabar * power_of<2>(q2)) -
                               omega_1 * (2.0 * omega_1 + omega_2) *
                               (6.0 * m_v4 - 24 * m_v2 * q2 * sigmabar + sigmabar * (-5.0 + 2.0 * sigmabar) * power_of<2>(q2))) +
                               sigma2 * (6.0 * m_B6 * sigmabar3 + 2.0 * m_B5 * (4.0 * omega_1 + omega_2) * sigmabar2 *
                               (-2.0 + 3.0 * sigmabar) + 4.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 *
                               (3.0 * m_v2 - 2.0 * q2 * sigmabar) + m_B3 * sigmabar *
                               (-(5.0 * (4.0 * omega_1 + omega_2) * q2 * (-1 + sigmabar)) + 4.0 * m_v * omega_1 * omega_2 * sigmabar -
                               3.0 * m_v2 * (4.0 * omega_1 + omega_2) * (-5.0 + 2.0 * sigmabar)) -
                               m_B4 * sigmabar * (6.0 * q2 * sigmabar * (1 + sigmabar) + m_v * omega_2 * sigmabar * (-4.0 + 3.0 * sigmabar) -
                               omega_1 * (2.0 * omega_1 + omega_2) * sigmabar * (-8.0 + 3.0 * sigmabar) +
                               2.0 * m_v2 * (-5.0 + 9.0 * sigmabar)) +
                               m_B2 * sigmabar * (-36 * m_v4 - 5.0 * m_v * omega_2 * q2 +
                               2.0 * m_v2 * (5.0 * omega_1 * (2.0 * omega_1 + omega_2) + q2 * (-5.0 + 12.0 * sigmabar)) +
                               3.0 * q2 * (2.0 * q2 * sigmabar - omega_1 * (2.0 * omega_1 + omega_2) * (-5.0 + 2.0 * sigmabar))) +
                               m_B * (4.0 * omega_1 + omega_2) * (6.0 * m_v4 - 26 * m_v2 * q2 * sigmabar +
                               sigmabar * (-5.0 + 3.0 * sigmabar) * power_of<2>(q2))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d1B_T23B_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23B proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * (-((m_v2 - q2 * sigma) * sigmabar * (m_B * m_v - 3.0 * m_v2 - q2 * sigmabar - m_B2 * (-1 + 2.0 * sigma) * sigmabar)) +
                               m_B2 * sigmabar2 * sigma * (q2 - m_B * (m_B + m_v - m_B * sigma) * sigmabar) + sigma * power_of<2>(m_v2 - q2 * sigma))
                             / (m_B * power_of<6>(sigmabar) * omega_2);

            return C_4 * psi_bar_bar_4;
        }

        double I4d1C_T23B_3pt_psiB_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to psi_bar_bar_4

            return 0.0;
        }
        double I4d2A_T23B_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to psi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B), m_B6 = power_of<6>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 12.0 * (sigma5 * (20.0 * m_B6 * sigmabar2 - 60 * m_B4 * q2 * sigmabar - 42 * m_B2 * power_of<2>(q2)) +
                               sigma3 * (-(4.0 * m_B5 * (4.0 * omega_1 + omega_2) * sigmabar2 * (-5.0 + 4.0 * sigmabar)) +
                               3.0 * m_B * (4.0 * omega_1 + omega_2) * q2 * (-(14.0 * m_v2) + 13.0 * q2 * sigmabar) +
                               4.0 * m_B6 * sigmabar2 * (5.0 + sigmabar * (-16.0 + 5.0 * sigmabar)) +
                               10.0 * m_B4 * sigmabar * (-(3.0 * q2) - m_v * omega_2 * sigmabar +
                               omega_1 * (2.0 * omega_1 + omega_2) * sigmabar + 2.0 * q2 * sigmabar * (5.0 - 2.0 * sigmabar) +
                               m_v2 * (-9.0 + 8.0 * sigmabar)) + 5.0 * m_B3 * (4.0 * omega_1 + omega_2) * sigmabar *
                               (-(6.0 * m_v2) + q2 * (-9.0 + 8.0 * sigmabar)) -
                               6.0 * m_B2 * (7.0 * m_v4 - 36 * m_v2 * q2 * sigmabar +
                               5.0 * q2 * sigmabar * (omega_1 * (2.0 * omega_1 + omega_2) + q2 * (-1 + 2.0 * sigmabar))) -
                               21 * omega_1 * (2.0 * omega_1 + omega_2) * power_of<2>(q2)) +
                               m_B * sigma4 * (-(10.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar2) +
                               40 * m_B5 * sigmabar2 * (-1 + sigmabar) + 30 * m_B2 * (4.0 * omega_1 + omega_2) * q2 * sigmabar +
                               6.0 * m_B * q2 * (14.0 * m_v2 - 15.0 * q2 * sigmabar) +
                               10.0 * m_B3 * sigmabar * (6.0 * m_v2 + q2 * (9.0 - 10.0 * sigmabar)) +
                               21 * (4.0 * omega_1 + omega_2) * power_of<2>(q2)) -
                               sigmabar * (m_B5 * (4.0 * omega_1 + omega_2) * sigmabar3 -
                               m_B4 * sigmabar2 * (2.0 * m_v2 + m_v * omega_2 * sigmabar -
                               2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-2.0 + sigmabar)) -
                               m_B3 * sigmabar * ((4.0 * omega_1 + omega_2) * q2 * sigmabar * (1 + sigmabar) +
                               m_v * omega_1 * omega_2 * sigmabar * (-4.0 + sigmabar) +
                               m_v2 * (4.0 * omega_1 + omega_2) * (-5.0 + 3.0 * sigmabar)) +
                               m_B2 * (6.0 * m_v4 * sigmabar2 + m_v * omega_2 * sigmabar2 * q2 - 5.0 * m_v3 * omega_2 * sigmabar +
                               omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar * (5.0 + sigmabar) +
                               m_v2 * (2.0 * sigmabar2 * q2 - omega_1 * (2.0 * omega_1 + omega_2) *
                               (15.0 + sigmabar * (-15.0 + 2.0 * sigmabar)))) +
                               m_B * (15.0 * m_v3 * omega_1 * omega_2 - 16.0 * m_v4 * (4.0 * omega_1 + omega_2) * sigmabar -
                               5.0 * m_v * omega_1 * omega_2 * q2 * sigmabar +
                               m_v2 * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (-5.0 + 4.0 * sigmabar) +
                               (4.0 * omega_1 + omega_2) * sigmabar2 * power_of<2>(q2)) +
                               omega_1 * (2.0 * omega_1 + omega_2) *
                               (51 * m_v4 + m_v2 * q2 * (15.0 - 22 * sigmabar) + sigmabar * (-5.0 + sigmabar) * power_of<2>(q2))) +
                               sigma * (6.0 * m_B6 * sigmabar4 + 2.0 * m_B5 * (4.0 * omega_1 + omega_2) * sigmabar3 *
                               (-4.0 + 3.0 * sigmabar) - m_B3 * sigmabar *
                               ((4.0 * omega_1 + omega_2) * q2 * sigmabar * (-10.0 + sigmabar) +
                               2.0 * m_v * omega_1 * omega_2 * sigmabar * (5.0 - 4.0 * sigmabar) +
                               3.0 * m_v2 * (4.0 * omega_1 + omega_2) * (5.0 + 2.0 * sigmabar * (-5.0 + sigmabar))) +
                               m_B4 * sigmabar2 * (-(6.0 * q2 * sigmabar * (1 + sigmabar)) + m_v2 * (20.0 - 18.0 * sigmabar) +
                               m_v * omega_2 * sigmabar * (8.0 - 3.0 * sigmabar) +
                               omega_1 * (2.0 * omega_1 + omega_2) * (10.0 + sigmabar * (-16.0 + 3.0 * sigmabar))) +
                               m_B2 * sigmabar * (15.0 * m_v3 * omega_2 - 66 * m_v4 * sigmabar - 10.0 * m_v * omega_2 * q2 * sigmabar +
                               q2 * (6.0 * sigmabar2 * q2 - omega_1 * (2.0 * omega_1 + omega_2) *
                               (15.0 + 6.0 * sigmabar2 - 20.0 * sigmabar)) +
                               m_v2 * (5.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-9.0 + 4.0 * sigmabar) +
                               4.0 * q2 * sigmabar * (-5.0 + 6.0 * sigmabar))) -
                               omega_1 * (2.0 * omega_1 + omega_2) *
                               (21 * m_v4 - 84 * m_v2 * q2 * sigmabar + sigmabar * (-15.0 + 13.0 * sigmabar) * power_of<2>(q2)) +
                               m_B * sigmabar * (57 * m_v4 * (4.0 * omega_1 + omega_2) + 15.0 * m_v * omega_1 * omega_2 * q2 -
                               m_v2 * (4.0 * omega_1 + omega_2) * q2 * (-15.0 + 46 * sigmabar) +
                               (4.0 * omega_1 + omega_2) * sigmabar * (-10.0 + 3.0 * sigmabar) * power_of<2>(q2))) +
                               sigma2 * (-24 * m_B6 * sigmabar3 * (-1 + sigmabar) +
                               3.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (14.0 * m_v2 - 11.0 * q2 * sigmabar) -
                               2.0 * m_B5 * (4.0 * omega_1 + omega_2) * sigmabar2 * (5.0 + 3.0 * sigmabar * (-4.0 + sigmabar)) +
                               m_B3 * sigmabar * (10.0 * m_v * omega_1 * omega_2 * sigmabar -
                               15.0 * m_v2 * (4.0 * omega_1 + omega_2) * (-3.0 + 2.0 * sigmabar) +
                               (4.0 * omega_1 + omega_2) * q2 * (15.0 + sigmabar * (-35 + 12.0 * sigmabar))) -
                               3.0 * m_B2 * sigmabar * (42 * m_v4 + 5.0 * m_v * omega_2 * q2 -
                               2.0 * m_v2 * (5.0 * omega_1 * (2.0 * omega_1 + omega_2) + q2 * (-5.0 + 24 * sigmabar)) +
                               q2 * (5.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-3.0 + 2.0 * sigmabar) +
                               2.0 * q2 * sigmabar * (-5.0 + 2.0 * sigmabar))) +
                               2.0 * m_B4 * sigmabar * (3.0 * q2 * sigmabar * (-5.0 + 2.0 * sigmabar) +
                               2.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar * (-5.0 + 3.0 * sigmabar) +
                               m_v * omega_2 * sigmabar * (5.0 - 6.0 * sigmabar) +
                               3.0 * m_v2 * (5.0 + sigmabar * (-15.0 + 4.0 * sigmabar))) +
                               3.0 * m_B * (4.0 * omega_1 + omega_2) *
                               (7.0 * m_v4 - 32 * m_v2 * q2 * sigmabar + sigmabar * (-5.0 + 7.0 * sigmabar) * power_of<2>(q2))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<8>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2B_T23B_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23B proportional to psi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double psi_bar_4     = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return  (-(12.0 * psi_bar_bar_4 *
                    (2.0 * m_B * sigma4 * (-(3.0 * q2) + m_B2 * sigmabar) * (q2 + 2.0 * m_B2 * sigmabar) +
                    sigma3 * (-(4.0 * m_B4 * (m_v + omega_1) * sigmabar2) + 10.0 * m_B2 * omega_1 * q2 * sigmabar +
                    4.0 * m_B5 * sigmabar2 * (-2.0 + sigmabar) + 3.0 * m_B * q2 * (4.0 * m_v2 - 3.0 * q2 * sigmabar) +
                    m_B3 * sigmabar * (10.0 * m_v2 + q2 * (15.0 - 8.0 * sigmabar)) + 6.0 * omega_1 * power_of<2>(q2)) +
                    sigmabar * (-(m_B4 * omega_1 * sigmabar2) + m_B3 * m_v * sigmabar * (m_v - omega_1 * sigmabar) -
                    m_B * m_v * (5.0 * m_v2 * omega_1 + 3.0 * m_v3 * sigmabar + m_v * q2 * sigmabar - omega_1 * q2 * sigmabar) +
                    m_B2 * omega_1 * (q2 * sigmabar * (1 + sigmabar) + m_v2 * (-5.0 + 3.0 * sigmabar)) +
                    omega_1 * (16.0 * m_v4 + m_v2 * q2 * (5.0 - 4.0 * sigmabar) - sigmabar * power_of<2>(q2))) +
                    sigma * (2.0 * m_B5 * sigmabar3 + m_B4 * sigmabar2 * (4.0 * omega_1 * (-1 + sigmabar) + m_v * sigmabar) +
                    m_B2 * sigmabar * (5.0 * m_v3 - m_v * q2 * sigmabar + omega_1 * q2 * (5.0 - 2.0 * sigmabar) +
                    m_v2 * omega_1 * (15.0 - 4.0 * sigmabar)) +
                    m_B3 * sigmabar * (-(2.0 * q2 * sigmabar * (1 + sigmabar)) +
                    2.0 * m_v * omega_1 * sigmabar * (-2.0 + sigmabar) + m_v2 * (5.0 - 6.0 * sigmabar)) +
                    m_B * sigmabar * (-(17.0 * m_v4) + 5.0 * m_v * omega_1 * q2 + m_v2 * q2 * (-5.0 + 8.0 * sigmabar) +
                    2.0 * sigmabar * power_of<2>(q2)) +
                    omega_1 * (6.0 * m_v4 - 24 * m_v2 * q2 * sigmabar + sigmabar * (-5.0 + 2.0 * sigmabar) * power_of<2>(q2))) +
                    sigma2 * (2.0 * m_B5 * sigmabar2 * (2.0 - 3.0 * sigmabar) +
                    4.0 * omega_1 * q2 * (-(3.0 * m_v2) + 2.0 * q2 * sigmabar) +
                    m_B3 * sigmabar * (5.0 * q2 * (-1 + sigmabar) + 4.0 * m_v * omega_1 * sigmabar +
                    3.0 * m_v2 * (-5.0 + 2.0 * sigmabar)) +
                    m_B2 * sigmabar * (-(10.0 * m_v2 * omega_1) - 5.0 * m_v * q2 +
                    3.0 * omega_1 * q2 * (-5.0 + 2.0 * sigmabar)) +
                    m_B4 * sigmabar2 * (-(2.0 * m_v * (-2.0 + sigmabar)) + omega_1 * (8.0 - 3.0 * sigmabar)) +
                    m_B * (-(6.0 * m_v4) + 26 * m_v2 * q2 * sigmabar + sigmabar * (5.0 - 3.0 * sigmabar) * power_of<2>(q2))))) +
                    6.0 * m_B * (-omega_1 + m_B * sigma) * sigmabar *
                    (-((m_v2 - q2 * sigma) * sigmabar * (m_B * m_v - 3.0 * m_v2 - q2 * sigmabar -
                    m_B2 * (-1.0 + 2.0 * sigma) * sigmabar)) +
                    m_B2 * sigmabar2 * sigma * (q2 - m_B * (m_B + m_v - m_B * sigma) * sigmabar) +
                    sigma * power_of<2>(m_v2 - q2 * sigma)) * psi_bar_4)
                    / (m_B * power_of<2>(omega_2) * power_of<7>(sigmabar));

        }

        double I4d2C_T23B_3pt_psiB_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * ((m_v2 - q2 * sigma) * (m_B * m_v + 3.0 * m_v2 + q2 - q2 * sigma + m_B2 * (-1.0 + sigma * (3.0 - 2.0 * sigma))) *
                               sigmabar + m_B2 * sigmabar2 * sigma * (q2 + m_B * sigmabar * (m_v - m_B * sigmabar)) +
                               sigma * power_of<2>(m_v2 - q2 * sigma))
                             / (power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * psi_bar_bar_4;
        }

        double I4d2D_T23B_3pt_psiB_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to T23B proportional to psi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double psi_bar_4     = this->psi_bar_4(omega_1, omega_2);
            const double psi_bar_bar_4 = this->psi_bar_bar_4(omega_1, omega_2);

            return    6.0 * pow(m_B,-2.0) * pow(sigmabar,-7.0) *
                      (psi_bar_bar_4 * ((-m_v2 + q2 * sigma) * sigmabar *
                      (m_B * m_v - 4.0 * m_v2 - q2 + 4.0 * q2 * sigma - m_B2 * (-1.0 + 2.0 * sigma) * sigmabar) +
                      sigmabar2 * (m_B * m_v * q2 + q2 * (-(4.0 * m_v2) - q2 + 2.0 * q2 * sigma) +
                      m_B2 * (q2 + m_v2 * (3.0 - 4.0 * sigma) - 6.0 * q2 * sigma * sigmabar)) +
                      m_B2 * sigmabar3 * (q2 - m_B * (m_v - 2.0 * m_v * sigma - m_B * (-1.0 + 3.0 * sigma) * sigmabar)) +
                      2.0 * sigma * power_of<2>(m_v2 - q2 * sigma)) +
                      m_B * sigmabar * (-((m_v2 - q2 * sigma) * sigmabar *
                      (m_B * m_v - 3.0 * m_v2 - q2 * sigmabar - m_B2 * (-1.0 + 2.0 * sigma) * sigmabar)) +
                      m_B2 * sigmabar2 * sigma * (q2 - m_B * (m_B + m_v - m_B * sigma) * sigmabar) +
                      sigma * power_of<2>(m_v2 - q2 * sigma)) * psi_bar_4);
        }

        double I2_T23B_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - 0.0                                                       - I2_T23B_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3_T23B_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I3_T23B_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2)    - I3_T23B_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1A_T23B_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I3d1A_T23B_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I3d1A_T23B_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1B_T23B_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return - I3d1B_T23B_3pt_psiA_bar_bar_4( sigma, omega_1, q2)          - I3d1B_T23B_3pt_psiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I3d1C_T23B_3pt_psi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return - I3d1C_T23B_3pt_psiA_bar_bar_4( sigma, omega_2, q2)          - I3d1C_T23B_3pt_psiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4_T23B_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I4_T23B_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2)    - I4_T23B_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1A_T23B_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I4d1A_T23B_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d1A_T23B_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1B_T23B_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return - I4d1B_T23B_3pt_psiA_bar_bar_4( sigma, omega_1, q2)          - I4d1B_T23B_3pt_psiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d1C_T23B_3pt_psi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return - I4d1C_T23B_3pt_psiA_bar_bar_4( sigma, omega_2, q2)          - I4d1C_T23B_3pt_psiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2A_T23B_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return - I4d2A_T23B_3pt_psiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d2A_T23B_3pt_psiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d2B_T23B_3pt_psi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return - I4d2B_T23B_3pt_psiA_bar_bar_4( sigma, omega_1, q2)          - I4d2B_T23B_3pt_psiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d2C_T23B_3pt_psi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return - I4d2C_T23B_3pt_psiA_bar_bar_4( sigma, omega_2, q2)          - I4d2C_T23B_3pt_psiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2D_T23B_3pt_psi_bar_bar_4(const double & sigma, const double & q2) const
        {
            return - I4d2D_T23B_3pt_psiA_bar_bar_4( sigma, q2)                   - I4d2D_T23B_3pt_psiB_bar_bar_4(sigma, q2);
        }

        double I2_T23B_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to chi_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_2 = (6.0 * m_v + m_B * (-2.0 + u * (4.0 - 6.0 * sigmabar) + sigmabar)) / (m_B2 * power_of<3>(sigmabar));

            return C_2 * chi_bar_4;
        }

        double I3_T23B_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to chi_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (3.0 * m_v3 - m_B2 * m_v * sigmabar2 + m_v * q2 * (-3.0 + 4.0 * sigmabar) +
                               m_B3 * sigmabar2 * (-1.0 + sigmabar) * (1 + 2.0 * u) + m_B * m_v2 * (-1.0 - sigmabar + 2.0 * u) -
                               m_B * q2 * (-1.0 + sigmabar) * (1 + (-2.0 + 4.0 * sigmabar) * u))
                             / (m_B2 * power_of<4>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I3d1A_T23B_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to chi_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3  = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = -(2.0 * (m_B3 * (-(2.0 * omega_1) + omega_2) * sigmabar3 + 16.0 * m_B2 * sigma3 * q2 +
                               m_B2 * m_v * sigmabar * (m_v + 3.0 * omega_2 - (3.0 * m_v + omega_2) * sigmabar) -
                               4.0 * m_v * omega_2 * (3.0 * m_v2 + q2 - q2 * sigmabar) +
                               4.0 * m_B * sigma2 * (-(3.0 * m_B * m_v2) + m_B3 * sigmabar2 - 4.0 * omega_1 * q2 +
                               m_B * q2 * (-2.0 + 3.0 * sigmabar)) + sigma *
                               (6.0 * m_B * m_v2 * (2.0 * omega_1 + omega_2) + 2.0 * m_B3 * (-(2.0 * omega_1) + omega_2) * sigmabar2 +
                               4.0 * m_B4 * sigmabar3 + 16.0 * m_v * omega_2 * q2 -
                               4.0 * m_B * q2 * (omega_2 + 2.0 * omega_1 * (-1.0 + sigmabar)) -
                               m_B2 * (3.0 * m_v * omega_2 * sigmabar + 4.0 * q2 * sigmabar + m_v2 * (-4.0 + 15.0 * sigmabar))) +
                               m_B * (-((-(2.0 * omega_1) + omega_2) * q2 * sigmabar) +
                               m_v2 * (4.0 * omega_1 * (-1.0 + 3.0 * sigmabar) + omega_2 * (-2.0 + 9.0 * sigmabar)))))
                             / (m_B2 * omega_2 * power_of<5>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I3d1B_T23B_3pt_chi_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23B proportional to chi_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = (2.0 * m_B2 * m_v * sigmabar2 + 6.0 * m_B3 * sigmabar2 * sigma + 2.0 * m_B * q2 * sigma * (-3.0 + 4.0 * sigma) -
                               2.0 * m_v * (3.0 * m_v2 + q2 - 4.0 * q2 * sigma) - m_B * m_v2 * (-1.0 + 3.0 * sigma + sigmabar))
                             / (m_B * (-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I3d1C_T23B_3pt_chi_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to chi_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_4 = this->chi_bar_4(omega_1, omega_2);

            const double C_3 = (-(2.0 * m_B2 * m_v * sigmabar2) - 2.0 * m_B3 * sigmabar2 * sigma + 2.0 * m_B * q2 * sigma +
                               2.0 * m_v * (3.0 * m_v2 + q2 - 4.0 * q2 * sigma) + m_B * m_v2 * (1.0 - 3.0 * sigma - 5.0 * sigmabar))
                             / (m_B * omega_2 * power_of<4>(sigmabar));

            return C_3 * chi_bar_4;
        }

        double I3_T23B_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to chi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 6.0 * m_v * u * (-2.0 + 3.0 * sigmabar) / (m_B * power_of<4>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1A_T23B_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to chi_bar_bar_4
            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 6.0 * m_v * (-12.0 * sigma * sigma * m_B + sigma * m_B * (4.0 - 6.0 * sigmabar) - 4.0 * omega_1 + 12.0 * sigma * omega_1
                             + sigmabar * (m_B + 3.0 * omega_1))
                             / (m_B * omega_2 * power_of<5>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1B_T23B_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_v      = this->m_v();
            const double sigmabar = 1.0 - sigma;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 6.0 * (-1.0 + 3.0 * sigma) * m_v
                             / ((-omega_1 + m_B * sigma) * power_of<4>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1C_T23B_3pt_chiA_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to chi_bar_bar_4

            return 0.0;
        }

        double I4_T23B_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2  = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_v * u * (m_v2 * (-2.0 + 3.0 * sigmabar) -
                               2.0 * (-1 + sigmabar) * (m_B2 * sigmabar2 + q2 - 2.0 * q2 * sigmabar) +
                               m_B * m_v * (-1 + sigmabar) * sigmabar * (-1 + 2.0 * u))
                             / (m_B * power_of<5>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1A_T23B_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2  = power_of<2>(sigmabar), sigmabar3  = power_of<3>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(6.0 * m_v * (m_B * (-(4.0 * m_B2 * omega_2 * sigmabar3 * sigma) +
                               2.0 * m_B * sigmabar2 * sigma * (-(m_v * omega_2) + 3.0 * m_B * (m_v - omega_2) * sigma) -
                               5.0 * omega_2 * sigma * (2.0 * q2 * sigma * (-1 + 2.0 * sigma) + m_v2 * (1 - 3.0 * sigma)) +
                               (8.0 * m_B2 * m_v * sigma3 - omega_2 *
                               (4.0 * q2 * sigma * (-1 + 3.0 * sigma) + m_v * (m_v + 4.0 * m_B * sigma2 - 6.0 * m_v * sigma))) * sigmabar) +
                               omega_1 * (m_v2 * omega_2 * (5.0 - 15.0 * sigma - 3.0 * sigmabar) +
                               2.0 * omega_2 * (m_B2 * sigmabar3 + 10.0 * sigma2 * q2 + 3.0 * m_B2 * sigmabar2 * sigma - q2 * sigmabar +
                               q2 * sigma * (-5.0 + 4.0 * sigmabar)) +
                               m_B * m_v * sigmabar * (-(16.0 * m_B * sigma2) + omega_2 * sigmabar +
                               4.0 * sigma * (omega_2 - 2.0 * m_B * sigmabar))) +
                               2.0 * m_B * m_v * sigmabar * (4.0 * sigma + sigmabar) * power_of<2>(omega_1)))
                             / (m_B * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1B_T23B_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23B proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2  = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_v * (m_v2 * (-1 + 3.0 * sigma) + 2.0 * sigma * (-(m_B2 * sigmabar2) + q2 - 2.0 * q2 * sigma) +
                               m_B * m_v * sigma * sigmabar)
                             / (power_of<5>(sigmabar) * omega_2);

            return C_4 * chi_bar_bar_4;
        }

        double I4d1C_T23B_3pt_chiA_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to chi_bar_bar_4

            return 0.0;
        }
        double I4d2A_T23B_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(12.0 * m_v * (m_B2 * (6.0 * omega_1 * omega_2 - m_v * (4.0 * omega_1 + omega_2)) * sigmabar3 -
                               2.0 * m_B3 * omega_2 * sigmabar4 + 20.0 * sigma3 * (-(3.0 * m_B * omega_2 * q2) + m_B3 * m_v * sigmabar) +
                               omega_1 * omega_2 * (-(15.0 * m_v2 * (-1 + sigmabar)) + 2.0 * q2 * sigmabar * (-5.0 + 2.0 * sigmabar)) +
                               m_B * sigmabar * (4.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar + 2.0 * omega_2 * q2 * sigmabar +
                               m_v2 * omega_2 * (-5.0 + 3.0 * sigmabar)) +
                               sigma2 * (12.0 * m_B3 * (2.0 * m_v - omega_2) * sigmabar2 + 60 * omega_1 * omega_2 * q2 -
                               10.0 * m_B2 * m_v * (4.0 * omega_1 + omega_2) * sigmabar +
                               15.0 * m_B * omega_2 * (3.0 * m_v2 + 2.0 * q2 - 4.0 * q2 * sigmabar)) +
                               sigma * (4.0 * m_B2 * (3.0 * omega_1 * omega_2 - 2.0 * m_v * (4.0 * omega_1 + omega_2)) * sigmabar2 +
                               6.0 * m_B3 * (m_v - 2.0 * omega_2) * sigmabar3 -
                               5.0 * omega_1 * omega_2 * (9.0 * m_v2 + 6.0 * q2 - 8.0 * q2 * sigmabar) +
                               m_B * (10.0 * m_v * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar +
                               15.0 * m_v2 * omega_2 * (-1 + 2.0 * sigmabar) + 4.0 * omega_2 * q2 * sigmabar * (5.0 - 3.0 * sigmabar)))))
                             / (m_B * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2B_T23B_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23B proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double chi_bar_4     = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return  6.0 * m_v * pow(omega_1 - m_B * sigma,-2.0) * pow(sigmabar,-6.0) *
                    (-(2.0 * (omega_1 * (-(2.0 * m_B2 * sigmabar3) + 10.0 * q2 * sigma * (1 - 2.0 * sigma) +
                    5.0 * m_v2 * (-1 + 3.0 * sigma) + m_B * sigmabar2 * (m_v - 6.0 * m_B * sigma) +
                    (3.0 * m_v2 + 2.0 * q2 + 4.0 * m_B * m_v * sigma - 8.0 * q2 * sigma) * sigmabar) +
                    m_B * sigma * (2.0 * m_B2 * sigmabar3 + 20.0 * sigma2 * q2 + 6.0 * m_B2 * sigmabar2 * sigma -
                    2.0 * q2 * sigmabar - 2.0 * m_B * m_v * sigmabar * (2.0 * sigma + sigmabar) +
                    m_v2 * (5.0 - 15.0 * sigma - 3.0 * sigmabar) + 2.0 * q2 * sigma * (-5.0 + 4.0 * sigmabar))) * chi_bar_bar_4) -
                    m_B * (-omega_1 + m_B * sigma) * sigmabar * (m_v2 * (1 - 3.0 * sigma) +
                    2.0 * sigma * (m_B2 * sigmabar2 + q2 * (-1 + 2.0 * sigma)) - m_B * m_v * sigma * sigmabar) * chi_bar_4);
        }

        double I4d2C_T23B_3pt_chiA_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * m_B * m_v * (m_v2 * (1 - 3.0 * sigma) + 2.0 * sigma * (m_B2 * sigmabar2 + q2 * (-1 + 2.0 * sigma)) +
                               m_B * m_v * sigma * sigmabar) / (power_of<2>(omega_2) * power_of<5>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2D_T23B_3pt_chiA_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to T23B proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_4     = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return    6.0 * m_v * pow(m_B,-1) * pow(sigmabar,-6.0) *
                      ((m_B * m_v * sigmabar2 - 4.0 * sigma2 * q2 + 2.0 * (-(m_B2 * sigmabar2) + q2) * sigmabar +
                      m_v2 * (-1 + 3.0 * sigma + 3.0 * sigmabar) + 2.0 * sigma * (m_B2 * sigmabar2 + q2 - 4.0 * q2 * sigmabar)) * chi_bar_bar_4 + m_B * sigmabar *
                      (m_v2 * (-1 + 3.0 * sigma) + 2.0 * sigma * (-(m_B2 * sigmabar2) + q2 - 2.0 * q2 * sigma) +
                      m_B * m_v * sigma * sigmabar) * chi_bar_4);
        }

        double I2_T23B_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double sigmabar = 1.0 - sigma;
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_2 = - 6.0 * sigma * u * (-1.0 + 2.0 * u)
                             / (m_B2 * power_of<4>(sigmabar));

            return C_2 * chi_bar_bar_4;
        }

        double I3_T23B_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar3 = power_of<3>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -(2.0 * u * (m_B * m_v * sigmabar * (-3.0 + sigmabar) + 3.0 * m_v2 * (2.0 + sigmabar) * (-1 + 2.0 * u) -
                               2.0 * (m_B2 * sigmabar3 + q2 * (3.0 + 2.0 * sigmabar * (-3.0 + sigmabar))) * (-1 + 2.0 * u)))
                             / (m_B2 * power_of<5>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1A_T23B_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3   = power_of<3>(sigma), sigma4   = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = 2.0 * (4.0 * sigma4 * (15.0 * m_B2 * q2 + 4.0 * m_B4 * sigmabar) +
                               2.0 * m_B * sigma3 * (-(15.0 * (4.0 * omega_1 + omega_2) * q2) -
                               4.0 * m_B2 * (4.0 * omega_1 + omega_2) * sigmabar + 8.0 * m_B3 * sigmabar * (-2.0 + sigmabar) +
                               m_B * (-30 * m_v2 + 32 * q2 * sigmabar)) + 2.0 * sigma *
                               (4.0 * m_B4 * sigmabar2 + 4.0 * m_B3 * (4.0 * omega_1 + omega_2) * (-1 + sigmabar) * sigmabar -
                               5.0 * omega_1 * (2.0 * omega_1 + omega_2) * (3.0 * m_v2 - 2.0 * q2 * sigmabar) -
                               2.0 * m_B * sigmabar * (m_v * omega_1 * omega_2 - 12.0 * m_v2 * (4.0 * omega_1 + omega_2) +
                               (4.0 * omega_1 + omega_2) * q2 * (-2.0 + sigmabar)) +
                               m_B2 * sigmabar * (-(18.0 * m_v2 * sigmabar) - 4.0 * q2 * sigmabar +
                               2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-4.0 + sigmabar) + m_v * omega_2 * (4.0 + sigmabar))) -
                               sigmabar * (2.0 * m_B3 * (4.0 * omega_1 + omega_2) * sigmabar -
                               2.0 * m_B2 * (m_v * omega_2 * sigmabar - 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-2.0 + sigmabar)) +
                               2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (21 * m_v2 - q2 * (-4.0 + sigmabar)) +
                               m_B * (-(9.0 * m_v2 * (4.0 * omega_1 + omega_2) * sigmabar) -
                               2.0 * (4.0 * omega_1 + omega_2) * q2 * sigmabar + m_v * omega_1 * omega_2 * (8.0 + sigmabar))) -
                               2.0 * sigma2 * (-(15.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2) +
                               4.0 * m_B4 * sigmabar * (-2.0 + 3.0 * sigmabar) +
                               m_B3 * (4.0 * omega_1 + omega_2) * sigmabar * (-8.0 + 3.0 * sigmabar) -
                               m_B * (4.0 * omega_1 + omega_2) * (15.0 * m_v2 - 13.0 * q2 * sigmabar) -
                               2.0 * m_B2 * sigmabar * (-27 * m_v2 + m_v * omega_2 + 2.0 * omega_1 * (2.0 * omega_1 + omega_2) +
                               q2 * (-4.0 + 3.0 * sigmabar))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1B_T23B_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23B proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_3 = -(2.0 * (6.0 * sigma * (-m_v2 + q2 * sigma) +
                               sigmabar * (-(9.0 * m_v2) + 2.0 * m_B2 * sigmabar2 + m_B * m_v * (2.0 + sigma) - 2.0 * q2 * sigmabar)))
                             / (m_B * (-omega_1 + m_B * sigma) * power_of<5>(sigmabar));

            return C_3 * chi_bar_bar_4;
        }

        double I3d1C_T23B_3pt_chiB_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to chi_bar_bar_4

            return 0.0;
        }

        double I4_T23B_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double u        = (sigma * m_B() - omega_1) / omega_2;

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = -(6.0 * u * (-(m_B * m_v3 * sigmabar) + m_B * m_v * (m_B2 * sigmabar2 - q2) * (-1 + sigmabar) * sigmabar +
                                m_v4 * (1 + 2.0 * sigmabar) * (-1 + 2.0 * u) +
                                (m_B2 * sigmabar2 - q2) * (-1 + sigmabar) * (m_B2 * sigmabar2 + q2 - 2.0 * q2 * sigmabar) * (-1 + 2.0 * u) +
                                m_v2 * (q2 * (-2.0 + 2.0 * sigmabar2 + sigmabar) + m_B2 * sigmabar2 * (1 - 2.0 * sigmabar)) * (-1 + 2.0 * u)))
                             / (m_B2 * power_of<6>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1A_T23B_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B), m_B6 = power_of<6>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * (4.0 * m_B2 * sigma5 * (-(3.0 * q2) + m_B2 * sigmabar) * (q2 + 2.0 * m_B2 * sigmabar) -
                               sigma3 * (4.0 * m_B5 * (4.0 * omega_1 + omega_2) * sigmabar2 * (-2.0 + sigmabar) +
                               8.0 * m_B6 * sigmabar2 * (-1 + 2.0 * sigmabar) +
                               3.0 * m_B * (4.0 * omega_1 + omega_2) * q2 * (4.0 * m_v2 - 3.0 * q2 * sigmabar) +
                               m_B3 * (4.0 * omega_1 + omega_2) * sigmabar * (10.0 * m_v2 + q2 * (15.0 - 8.0 * sigmabar)) -
                               2.0 * m_B4 * sigmabar * (-(5.0 * q2) - 2.0 * m_v * omega_2 * sigmabar +
                               2.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar + 8.0 * q2 * sigmabar +
                               m_v2 * (-15.0 + 8.0 * sigmabar)) +
                               2.0 * m_B2 * (6.0 * m_v4 - 28 * m_v2 * q2 * sigmabar +
                               q2 * sigmabar * (5.0 * omega_1 * (2.0 * omega_1 + omega_2) + q2 * (-5.0 + 4.0 * sigmabar))) +
                               6.0 * omega_1 * (2.0 * omega_1 + omega_2) * power_of<2>(q2)) +
                               2.0 * m_B * sigma4 * (-(2.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar2) +
                               5.0 * m_B2 * (4.0 * omega_1 + omega_2) * q2 * sigmabar + m_B5 * sigmabar2 * (-8.0 + 5.0 * sigmabar) +
                               5.0 * m_B3 * sigmabar * (2.0 * m_v2 + 3.0 * q2 - 2.0 * q2 * sigmabar) +
                               2.0 * m_B * q2 * (6.0 * m_v2 - 5.0 * q2 * sigmabar) + 3.0 * (4.0 * omega_1 + omega_2) * power_of<2>(q2)) +
                               sigmabar * (m_B4 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar2 -
                               m_B3 * m_v * sigmabar * (m_v * (4.0 * omega_1 + omega_2) + omega_1 * omega_2 * sigmabar) +
                               m_B * m_v * (-(5.0 * m_v2 * omega_1 * omega_2) + 3.0 * m_v3 * (4.0 * omega_1 + omega_2) * sigmabar +
                               omega_1 * omega_2 * q2 * sigmabar + m_v * (4.0 * omega_1 + omega_2) * q2 * sigmabar) +
                               m_B2 * (m_v3 * omega_2 * sigmabar - omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar * (1 + sigmabar) -
                               m_v2 * omega_1 * (2.0 * omega_1 + omega_2) * (-5.0 + 3.0 * sigmabar)) -
                               omega_1 * (2.0 * omega_1 + omega_2) *
                               (16.0 * m_v4 + m_v2 * q2 * (5.0 - 4.0 * sigmabar) - sigmabar * power_of<2>(q2))) +
                               sigma * (-(2.0 * m_B5 * (4.0 * omega_1 + omega_2) * sigmabar3) +
                               2.0 * m_B4 * sigmabar2 * (2.0 * m_v2 - 2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-1 + sigmabar) +
                               m_v * omega_2 * sigmabar) + m_B3 * sigmabar *
                               (2.0 * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (1 + sigmabar) +
                               2.0 * m_v * omega_1 * omega_2 * sigmabar * (-2.0 + sigmabar) +
                               m_v2 * (4.0 * omega_1 + omega_2) * (-5.0 + 6.0 * sigmabar)) +
                               m_B2 * sigmabar * (5.0 * m_v3 * omega_2 - 12.0 * m_v4 * sigmabar - 2.0 * m_v * omega_2 * q2 * sigmabar +
                               omega_1 * (2.0 * omega_1 + omega_2) * q2 * (-5.0 + 2.0 * sigmabar) +
                               m_v2 * (-(4.0 * q2 * sigmabar) + omega_1 * (2.0 * omega_1 + omega_2) * (-15.0 + 4.0 * sigmabar))) +
                               m_B * sigmabar * (17.0 * m_v4 * (4.0 * omega_1 + omega_2) + 5.0 * m_v * omega_1 * omega_2 * q2 -
                               m_v2 * (4.0 * omega_1 + omega_2) * q2 * (-5.0 + 8.0 * sigmabar) -
                               2.0 * (4.0 * omega_1 + omega_2) * sigmabar * power_of<2>(q2)) -
                               omega_1 * (2.0 * omega_1 + omega_2) *
                               (6.0 * m_v4 - 24 * m_v2 * q2 * sigmabar + sigmabar * (-5.0 + 2.0 * sigmabar) * power_of<2>(q2))) +
                               sigma2 * (6.0 * m_B6 * sigmabar3 + 2.0 * m_B5 * (4.0 * omega_1 + omega_2) * sigmabar2 *
                               (-2.0 + 3.0 * sigmabar) + 4.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 *
                               (3.0 * m_v2 - 2.0 * q2 * sigmabar) + m_B3 * sigmabar *
                               (-(5.0 * (4.0 * omega_1 + omega_2) * q2 * (-1 + sigmabar)) + 4.0 * m_v * omega_1 * omega_2 * sigmabar -
                               3.0 * m_v2 * (4.0 * omega_1 + omega_2) * (-5.0 + 2.0 * sigmabar)) -
                               m_B4 * sigmabar * (6.0 * q2 * sigmabar * (1 + sigmabar) + m_v * omega_2 * sigmabar * (-4.0 + 3.0 * sigmabar) -
                               omega_1 * (2.0 * omega_1 + omega_2) * sigmabar * (-8.0 + 3.0 * sigmabar) +
                               2.0 * m_v2 * (-5.0 + 9.0 * sigmabar)) +
                               m_B2 * sigmabar * (-36 * m_v4 - 5.0 * m_v * omega_2 * q2 +
                               2.0 * m_v2 * (5.0 * omega_1 * (2.0 * omega_1 + omega_2) + q2 * (-5.0 + 12.0 * sigmabar)) +
                               3.0 * q2 * (2.0 * q2 * sigmabar - omega_1 * (2.0 * omega_1 + omega_2) * (-5.0 + 2.0 * sigmabar))) +
                               m_B * (4.0 * omega_1 + omega_2) * (6.0 * m_v4 - 26 * m_v2 * q2 * sigmabar +
                               sigmabar * (-5.0 + 3.0 * sigmabar) * power_of<2>(q2))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<7>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d1B_T23B_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23B proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * (-((m_v2 - q2 * sigma) * sigmabar * (m_B * m_v - 3.0 * m_v2 - q2 * sigmabar - m_B2 * (-1 + 2.0 * sigma) * sigmabar)) +
                               m_B2 * sigmabar2 * sigma * (q2 - m_B * (m_B + m_v - m_B * sigma) * sigmabar) + sigma * power_of<2>(m_v2 - q2 * sigma))
                             / (m_B * power_of<6>(sigmabar) * omega_2);

            return C_4 * chi_bar_bar_4;
        }

        double I4d1C_T23B_3pt_chiB_bar_bar_4(const double & /*sigma*/, const double & /*omega_2*/, const double & /*q2*/) const
        {
            // three-particle contribution to T23B proportional to chi_bar_bar_4

            return 0.0;
        }
        double I4d2A_T23B_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to chi_bar_bar_4
            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B), m_B6 = power_of<6>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma), sigma5 = power_of<5>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar), sigmabar4 = power_of<4>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 12.0 * (sigma5 * (20.0 * m_B6 * sigmabar2 - 60 * m_B4 * q2 * sigmabar - 42 * m_B2 * power_of<2>(q2)) +
                               sigma3 * (-(4.0 * m_B5 * (4.0 * omega_1 + omega_2) * sigmabar2 * (-5.0 + 4.0 * sigmabar)) +
                               3.0 * m_B * (4.0 * omega_1 + omega_2) * q2 * (-(14.0 * m_v2) + 13.0 * q2 * sigmabar) +
                               4.0 * m_B6 * sigmabar2 * (5.0 + sigmabar * (-16.0 + 5.0 * sigmabar)) +
                               10.0 * m_B4 * sigmabar * (-(3.0 * q2) - m_v * omega_2 * sigmabar +
                               omega_1 * (2.0 * omega_1 + omega_2) * sigmabar + 2.0 * q2 * sigmabar * (5.0 - 2.0 * sigmabar) +
                               m_v2 * (-9.0 + 8.0 * sigmabar)) + 5.0 * m_B3 * (4.0 * omega_1 + omega_2) * sigmabar *
                               (-(6.0 * m_v2) + q2 * (-9.0 + 8.0 * sigmabar)) -
                               6.0 * m_B2 * (7.0 * m_v4 - 36 * m_v2 * q2 * sigmabar +
                               5.0 * q2 * sigmabar * (omega_1 * (2.0 * omega_1 + omega_2) + q2 * (-1 + 2.0 * sigmabar))) -
                               21 * omega_1 * (2.0 * omega_1 + omega_2) * power_of<2>(q2)) +
                               m_B * sigma4 * (-(10.0 * m_B4 * (4.0 * omega_1 + omega_2) * sigmabar2) +
                               40 * m_B5 * sigmabar2 * (-1 + sigmabar) + 30 * m_B2 * (4.0 * omega_1 + omega_2) * q2 * sigmabar +
                               6.0 * m_B * q2 * (14.0 * m_v2 - 15.0 * q2 * sigmabar) +
                               10.0 * m_B3 * sigmabar * (6.0 * m_v2 + q2 * (9.0 - 10.0 * sigmabar)) +
                               21 * (4.0 * omega_1 + omega_2) * power_of<2>(q2)) -
                               sigmabar * (m_B5 * (4.0 * omega_1 + omega_2) * sigmabar3 -
                               m_B4 * sigmabar2 * (2.0 * m_v2 + m_v * omega_2 * sigmabar -
                               2.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-2.0 + sigmabar)) -
                               m_B3 * sigmabar * ((4.0 * omega_1 + omega_2) * q2 * sigmabar * (1 + sigmabar) +
                               m_v * omega_1 * omega_2 * sigmabar * (-4.0 + sigmabar) +
                               m_v2 * (4.0 * omega_1 + omega_2) * (-5.0 + 3.0 * sigmabar)) +
                               m_B2 * (6.0 * m_v4 * sigmabar2 + m_v * omega_2 * sigmabar2 * q2 - 5.0 * m_v3 * omega_2 * sigmabar +
                               omega_1 * (2.0 * omega_1 + omega_2) * q2 * sigmabar * (5.0 + sigmabar) +
                               m_v2 * (2.0 * sigmabar2 * q2 - omega_1 * (2.0 * omega_1 + omega_2) *
                               (15.0 + sigmabar * (-15.0 + 2.0 * sigmabar)))) +
                               m_B * (15.0 * m_v3 * omega_1 * omega_2 - 16.0 * m_v4 * (4.0 * omega_1 + omega_2) * sigmabar -
                               5.0 * m_v * omega_1 * omega_2 * q2 * sigmabar +
                               m_v2 * (4.0 * omega_1 + omega_2) * q2 * sigmabar * (-5.0 + 4.0 * sigmabar) +
                               (4.0 * omega_1 + omega_2) * sigmabar2 * power_of<2>(q2)) +
                               omega_1 * (2.0 * omega_1 + omega_2) *
                               (51 * m_v4 + m_v2 * q2 * (15.0 - 22 * sigmabar) + sigmabar * (-5.0 + sigmabar) * power_of<2>(q2))) +
                               sigma * (6.0 * m_B6 * sigmabar4 + 2.0 * m_B5 * (4.0 * omega_1 + omega_2) * sigmabar3 *
                               (-4.0 + 3.0 * sigmabar) - m_B3 * sigmabar *
                               ((4.0 * omega_1 + omega_2) * q2 * sigmabar * (-10.0 + sigmabar) +
                               2.0 * m_v * omega_1 * omega_2 * sigmabar * (5.0 - 4.0 * sigmabar) +
                               3.0 * m_v2 * (4.0 * omega_1 + omega_2) * (5.0 + 2.0 * sigmabar * (-5.0 + sigmabar))) +
                               m_B4 * sigmabar2 * (-(6.0 * q2 * sigmabar * (1 + sigmabar)) + m_v2 * (20.0 - 18.0 * sigmabar) +
                               m_v * omega_2 * sigmabar * (8.0 - 3.0 * sigmabar) +
                               omega_1 * (2.0 * omega_1 + omega_2) * (10.0 + sigmabar * (-16.0 + 3.0 * sigmabar))) +
                               m_B2 * sigmabar * (15.0 * m_v3 * omega_2 - 66 * m_v4 * sigmabar - 10.0 * m_v * omega_2 * q2 * sigmabar +
                               q2 * (6.0 * sigmabar2 * q2 - omega_1 * (2.0 * omega_1 + omega_2) *
                               (15.0 + 6.0 * sigmabar2 - 20.0 * sigmabar)) +
                               m_v2 * (5.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-9.0 + 4.0 * sigmabar) +
                               4.0 * q2 * sigmabar * (-5.0 + 6.0 * sigmabar))) -
                               omega_1 * (2.0 * omega_1 + omega_2) *
                               (21 * m_v4 - 84 * m_v2 * q2 * sigmabar + sigmabar * (-15.0 + 13.0 * sigmabar) * power_of<2>(q2)) +
                               m_B * sigmabar * (57 * m_v4 * (4.0 * omega_1 + omega_2) + 15.0 * m_v * omega_1 * omega_2 * q2 -
                               m_v2 * (4.0 * omega_1 + omega_2) * q2 * (-15.0 + 46 * sigmabar) +
                               (4.0 * omega_1 + omega_2) * sigmabar * (-10.0 + 3.0 * sigmabar) * power_of<2>(q2))) +
                               sigma2 * (-24 * m_B6 * sigmabar3 * (-1 + sigmabar) +
                               3.0 * omega_1 * (2.0 * omega_1 + omega_2) * q2 * (14.0 * m_v2 - 11.0 * q2 * sigmabar) -
                               2.0 * m_B5 * (4.0 * omega_1 + omega_2) * sigmabar2 * (5.0 + 3.0 * sigmabar * (-4.0 + sigmabar)) +
                               m_B3 * sigmabar * (10.0 * m_v * omega_1 * omega_2 * sigmabar -
                               15.0 * m_v2 * (4.0 * omega_1 + omega_2) * (-3.0 + 2.0 * sigmabar) +
                               (4.0 * omega_1 + omega_2) * q2 * (15.0 + sigmabar * (-35 + 12.0 * sigmabar))) -
                               3.0 * m_B2 * sigmabar * (42 * m_v4 + 5.0 * m_v * omega_2 * q2 -
                               2.0 * m_v2 * (5.0 * omega_1 * (2.0 * omega_1 + omega_2) + q2 * (-5.0 + 24 * sigmabar)) +
                               q2 * (5.0 * omega_1 * (2.0 * omega_1 + omega_2) * (-3.0 + 2.0 * sigmabar) +
                               2.0 * q2 * sigmabar * (-5.0 + 2.0 * sigmabar))) +
                               2.0 * m_B4 * sigmabar * (3.0 * q2 * sigmabar * (-5.0 + 2.0 * sigmabar) +
                               2.0 * omega_1 * (2.0 * omega_1 + omega_2) * sigmabar * (-5.0 + 3.0 * sigmabar) +
                               m_v * omega_2 * sigmabar * (5.0 - 6.0 * sigmabar) +
                               3.0 * m_v2 * (5.0 + sigmabar * (-15.0 + 4.0 * sigmabar))) +
                               3.0 * m_B * (4.0 * omega_1 + omega_2) *
                               (7.0 * m_v4 - 32 * m_v2 * q2 * sigmabar + sigmabar * (-5.0 + 7.0 * sigmabar) * power_of<2>(q2))))
                             / (m_B2 * power_of<2>(omega_2) * power_of<8>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2B_T23B_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            // three-particle contribution to T23B proportional to chi_bar_bar_4
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B), m_B3 = power_of<3>(m_B), m_B4 = power_of<4>(m_B), m_B5 = power_of<5>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v), m_v3 = power_of<3>(m_v), m_v4 = power_of<4>(m_v);
            const double sigma2   = power_of<2>(sigma), sigma3 = power_of<3>(sigma), sigma4 = power_of<4>(sigma);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double chi_bar_4     = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return  (-(12.0 * chi_bar_bar_4 *
                    (2.0 * m_B * sigma4 * (-(3.0 * q2) + m_B2 * sigmabar) * (q2 + 2.0 * m_B2 * sigmabar) +
                    sigma3 * (-(4.0 * m_B4 * (m_v + omega_1) * sigmabar2) + 10.0 * m_B2 * omega_1 * q2 * sigmabar +
                    4.0 * m_B5 * sigmabar2 * (-2.0 + sigmabar) + 3.0 * m_B * q2 * (4.0 * m_v2 - 3.0 * q2 * sigmabar) +
                    m_B3 * sigmabar * (10.0 * m_v2 + q2 * (15.0 - 8.0 * sigmabar)) + 6.0 * omega_1 * power_of<2>(q2)) +
                    sigmabar * (-(m_B4 * omega_1 * sigmabar2) + m_B3 * m_v * sigmabar * (m_v - omega_1 * sigmabar) -
                    m_B * m_v * (5.0 * m_v2 * omega_1 + 3.0 * m_v3 * sigmabar + m_v * q2 * sigmabar - omega_1 * q2 * sigmabar) +
                    m_B2 * omega_1 * (q2 * sigmabar * (1 + sigmabar) + m_v2 * (-5.0 + 3.0 * sigmabar)) +
                    omega_1 * (16.0 * m_v4 + m_v2 * q2 * (5.0 - 4.0 * sigmabar) - sigmabar * power_of<2>(q2))) +
                    sigma * (2.0 * m_B5 * sigmabar3 + m_B4 * sigmabar2 * (4.0 * omega_1 * (-1 + sigmabar) + m_v * sigmabar) +
                    m_B2 * sigmabar * (5.0 * m_v3 - m_v * q2 * sigmabar + omega_1 * q2 * (5.0 - 2.0 * sigmabar) +
                    m_v2 * omega_1 * (15.0 - 4.0 * sigmabar)) +
                    m_B3 * sigmabar * (-(2.0 * q2 * sigmabar * (1 + sigmabar)) +
                    2.0 * m_v * omega_1 * sigmabar * (-2.0 + sigmabar) + m_v2 * (5.0 - 6.0 * sigmabar)) +
                    m_B * sigmabar * (-(17.0 * m_v4) + 5.0 * m_v * omega_1 * q2 + m_v2 * q2 * (-5.0 + 8.0 * sigmabar) +
                    2.0 * sigmabar * power_of<2>(q2)) +
                    omega_1 * (6.0 * m_v4 - 24 * m_v2 * q2 * sigmabar + sigmabar * (-5.0 + 2.0 * sigmabar) * power_of<2>(q2))) +
                    sigma2 * (2.0 * m_B5 * sigmabar2 * (2.0 - 3.0 * sigmabar) +
                    4.0 * omega_1 * q2 * (-(3.0 * m_v2) + 2.0 * q2 * sigmabar) +
                    m_B3 * sigmabar * (5.0 * q2 * (-1 + sigmabar) + 4.0 * m_v * omega_1 * sigmabar +
                    3.0 * m_v2 * (-5.0 + 2.0 * sigmabar)) +
                    m_B2 * sigmabar * (-(10.0 * m_v2 * omega_1) - 5.0 * m_v * q2 +
                    3.0 * omega_1 * q2 * (-5.0 + 2.0 * sigmabar)) +
                    m_B4 * sigmabar2 * (-(2.0 * m_v * (-2.0 + sigmabar)) + omega_1 * (8.0 - 3.0 * sigmabar)) +
                    m_B * (-(6.0 * m_v4) + 26 * m_v2 * q2 * sigmabar + sigmabar * (5.0 - 3.0 * sigmabar) * power_of<2>(q2))))) +
                    6.0 * m_B * (-omega_1 + m_B * sigma) * sigmabar *
                    (-((m_v2 - q2 * sigma) * sigmabar * (m_B * m_v - 3.0 * m_v2 - q2 * sigmabar -
                    m_B2 * (-1.0 + 2.0 * sigma) * sigmabar)) +
                    m_B2 * sigmabar2 * sigma * (q2 - m_B * (m_B + m_v - m_B * sigma) * sigmabar) +
                    sigma * power_of<2>(m_v2 - q2 * sigma)) * chi_bar_4)
                    / (m_B * power_of<2>(omega_2) * power_of<7>(sigmabar));

        }

        double I4d2C_T23B_3pt_chiB_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            // three-particle contribution to T23B proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);

            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            const double C_4 = 6.0 * ((m_v2 - q2 * sigma) * (m_B * m_v + 3.0 * m_v2 + q2 - q2 * sigma + m_B2 * (-1.0 + sigma * (3.0 - 2.0 * sigma))) *
                               sigmabar + m_B2 * sigmabar2 * sigma * (q2 + m_B * sigmabar * (m_v - m_B * sigmabar)) +
                               sigma * power_of<2>(m_v2 - q2 * sigma))
                             / (power_of<2>(omega_2) * power_of<6>(sigmabar));

            return C_4 * chi_bar_bar_4;
        }

        double I4d2D_T23B_3pt_chiB_bar_bar_4(const double & sigma, const double & q2) const
        {
            // three-particle contribution to T23B proportional to chi_bar_bar_4
            const double omega_1  = m_B * sigma;
            const double omega_2  = m_B * sigma - omega_1;

            const double m_B2     = power_of<2>(m_B);
            const double m_v      = this->m_v(), m_v2 = power_of<2>(m_v);
            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar), sigmabar3 = power_of<3>(sigmabar);

            const double chi_bar_4     = this->chi_bar_4(omega_1, omega_2);
            const double chi_bar_bar_4 = this->chi_bar_bar_4(omega_1, omega_2);

            return    6.0 * pow(m_B,-2.0) * pow(sigmabar,-7.0) *
                      (chi_bar_bar_4 * ((-m_v2 + q2 * sigma) * sigmabar *
                      (m_B * m_v - 4.0 * m_v2 - q2 + 4.0 * q2 * sigma - m_B2 * (-1.0 + 2.0 * sigma) * sigmabar) +
                      sigmabar2 * (m_B * m_v * q2 + q2 * (-(4.0 * m_v2) - q2 + 2.0 * q2 * sigma) +
                      m_B2 * (q2 + m_v2 * (3.0 - 4.0 * sigma) - 6.0 * q2 * sigma * sigmabar)) +
                      m_B2 * sigmabar3 * (q2 - m_B * (m_v - 2.0 * m_v * sigma - m_B * (-1.0 + 3.0 * sigma) * sigmabar)) +
                      2.0 * sigma * power_of<2>(m_v2 - q2 * sigma)) +
                      m_B * sigmabar * (-((m_v2 - q2 * sigma) * sigmabar *
                      (m_B * m_v - 3.0 * m_v2 - q2 * sigmabar - m_B2 * (-1.0 + 2.0 * sigma) * sigmabar)) +
                      m_B2 * sigmabar2 * sigma * (q2 - m_B * (m_B + m_v - m_B * sigma) * sigmabar) +
                      sigma * power_of<2>(m_v2 - q2 * sigma)) * chi_bar_4);
        }

        double I2_T23B_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + 0.0                                                       - I2_T23B_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3_T23B_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I3_T23B_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2)    - I3_T23B_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1A_T23B_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I3d1A_T23B_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I3d1A_T23B_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I3d1B_T23B_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return + I3d1B_T23B_3pt_chiA_bar_bar_4( sigma, omega_1, q2)          - I3d1B_T23B_3pt_chiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I3d1C_T23B_3pt_chi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return + I3d1C_T23B_3pt_chiA_bar_bar_4( sigma, omega_2, q2)          - I3d1C_T23B_3pt_chiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4_T23B_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I4_T23B_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2)    - I4_T23B_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1A_T23B_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I4d1A_T23B_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d1A_T23B_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d1B_T23B_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return + I4d1B_T23B_3pt_chiA_bar_bar_4( sigma, omega_1, q2)          - I4d1B_T23B_3pt_chiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d1C_T23B_3pt_chi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return + I4d1C_T23B_3pt_chiA_bar_bar_4( sigma, omega_2, q2)          - I4d1C_T23B_3pt_chiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2A_T23B_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & omega_2, const double & q2) const
        {
            return + I4d2A_T23B_3pt_chiA_bar_bar_4( sigma, omega_1, omega_2, q2) - I4d2A_T23B_3pt_chiB_bar_bar_4(sigma, omega_1, omega_2, q2);
        }

        double I4d2B_T23B_3pt_chi_bar_bar_4(const double & sigma, const double & omega_1, const double & q2) const
        {
            return + I4d2B_T23B_3pt_chiA_bar_bar_4( sigma, omega_1, q2)          - I4d2B_T23B_3pt_chiB_bar_bar_4(sigma, omega_1, q2);
        }

        double I4d2C_T23B_3pt_chi_bar_bar_4(const double & sigma, const double & omega_2, const double & q2) const
        {
            return + I4d2C_T23B_3pt_chiA_bar_bar_4( sigma, omega_2, q2)          - I4d2C_T23B_3pt_chiB_bar_bar_4(sigma, omega_2, q2);
        }

        double I4d2D_T23B_3pt_chi_bar_bar_4(const double & sigma, const double & q2) const
        {
            return + I4d2D_T23B_3pt_chiA_bar_bar_4( sigma, q2)                   - I4d2D_T23B_3pt_chiB_bar_bar_4(sigma, q2);
        }
        // }}}

        /* T23B : integrands and surface terms */
        // {{{
        double integrand_T23B_2pt_borel(const double & sigma, const double & q2) const
        {
            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double I1   = I1_T23B_2pt_phi_p(sigma, q2)     + I1_T23B_2pt_phi_bar(sigma, q2);
            const double I2   = I2_T23B_2pt_phi_bar(sigma, q2)   + I2_T23B_2pt_g_p(sigma, q2)      + I2_T23B_2pt_g_bar(sigma, q2);
            const double I3   = I3_T23B_2pt_g_p(sigma, q2)       + I3_T23B_2pt_g_bar(sigma, q2);
            const double I4   = I4_T23B_2pt_g_bar(sigma, q2);

            double result = 0.0;
            result += - I1;
            result +=   I2 / M2;
            result += - I3 / (2.0 * M4);
            result +=   I4 / (6.0 * M6);
            result *= exp;

            return result;
        }

        double surface_T23B_2pt(const double & sigma, const double & q2) const
        {
            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_T23B_2pt_phi_bar(sigma, q2)   + I2_T23B_2pt_g_p(sigma, q2)      + I2_T23B_2pt_g_bar(sigma, q2);
            const double I3   = I3_T23B_2pt_g_p(sigma, q2)       + I3_T23B_2pt_g_bar(sigma, q2);
            const double I3d1 = I3d1_T23B_2pt_g_p(sigma, q2)     + I3d1_T23B_2pt_g_bar(sigma, q2);
            const double I4   = I4_T23B_2pt_g_bar(sigma, q2);
            const double I4d1 = I4d1_T23B_2pt_g_bar(sigma, q2);
            const double I4d2 = I4d2_T23B_2pt_g_bar(sigma, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result += 0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / (power_of<2>( M2())));
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;

            return result;
        }

        /*
         * rewrite integration ranges such that:
         * 1.)
         *    0 <= x_1 <= 1,     and    0 <= x_2 <= 1,
         * 2.)
         *    x_1 and x_2 integration boundaries do not depend on the other variables
         *
         * We obtain the integrand
         *
         *    sigma m_B f(sigma m_B x_1, sigma m_B (xbar_1 xbar_2 + x_2) / xbar_2) / (xbar_1 xbar_2^2 + x_2 xbar_2),
         *
         * where
         *
         *    xbar_1 = 1.0 - x_1,    and    xbar_2 = 1.0 - x_2.
         */
        double integrand_T23B_3pt(const std::array<double, 3> & args, const double & q2) const
        {
            const double sigma  = args[0];
            const double x_1    = args[1];
            const double x_2    = args[2];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double I1 = I1_T23B_3pt_phi_3(sigma, omega_1, omega_2, q2);
            const double I2 = I2_T23B_3pt_phi_3(sigma, omega_1, omega_2, q2)         + I2_T23B_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                            + I2_T23B_3pt_phi_4(sigma, omega_1, omega_2, q2)         + I2_T23B_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_T23B_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_T23B_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I2_T23B_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_T23B_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I2_T23B_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3 = I3_T23B_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)     + I3_T23B_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)
                            + I3_T23B_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3_T23B_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I3_T23B_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3_T23B_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                            + I3_T23B_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3_T23B_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4 = I4_T23B_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4_T23B_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I4_T23B_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4_T23B_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result = 0.0;
            result += - I1;
            result +=   I2 / M2;
            result += - I3 / (2.0 * M4);
            result +=   I4 / (6.0 * M6);
            result *=   prefactor * exp;

            return result;
        }

        double surface_T23B_3pt_A(const std::array<double, 2> & args, const double & sigma, const double & q2) const
        {
            const double x_1    = args[0];
            const double x_2    = args[1];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_T23B_3pt_phi_3(sigma, omega_1, omega_2, q2)            + I2_T23B_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                              + I2_T23B_3pt_phi_4(sigma, omega_1, omega_2, q2)            + I2_T23B_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_T23B_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_T23B_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I2_T23B_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_T23B_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I2_T23B_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3   = I3_T23B_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)        + I3_T23B_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)
                              + I3_T23B_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)        + I3_T23B_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_T23B_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I3_T23B_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_T23B_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I3_T23B_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3d1 = I3d1A_T23B_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)     + I3d1A_T23B_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)
                              + I3d1A_T23B_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_T23B_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_T23B_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_T23B_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_T23B_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3d1A_T23B_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4   = I4_T23B_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)    + I4_T23B_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4_T23B_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I4_T23B_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d1 = I4d1A_T23B_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d1A_T23B_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d1A_T23B_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d1A_T23B_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d2 = I4d2A_T23B_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d2A_T23B_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d2A_T23B_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d2A_T23B_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        double surface_T23B_3pt_B(const double & x_1, const double & sigma, const double & q2) const
        {
            // this ONLY includes the Jacobian from the transformation (omega_1 -> x_1).
            const double prefactor = sigma * m_B();

            const double omega_1 = sigma * m_B() * x_1;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1B_T23B_3pt_phi_bar_3(sigma, omega_1, q2)     + I3d1B_T23B_3pt_phi_bar_bar_3(sigma, omega_1, q2)
                                  + I3d1B_T23B_3pt_phi_bar_4(sigma, omega_1, q2)     + I3d1B_T23B_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I3d1B_T23B_3pt_psi_bar_4(sigma, omega_1, q2)     + I3d1B_T23B_3pt_chi_bar_4(sigma, omega_1, q2)
                                  + I3d1B_T23B_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I3d1B_T23B_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1B_T23B_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d1B_T23B_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d1B_T23B_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d1B_T23B_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            const     double I4d2 = I4d2B_T23B_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d2B_T23B_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d2B_T23B_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d2B_T23B_3pt_chi_bar_bar_4(sigma, omega_1, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        double surface_T23B_3pt_C(const double & x_2, const double & sigma, const double & q2) const
        {
            const double xbar_2 = 1.0 - x_2;

            // this ONLY includes the Jacobian from the transformation (omega_2 -> x_2).
            const double prefactor = sigma * m_B() / (xbar_2 * xbar_2);

            const double omega_2 = sigma * m_B() * (x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1C_T23B_3pt_phi_bar_3(sigma, omega_2, q2)     + I3d1C_T23B_3pt_phi_bar_bar_3(sigma, omega_2, q2)
                                  + I3d1C_T23B_3pt_phi_bar_4(sigma, omega_2, q2)     + I3d1C_T23B_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I3d1C_T23B_3pt_psi_bar_4(sigma, omega_2, q2)     + I3d1C_T23B_3pt_chi_bar_4(sigma, omega_2, q2)
                                  + I3d1C_T23B_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I3d1C_T23B_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1C_T23B_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d1C_T23B_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d1C_T23B_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d1C_T23B_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            const     double I4d2 = I4d2C_T23B_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d2C_T23B_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d2C_T23B_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d2C_T23B_3pt_chi_bar_bar_4(sigma, omega_2, q2);

            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        double surface_T23B_3pt_D(const double & sigma, const double & q2) const
        {
            // this does NOT includes the original factor of 1 / omega_2
            const double prefactor = 1.0;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);


            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            constexpr double I3d1 = 0.0;
            constexpr double I4   = 0.0;
            constexpr double I4d1 = 0.0;
            const     double I4d2 = I4d2D_T23B_3pt_phi_bar_bar_3(sigma, q2) + I4d2D_T23B_3pt_phi_bar_bar_4(sigma, q2)
                                  + I4d2D_T23B_3pt_psi_bar_bar_4(sigma, q2) + I4d2D_T23B_3pt_chi_bar_bar_4(sigma, q2);


            double result = 0.0;
            result += -1.0 * eta * I2 / m_B2;
            result +=  0.5 * eta / m_B2 * (I3 / M2() + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result += -1.0 / 6.0 * eta / m_B2 * (I4 / M4);
            result += -1.0 / 6.0 * eta / (m_B4 * M2() ) * (eta * I4d1 + I4 * etad1);
            result += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result *= exp;
            result *= prefactor;

            return result;
        }

        /*
         * Integrands for the first moments. Only the borel method is implemented
         */

        double integrand_T23B_2pt_borel_m1(const double & sigma, const double & q2) const
        {
            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double I1   = I1_T23B_2pt_phi_p(sigma, q2)     + I1_T23B_2pt_phi_bar(sigma, q2);
            const double I2   = I2_T23B_2pt_phi_bar(sigma, q2)   + I2_T23B_2pt_g_p(sigma, q2)      + I2_T23B_2pt_g_bar(sigma, q2);
            const double I3   = I3_T23B_2pt_g_p(sigma, q2)       + I3_T23B_2pt_g_bar(sigma, q2);
            const double I4   = I4_T23B_2pt_g_bar(sigma, q2);

            double result1 = 0.0;
            result1 += - I1;
            result1 +=   I2 / M2;
            result1 += - I3 / (2.0 * M4);
            result1 +=   I4 / (6.0 * M6);
            result1 *=   exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - I2;
            result2 +=   I3 / M2;
            result2 += - I4 / (2.0 * M4);
            result2 *=   exp;

            return result1 + result2;
        }

        double surface_T23B_2pt_m1(const double & sigma, const double & q2) const
        {
            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double m_V2 = power_of<2>(m_V());
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_T23B_2pt_phi_bar(sigma, q2)   + I2_T23B_2pt_g_p(sigma, q2)      + I2_T23B_2pt_g_bar(sigma, q2);
            const double I3   = I3_T23B_2pt_g_p(sigma, q2)       + I3_T23B_2pt_g_bar(sigma, q2);
            const double I3d1 = I3d1_T23B_2pt_g_p(sigma, q2)     + I3d1_T23B_2pt_g_bar(sigma, q2);
            const double I4   = I4_T23B_2pt_g_bar(sigma, q2);
            const double I4d1 = I4d1_T23B_2pt_g_bar(sigma, q2);
            const double I4d2 = I4d2_T23B_2pt_g_bar(sigma, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return result1 + result2;
        }

        double integrand_T23B_3pt_m1(const std::array<double, 3> & args, const double & q2) const
        {
            const double sigma  = args[0];
            const double x_1    = args[1];
            const double x_2    = args[2];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_V2 = power_of<2>(m_V());
            const double M4   = power_of<2>(M2), M6 = power_of<3>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double I1 = I1_T23B_3pt_phi_3(sigma, omega_1, omega_2, q2);
            const double I2 = I2_T23B_3pt_phi_3(sigma, omega_1, omega_2, q2)         + I2_T23B_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                            + I2_T23B_3pt_phi_4(sigma, omega_1, omega_2, q2)         + I2_T23B_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_T23B_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_T23B_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I2_T23B_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                            + I2_T23B_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I2_T23B_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3 = I3_T23B_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)     + I3_T23B_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)
                            + I3_T23B_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3_T23B_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I3_T23B_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3_T23B_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                            + I3_T23B_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3_T23B_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4 = I4_T23B_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4_T23B_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                            + I4_T23B_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4_T23B_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result1 = 0.0;
            result1 += - I1;
            result1 +=   I2 / M2;
            result1 += - I3 / (2.0 * M4);
            result1 +=   I4 / (6.0 * M6);
            result1 *=   exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - I2;
            result2 +=   I3 / M2;
            result2 += - I4 / (2.0 * M4);
            result2 *=   exp;

            return (result1 + result2) * prefactor;
        }

        double surface_T23B_3pt_A_m1(const std::array<double, 2> & args, const double & sigma, const double & q2) const
        {
            const double x_1    = args[0];
            const double x_2    = args[1];
            const double xbar_1 = 1.0 - x_1;
            const double xbar_2 = 1.0 - x_2;

            // this includes the original factor of 1 / omega_2 (which corresponds to 1 / xi in the notation of
            // [KMO2006]), as well as the Jacobian from the transformation (omega_1, omega_2 -> x_1, x_2).
            const double prefactor = sigma * m_B() / ((xbar_1 * xbar_2 + x_2) * xbar_2);

            const double omega_1 = sigma * m_B() * x_1;
            const double omega_2 = sigma * m_B() * (xbar_1 + x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            const double I2   = I2_T23B_3pt_phi_3(sigma, omega_1, omega_2, q2)            + I2_T23B_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)
                              + I2_T23B_3pt_phi_4(sigma, omega_1, omega_2, q2)            + I2_T23B_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_T23B_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_T23B_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I2_T23B_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I2_T23B_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I2_T23B_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3   = I3_T23B_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)        + I3_T23B_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)
                              + I3_T23B_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)        + I3_T23B_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_T23B_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)        + I3_T23B_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3_T23B_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I3_T23B_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I3d1 = I3d1A_T23B_3pt_phi_bar_3(sigma, omega_1, omega_2, q2)     + I3d1A_T23B_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)
                              + I3d1A_T23B_3pt_phi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_T23B_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_T23B_3pt_psi_bar_4(sigma, omega_1, omega_2, q2)     + I3d1A_T23B_3pt_chi_bar_4(sigma, omega_1, omega_2, q2)
                              + I3d1A_T23B_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I3d1A_T23B_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4   = I4_T23B_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2)    + I4_T23B_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4_T23B_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2)    + I4_T23B_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d1 = I4d1A_T23B_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d1A_T23B_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d1A_T23B_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d1A_T23B_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);
            const double I4d2 = I4d2A_T23B_3pt_phi_bar_bar_3(sigma, omega_1, omega_2, q2) + I4d2A_T23B_3pt_phi_bar_bar_4(sigma, omega_1, omega_2, q2)
                              + I4d2A_T23B_3pt_psi_bar_bar_4(sigma, omega_1, omega_2, q2) + I4d2A_T23B_3pt_chi_bar_bar_4(sigma, omega_1, omega_2, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }

        double surface_T23B_3pt_B_m1(const double & x_1, const double & sigma, const double & q2) const
        {
            // this ONLY includes the Jacobian from the transformation (omega_1 -> x_1).
            const double prefactor = sigma * m_B();

            const double omega_1 = sigma * m_B() * x_1;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1B_T23B_3pt_phi_bar_3(sigma, omega_1, q2)     + I3d1B_T23B_3pt_phi_bar_bar_3(sigma, omega_1, q2)
                                  + I3d1B_T23B_3pt_phi_bar_4(sigma, omega_1, q2)     + I3d1B_T23B_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I3d1B_T23B_3pt_psi_bar_4(sigma, omega_1, q2)     + I3d1B_T23B_3pt_chi_bar_4(sigma, omega_1, q2)
                                  + I3d1B_T23B_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I3d1B_T23B_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1B_T23B_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d1B_T23B_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d1B_T23B_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d1B_T23B_3pt_chi_bar_bar_4(sigma, omega_1, q2);
            const     double I4d2 = I4d2B_T23B_3pt_phi_bar_bar_3(sigma, omega_1, q2) + I4d2B_T23B_3pt_phi_bar_bar_4(sigma, omega_1, q2)
                                  + I4d2B_T23B_3pt_psi_bar_bar_4(sigma, omega_1, q2) + I4d2B_T23B_3pt_chi_bar_bar_4(sigma, omega_1, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }

        double surface_T23B_3pt_C_m1(const double & x_2, const double & sigma, const double & q2) const
        {
            const double xbar_2 = 1.0 - x_2;

            // this ONLY includes the Jacobian from the transformation (omega_2 -> x_2).
            const double prefactor = sigma * m_B() / (xbar_2 * xbar_2);

            const double omega_2 = sigma * m_B() * (x_2 / xbar_2);

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);

            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            const     double I3d1 = I3d1C_T23B_3pt_phi_bar_3(sigma, omega_2, q2)     + I3d1C_T23B_3pt_phi_bar_bar_3(sigma, omega_2, q2)
                                  + I3d1C_T23B_3pt_phi_bar_4(sigma, omega_2, q2)     + I3d1C_T23B_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I3d1C_T23B_3pt_psi_bar_4(sigma, omega_2, q2)     + I3d1C_T23B_3pt_chi_bar_4(sigma, omega_2, q2)
                                  + I3d1C_T23B_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I3d1C_T23B_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            constexpr double I4   = 0.0;
            const     double I4d1 = I4d1C_T23B_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d1C_T23B_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d1C_T23B_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d1C_T23B_3pt_chi_bar_bar_4(sigma, omega_2, q2);
            const     double I4d2 = I4d2C_T23B_3pt_phi_bar_bar_3(sigma, omega_2, q2) + I4d2C_T23B_3pt_phi_bar_bar_4(sigma, omega_2, q2)
                                  + I4d2C_T23B_3pt_psi_bar_bar_4(sigma, omega_2, q2) + I4d2C_T23B_3pt_chi_bar_bar_4(sigma, omega_2, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }

        double surface_T23B_3pt_D_m1(const double & sigma, const double & q2) const
        {
            // this does NOT includes the original factor of 1 / omega_2
            const double prefactor = 1.0;

            const double m_B2 = power_of<2>(m_B()), m_B4 = power_of<4>(m_B()), m_B6 = power_of<6>(m_B());
            const double m_V2 = power_of<2>(m_V());
            const double m_v2 = power_of<2>(m_v());
            const double M4   = power_of<2>(M2);
            const double exp  = std::exp((-s(sigma, q2) + m_V2) / M2());

            const double sigmabar = 1.0 - sigma, sigmabar2 = power_of<2>(sigmabar);
            const double eta      = 1.0 / (1.0 + (m_v2 - q2) / (sigmabar2 * m_B2));
            const double etad1    = 2.0 * (eta - 1.0) * eta / sigmabar;
            const double etad2    = 2.0 * (eta - 1.0) * eta * (4.0 * eta - 1.0) / power_of<2>(sigmabar);


            constexpr double I2   = 0.0;
            constexpr double I3   = 0.0;
            constexpr double I3d1 = 0.0;
            constexpr double I4   = 0.0;
            constexpr double I4d1 = 0.0;
            const     double I4d2 = I4d2D_T23B_3pt_phi_bar_bar_3(sigma, q2) + I4d2D_T23B_3pt_phi_bar_bar_4(sigma, q2)
                                  + I4d2D_T23B_3pt_psi_bar_bar_4(sigma, q2) + I4d2D_T23B_3pt_chi_bar_bar_4(sigma, q2);

            double result1 = 0.0;
            result1 += -1.0 * eta * I2 / m_B2;
            result1 +=  0.5 * eta / m_B2 * (I3 / M2 + eta / m_B2 * I3d1 + I3 * etad1 / m_B2);
            result1 += -1.0 / 6.0 * eta / m_B2 * (I4 / (M4));
            result1 += -1.0 / 6.0 * eta / (m_B4 * M2 ) * (eta * I4d1 + I4 * etad1);
            result1 += -1.0 / 6.0 * eta / m_B6 * (I4 * (power_of<2>(etad1) + eta * etad2) + 3.0 * I4d1 * eta * etad1 + I4d2 * power_of<2>(eta));
            result1 *=  exp * s(sigma, q2);

            double result2 = 0.0;
            result2 += - 0.5 * eta * I3 / m_B2;
            result2 += + eta * I4 / (3.0 * M2 * m_B2) ;
            result2 += + eta * (eta * I4d1 + I4 * etad1) / (6.0 * m_B4);
            result2 *= exp;

            return (result1 + result2) * prefactor;
        }
        // }}}

        /* T23B : form factor and moments */
        // {{{
        double t_23B(const double & q2) const
        {
            const double sigma_0 = this->sigma_0(q2, s0_0_T23B(), s0_1_T23B());

            const std::function<double (const double &)> integrand_2pt = std::bind(integrand_t23B_2pt, this, std::placeholders::_1, q2);

            const double integral_2pt = integrate<GSL::QAGS>(integrand_2pt, 0.0, sigma_0);
            const double surface_2pt  = 0.0 - surface_T23B_2pt(switch_borel ? sigma_0 : 0.0, q2);

            double integral_3pt = 0.0;
            double surface_3pt  = 0.0;

            if (switch_3pt != 0.0)
            {
                const std::function<double (const double &)> surface_3pt_B = std::bind(&Implementation::surface_T23B_3pt_B, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const double &)> surface_3pt_C = std::bind(&Implementation::surface_T23B_3pt_C, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const std::array<double, 3> &)> integrand_3pt = std::bind(&Implementation::integrand_T23B_3pt, this, std::placeholders::_1, q2);
                const std::function<double (const std::array<double, 2> &)> surface_3pt_A = std::bind(&Implementation::surface_T23B_3pt_A, this, std::placeholders::_1, sigma_0, q2);

                integral_3pt = integrate(integrand_3pt, { 0.0, 0.0, 0.0 }, { sigma_0, 1.0, 1.0 }, cubature::Config());
                surface_3pt  = 0.0
                             - integrate(surface_3pt_A, { 0.0, 0.0 }, { 1.0, 1.0 }, cubature::Config()) // integrate over x_1 and x_2
                             - integrate<GSL::QAGS>(surface_3pt_B, 0.0, 1.0)                            // integrate over x_1
                             - integrate<GSL::QAGS>(surface_3pt_C, 0.0, 1.0)                            // integrate over x_2
                             - surface_T23B_3pt_D(sigma_0, q2);
            }

            return f_B() * power_of<2>(m_B()) / (2.0 * f_V() * m_V) * (integral_2pt + surface_2pt + integral_3pt + surface_3pt) / ( Process_::chi2);
        }

        double normalized_moment_1_t_23B(const double & q2) const
        {
            const double sigma_0 = this->sigma_0(q2, s0_0_T23B(), s0_1_T23B()) ;

            const std::function<double (const double &)> integrand_2pt_m1 = std::bind(&Implementation::integrand_T23B_2pt_borel_m1, this, std::placeholders::_1, q2);


            const std::function<double (const double &)> integrand_2pt    = std::bind(&Implementation::integrand_T23B_2pt_borel, this, std::placeholders::_1, q2);

            const double integral_2pt_m1 = integrate<GSL::QAGS>(integrand_2pt_m1, 0.0, sigma_0);
            const double surface_2pt_m1  = 0.0 - surface_T23B_2pt_m1(sigma_0, q2);

            double integral_3pt_m1 = 0.0;
            double surface_3pt_m1  = 0.0;

            if (switch_3pt != 0.0)
            {
                const std::function<double (const double &)> surface_3pt_B_m1 = std::bind(&Implementation::surface_T23B_3pt_B_m1, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const double &)> surface_3pt_C_m1 = std::bind(&Implementation::surface_T23B_3pt_C_m1, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const std::array<double, 3> &)> integrand_3pt_m1 = std::bind(&Implementation::integrand_T23B_3pt_m1, this, std::placeholders::_1, q2);
                const std::function<double (const std::array<double, 2> &)> surface_3pt_A_m1 = std::bind(&Implementation::surface_T23B_3pt_A_m1, this, std::placeholders::_1, sigma_0, q2);

                integral_3pt_m1 = integrate(integrand_3pt_m1, { 0.0, 0.0, 0.0 }, { sigma_0, 1.0, 1.0 }, cubature::Config());
                surface_3pt_m1  = 0.0
                                - integrate(surface_3pt_A_m1, { 0.0, 0.0 }, { 1.0, 1.0 }, cubature::Config()) // integrate over x_1 and x_2
                                - integrate<GSL::QAGS>(surface_3pt_B_m1, 0.0, 1.0)                            // integrate over x_1
                                - integrate<GSL::QAGS>(surface_3pt_C_m1, 0.0, 1.0)                            // integrate over x_2
                                - surface_T23B_3pt_D_m1(sigma_0, q2);
            }
            const double numerator       = integral_2pt_m1 + surface_2pt_m1 + integral_3pt_m1 + surface_3pt_m1;

            const double integral_2pt    = integrate<GSL::QAGS>(integrand_2pt, 0.0, sigma_0);
            const double surface_2pt     = 0.0 - surface_T23B_2pt(sigma_0, q2);

            double integral_3pt    = 0.0;
            double surface_3pt     = 0.0;

            if (switch_3pt != 0.0)
            {
                const std::function<double (const double &)> surface_3pt_B    = std::bind(&Implementation::surface_T23B_3pt_B, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const double &)> surface_3pt_C    = std::bind(&Implementation::surface_T23B_3pt_C, this, std::placeholders::_1, sigma_0, q2);
                const std::function<double (const std::array<double, 3> &)> integrand_3pt = std::bind(&Implementation::integrand_T23B_3pt, this, std::placeholders::_1, q2);
                const std::function<double (const std::array<double, 2> &)> surface_3pt_A = std::bind(&Implementation::surface_T23B_3pt_A, this, std::placeholders::_1, sigma_0, q2);

                integral_3pt    = integrate(integrand_3pt, { 0.0, 0.0, 0.0 }, { sigma_0, 1.0, 1.0 }, cubature::Config());
                surface_3pt     = 0.0
                                - integrate(surface_3pt_A, { 0.0, 0.0 }, { 1.0, 1.0 }, cubature::Config()) // integrate over x_1 and x_2
                                - integrate<GSL::QAGS>(surface_3pt_B, 0.0, 1.0)                            // integrate over x_1
                                - integrate<GSL::QAGS>(surface_3pt_C, 0.0, 1.0)                            // integrate over x_2
                                - surface_T23B_3pt_D(sigma_0, q2);
            }
            const double denominator     = integral_2pt + surface_2pt + integral_3pt + surface_3pt;

            return numerator / denominator;
        }
        // }}}

        /* Diagnostics */

        Diagnostics diagnostics() const
        {
            Diagnostics results;

            /* dependent variables */
            results.add({ this->m_v(),                       "m_v(mu) in the MSbar scheme"                         });
            results.add({ this->m_V(),                       "vector meson mass"                                   });
            results.add({ this->f_V(),                       "V decay contant"                                     });

            results.add({this->sigma(s0_0_V(), 5.0),          "sigma_0 value at q^2=5.0"                           });
            results.add({this->s0_0_V(),                      "s_0 value for V"                                    });

            /* A_1 */

            /* 2 particle */

            /* I_1 phi_+ */
            results.add({ this->I1_A1_2pt_phi_p(0.04, -5.0), "A_1: I_1^{2pt,phi_+}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I1_A1_2pt_phi_p(0.04,  0.0), "A_1: I_1^{2pt,phi_+}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I1_A1_2pt_phi_p(0.04, +5.0), "A_1: I_1^{2pt,phi_+}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I1_A1_2pt_phi_p(0.08, -5.0), "A_1: I_1^{2pt,phi_+}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I1_A1_2pt_phi_p(0.08,  0.0), "A_1: I_1^{2pt,phi_+}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I1_A1_2pt_phi_p(0.08, +5.0), "A_1: I_1^{2pt,phi_+}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_1 phi_bar */
            results.add({ this->I1_A1_2pt_phi_bar(0.04, -5.0), "A_1: I_1^{2pt,phi_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I1_A1_2pt_phi_bar(0.04,  0.0), "A_1: I_1^{2pt,phi_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I1_A1_2pt_phi_bar(0.04, +5.0), "A_1: I_1^{2pt,phi_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I1_A1_2pt_phi_bar(0.08, -5.0), "A_1: I_1^{2pt,phi_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I1_A1_2pt_phi_bar(0.08,  0.0), "A_1: I_1^{2pt,phi_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I1_A1_2pt_phi_bar(0.08, +5.0), "A_1: I_1^{2pt,phi_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2 phi_bar */
            results.add({ this->I2_A1_2pt_phi_bar(0.04, -5.0), "A_1: I_2^{2pt,phi_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_A1_2pt_phi_bar(0.04,  0.0), "A_1: I_2^{2pt,phi_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_A1_2pt_phi_bar(0.04, +5.0), "A_1: I_2^{2pt,phi_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2_A1_2pt_phi_bar(0.08, -5.0), "A_1: I_2^{2pt,phi_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_A1_2pt_phi_bar(0.08,  0.0), "A_1: I_2^{2pt,phi_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_A1_2pt_phi_bar(0.08, +5.0), "A_1: I_2^{2pt,phi_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2d1 phi_bar */
            results.add({ this->I2d1_A1_2pt_phi_bar(0.04, -5.0), "A_1: I_2d1^{2pt,phi_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2d1_A1_2pt_phi_bar(0.04,  0.0), "A_1: I_2d1^{2pt,phi_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2d1_A1_2pt_phi_bar(0.04, +5.0), "A_1: I_2d1^{2pt,phi_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2d1_A1_2pt_phi_bar(0.08, -5.0), "A_1: I_2d1^{2pt,phi_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2d1_A1_2pt_phi_bar(0.08,  0.0), "A_1: I_2d1^{2pt,phi_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2d1_A1_2pt_phi_bar(0.08, +5.0), "A_1: I_2d1^{2pt,phi_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_1 g_+ */
            results.add({ this->I1_A1_2pt_g_p(0.04, -5.0), "A_1: I_1^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I1_A1_2pt_g_p(0.04,  0.0), "A_1: I_1^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I1_A1_2pt_g_p(0.04, +5.0), "A_1: I_1^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I1_A1_2pt_g_p(0.08, -5.0), "A_1: I_1^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I1_A1_2pt_g_p(0.08,  0.0), "A_1: I_1^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I1_A1_2pt_g_p(0.08, +5.0), "A_1: I_1^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2 g_+ */
            results.add({ this->I2_A1_2pt_g_p(0.04, -5.0), "A_1: I_2^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_A1_2pt_g_p(0.04,  0.0), "A_1: I_2^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_A1_2pt_g_p(0.04, +5.0), "A_1: I_2^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2_A1_2pt_g_p(0.08, -5.0), "A_1: I_2^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_A1_2pt_g_p(0.08,  0.0), "A_1: I_2^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_A1_2pt_g_p(0.08, +5.0), "A_1: I_2^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2d1 g_+ */
            results.add({ this->I2d1_A1_2pt_g_p(0.04, -5.0), "A_1: I_2d1^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2d1_A1_2pt_g_p(0.04,  0.0), "A_1: I_2d1^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2d1_A1_2pt_g_p(0.04, +5.0), "A_1: I_2d1^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2d1_A1_2pt_g_p(0.08, -5.0), "A_1: I_2d1^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2d1_A1_2pt_g_p(0.08,  0.0), "A_1: I_2d1^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2d1_A1_2pt_g_p(0.08, +5.0), "A_1: I_2d1^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3 g_+ */
            results.add({ this->I3_A1_2pt_g_p(0.04, -5.0), "A_1: I_3^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3_A1_2pt_g_p(0.04,  0.0), "A_1: I_3^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3_A1_2pt_g_p(0.04, +5.0), "A_1: I_3^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3_A1_2pt_g_p(0.08, -5.0), "A_1: I_3^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3_A1_2pt_g_p(0.08,  0.0), "A_1: I_3^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3_A1_2pt_g_p(0.08, +5.0), "A_1: I_3^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3d1 g_+ */
            results.add({ this->I3d1_A1_2pt_g_p(0.04, -5.0), "A_1: I_3d1^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d1_A1_2pt_g_p(0.04,  0.0), "A_1: I_3d1^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d1_A1_2pt_g_p(0.04, +5.0), "A_1: I_3d1^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3d1_A1_2pt_g_p(0.08, -5.0), "A_1: I_3d1^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d1_A1_2pt_g_p(0.08,  0.0), "A_1: I_3d1^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d1_A1_2pt_g_p(0.08, +5.0), "A_1: I_3d1^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3d2 g_+ */
            results.add({ this->I3d2_A1_2pt_g_p(0.04, -5.0), "A_1: I_3d2^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d2_A1_2pt_g_p(0.04,  0.0), "A_1: I_3d2^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d2_A1_2pt_g_p(0.04, +5.0), "A_1: I_3d2^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3d2_A1_2pt_g_p(0.08, -5.0), "A_1: I_3d2^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d2_A1_2pt_g_p(0.08,  0.0), "A_1: I_3d2^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d2_A1_2pt_g_p(0.08, +5.0), "A_1: I_3d2^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2 g_bar */
            results.add({ this->I2_A1_2pt_g_bar(0.04, -5.0), "A_1: I_2^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_A1_2pt_g_bar(0.04,  0.0), "A_1: I_2^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_A1_2pt_g_bar(0.04, +5.0), "A_1: I_2^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2_A1_2pt_g_bar(0.08, -5.0), "A_1: I_2^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_A1_2pt_g_bar(0.08,  0.0), "A_1: I_2^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_A1_2pt_g_bar(0.08, +5.0), "A_1: I_2^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2d1 g_bar */
            results.add({ this->I2d1_A1_2pt_g_bar(0.04, -5.0), "A_1: I_2d1^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2d1_A1_2pt_g_bar(0.04,  0.0), "A_1: I_2d1^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2d1_A1_2pt_g_bar(0.04, +5.0), "A_1: I_2d1^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2d1_A1_2pt_g_bar(0.08, -5.0), "A_1: I_2d1^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2d1_A1_2pt_g_bar(0.08,  0.0), "A_1: I_2d1^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2d1_A1_2pt_g_bar(0.08, +5.0), "A_1: I_2d1^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3 g_bar */
            results.add({ this->I3_A1_2pt_g_bar(0.04, -5.0), "A_1: I_3^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3_A1_2pt_g_bar(0.04,  0.0), "A_1: I_3^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3_A1_2pt_g_bar(0.04, +5.0), "A_1: I_3^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3_A1_2pt_g_bar(0.08, -5.0), "A_1: I_3^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3_A1_2pt_g_bar(0.08,  0.0), "A_1: I_3^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3_A1_2pt_g_bar(0.08, +5.0), "A_1: I_3^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3d1 g_bar */
            results.add({ this->I3d1_A1_2pt_g_bar(0.04, -5.0), "A_1: I_3d1^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d1_A1_2pt_g_bar(0.04,  0.0), "A_1: I_3d1^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d1_A1_2pt_g_bar(0.04, +5.0), "A_1: I_3d1^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3d1_A1_2pt_g_bar(0.08, -5.0), "A_1: I_3d1^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d1_A1_2pt_g_bar(0.08,  0.0), "A_1: I_3d1^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d1_A1_2pt_g_bar(0.08, +5.0), "A_1: I_3d1^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3d2 g_bar */
            results.add({ this->I3d2_A1_2pt_g_bar(0.04, -5.0), "A_1: I_3d2^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d2_A1_2pt_g_bar(0.04,  0.0), "A_1: I_3d2^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d2_A1_2pt_g_bar(0.04, +5.0), "A_1: I_3d2^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3d2_A1_2pt_g_bar(0.08, -5.0), "A_1: I_3d2^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d2_A1_2pt_g_bar(0.08,  0.0), "A_1: I_3d2^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d2_A1_2pt_g_bar(0.08, +5.0), "A_1: I_3d2^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_4 g_bar */
            results.add({ this->I4_A1_2pt_g_bar(0.04, -5.0), "A_1: I_4^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I4_A1_2pt_g_bar(0.04,  0.0), "A_1: I_4^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I4_A1_2pt_g_bar(0.04, +5.0), "A_1: I_4^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I4_A1_2pt_g_bar(0.08, -5.0), "A_1: I_4^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I4_A1_2pt_g_bar(0.08,  0.0), "A_1: I_4^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I4_A1_2pt_g_bar(0.08, +5.0), "A_1: I_4^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_4d1 g_bar */
            results.add({ this->I4d1_A1_2pt_g_bar(0.04, -5.0), "A_1: I_4d1^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d1_A1_2pt_g_bar(0.04,  0.0), "A_1: I_4d1^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d1_A1_2pt_g_bar(0.04, +5.0), "A_1: I_4d1^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I4d1_A1_2pt_g_bar(0.08, -5.0), "A_1: I_4d1^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d1_A1_2pt_g_bar(0.08,  0.0), "A_1: I_4d1^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d1_A1_2pt_g_bar(0.08, +5.0), "A_1: I_4d1^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_4d2 g_bar */
            results.add({ this->I4d2_A1_2pt_g_bar(0.04, -5.0), "A_1: I_4d2^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d2_A1_2pt_g_bar(0.04,  0.0), "A_1: I_4d2^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d2_A1_2pt_g_bar(0.04, +5.0), "A_1: I_4d2^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I4d2_A1_2pt_g_bar(0.08, -5.0), "A_1: I_4d2^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d2_A1_2pt_g_bar(0.08,  0.0), "A_1: I_4d2^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d2_A1_2pt_g_bar(0.08, +5.0), "A_1: I_4d2^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_4d3 g_bar */
            results.add({ this->I4d3_A1_2pt_g_bar(0.04, -5.0), "A_1: I_4d3^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d3_A1_2pt_g_bar(0.04,  0.0), "A_1: I_4d3^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d3_A1_2pt_g_bar(0.04, +5.0), "A_1: I_4d3^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I4d3_A1_2pt_g_bar(0.08, -5.0), "A_1: I_4d3^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d3_A1_2pt_g_bar(0.08,  0.0), "A_1: I_4d3^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d3_A1_2pt_g_bar(0.08, +5.0), "A_1: I_4d3^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* 3 particle */

            /* I_1 phi_3 */
            results.add({ this->I1_A1_3pt_phi_3(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),            "A_1: I_1^{3pt,phi_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I1_A1_3pt_phi_3(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),            "A_1: I_1^{3pt,phi_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I1_A1_3pt_phi_3(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),            "A_1: I_1^{3pt,phi_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I1_A1_3pt_phi_3(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),            "A_1: I_1^{3pt,phi_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 phi_3 */
            results.add({ this->I2_A1_3pt_phi_3(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),            "A_1: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_phi_3(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),            "A_1: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_phi_3(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),            "A_1: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_phi_3(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),            "A_1: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_1 phi_bar_3 */
            results.add({ this->I1_A1_3pt_phi_bar_3(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),        "A_1: I_1^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I1_A1_3pt_phi_bar_3(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),        "A_1: I_1^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I1_A1_3pt_phi_bar_3(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),        "A_1: I_1^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I1_A1_3pt_phi_bar_3(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),        "A_1: I_1^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 phi_bar_3 */
            results.add({ this->I2_A1_3pt_phi_bar_3(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),        "A_1: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_phi_bar_3(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),        "A_1: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_phi_bar_3(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),        "A_1: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_phi_bar_3(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),        "A_1: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 phi_bar_3 */
            results.add({ this->I3_A1_3pt_phi_bar_3(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),        "A_1: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A1_3pt_phi_bar_3(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),        "A_1: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_A1_3pt_phi_bar_3(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),        "A_1: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A1_3pt_phi_bar_3(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),        "A_1: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A phi_bar_3 */
            results.add({ this->I3d1A_A1_3pt_phi_bar_3(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),     "A_1: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A1_3pt_phi_bar_3(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),     "A_1: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A1_3pt_phi_bar_3(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),     "A_1: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A1_3pt_phi_bar_3(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),     "A_1: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B phi_bar_3 */
            results.add({ this->I3d1B_A1_3pt_phi_bar_3(this->sigma(s0_0_A1(), 5.0), 1.0, 5.0),          "A_1: I_3d1B^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_A1_3pt_phi_bar_3(this->sigma(s0_0_A1(), 5.0), 3.0, 5.0),          "A_1: I_3d1B^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C phi_bar_3 */
            results.add({ this->I3d1C_A1_3pt_phi_bar_3(this->sigma(s0_0_A1(), 5.0), 0.1, 5.0),          "A_1: I_3d1C^{3pt,phi_bar_3}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_A1_3pt_phi_bar_3(this->sigma(s0_0_A1(), 5.0), 0.5, 5.0),          "A_1: I_3d1C^{3pt,phi_bar_3}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 phi_bar_bar_3 */
            results.add({ this->I3_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),    "A_1: I_3^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),    "A_1: I_3^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),    "A_1: I_3^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),    "A_1: I_3^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A phi_bar_bar_3 */
            results.add({ this->I3d1A_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0), "A_1: I_3d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0), "A_1: I_3d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0), "A_1: I_3d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0), "A_1: I_3d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B phi_bar_bar_3 */
            results.add({ this->I3d1B_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 1.0, 5.0),      "A_1: I_3d1B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 3.0, 5.0),      "A_1: I_3d1B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C phi_bar_bar_3 */
            results.add({ this->I3d1C_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 0.1, 5.0),      "A_1: I_3d1C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 0.5, 5.0),      "A_1: I_3d1C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4 phi_bar_bar_3 */
            results.add({ this->I4_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),    "A_1: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),    "A_1: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),    "A_1: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),    "A_1: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1A phi_bar_bar_3 */
            results.add({ this->I4d1A_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0), "A_1: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0), "A_1: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0), "A_1: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0), "A_1: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1B phi_bar_bar_3 */
            results.add({ this->I4d1B_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 1.0, 5.0),      "A_1: I_4d1B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d1B_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 3.0, 5.0),      "A_1: I_4d1B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d1C phi_bar_bar_3 */
            results.add({ this->I4d1C_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 0.1, 5.0),      "A_1: I_4d1C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1C_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 0.5, 5.0),      "A_1: I_4d1C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2A phi_bar_bar_3 */
            results.add({ this->I4d2A_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0), "A_1: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0), "A_1: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0), "A_1: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0), "A_1: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2B phi_bar_bar_3 */
            results.add({ this->I4d2B_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 1.0, 5.0),      "A_1: I_4d2B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d2B_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 3.0, 5.0),      "A_1: I_4d2B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d2C phi_bar_bar_3 */
            results.add({ this->I4d2C_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 0.1, 5.0),      "A_1: I_4d2C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2C_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 0.5, 5.0),      "A_1: I_4d2C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2D phi_bar_bar_3 */
            results.add({ this->I4d2D_A1_3pt_phi_bar_bar_3(this->sigma(s0_0_A1(), 5.0), 5.0),           "A_1: I_4d2D^{3pt,phi_bar_bar_3}(sigma=sigma_0, q2=5.0 GeV^2)"});

            /* I_1 phi_4 */
            results.add({ this->I1_A1_3pt_phi_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),            "A_1: I_1^{3pt,phi_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I1_A1_3pt_phi_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),            "A_1: I_1^{3pt,phi_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I1_A1_3pt_phi_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),            "A_1: I_1^{3pt,phi_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I1_A1_3pt_phi_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),            "A_1: I_1^{3pt,phi_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 phi_4 */
            results.add({ this->I2_A1_3pt_phi_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),            "A_1: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_phi_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),            "A_1: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_phi_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),            "A_1: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_phi_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),            "A_1: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_1 phi_bar_4 */
            results.add({ this->I1_A1_3pt_phi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),        "A_1: I_1^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I1_A1_3pt_phi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),        "A_1: I_1^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I1_A1_3pt_phi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),        "A_1: I_1^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I1_A1_3pt_phi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),        "A_1: I_1^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 phi_bar_4 */
            results.add({ this->I2_A1_3pt_phi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),        "A_1: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_phi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),        "A_1: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_phi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),        "A_1: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_phi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),        "A_1: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 phi_bar_4 */
            results.add({ this->I3_A1_3pt_phi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),        "A_1: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A1_3pt_phi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),        "A_1: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_A1_3pt_phi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),        "A_1: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A1_3pt_phi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),        "A_1: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A phi_bar_4 */
            results.add({ this->I3d1A_A1_3pt_phi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),     "A_1: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A1_3pt_phi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),     "A_1: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A1_3pt_phi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),     "A_1: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A1_3pt_phi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),     "A_1: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B phi_bar_4 */
            results.add({ this->I3d1B_A1_3pt_phi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 5.0),          "A_1: I_3d1B^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_A1_3pt_phi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 5.0),          "A_1: I_3d1B^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C phi_bar_4 */
            results.add({ this->I3d1C_A1_3pt_phi_bar_4(this->sigma(s0_0_A1(), 5.0), 0.1, 5.0),          "A_1: I_3d1C^{3pt,phi_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_A1_3pt_phi_bar_4(this->sigma(s0_0_A1(), 5.0), 0.5, 5.0),          "A_1: I_3d1C^{3pt,phi_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 phi_bar_bar_4 */
            results.add({ this->I2_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),    "A_1: I_2^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),    "A_1: I_2^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),    "A_1: I_2^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),    "A_1: I_2^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 phi_bar_bar_4 */
            results.add({ this->I3_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),    "A_1: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),    "A_1: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),    "A_1: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),    "A_1: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A phi_bar_bar_4 */
            results.add({ this->I3d1A_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0), "A_1: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0), "A_1: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0), "A_1: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0), "A_1: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B phi_bar_bar_4 */
            results.add({ this->I3d1B_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 5.0),      "A_1: I_3d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 5.0),      "A_1: I_3d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C phi_bar_bar_4 */
            results.add({ this->I3d1C_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 0.1, 5.0),      "A_1: I_3d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 0.5, 5.0),      "A_1: I_3d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4 phi_bar_bar_4 */
            results.add({ this->I4_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),    "A_1: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),    "A_1: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),    "A_1: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),    "A_1: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1A phi_bar_bar_4 */
            results.add({ this->I4d1A_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0), "A_1: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0), "A_1: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0), "A_1: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0), "A_1: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1B phi_bar_bar_4 */
            results.add({ this->I4d1B_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 5.0),      "A_1: I_4d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d1B_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 5.0),      "A_1: I_4d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d1C phi_bar_bar_4 */
            results.add({ this->I4d1C_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 0.1, 5.0),      "A_1: I_4d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1C_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 0.5, 5.0),      "A_1: I_4d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2A phi_bar_bar_4 */
            results.add({ this->I4d2A_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0), "A_1: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0), "A_1: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0), "A_1: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0), "A_1: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2B phi_bar_bar_4 */
            results.add({ this->I4d2B_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 5.0),      "A_1: I_4d2B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d2B_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 5.0),      "A_1: I_4d2B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d2C phi_bar_bar_4 */
            results.add({ this->I4d2C_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 0.1, 5.0),      "A_1: I_4d2C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2C_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 0.5, 5.0),      "A_1: I_4d2C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2D phi_bar_bar_4 */
            results.add({ this->I4d2D_A1_3pt_phi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 5.0),           "A_1: I_4d2D^{3pt,phi_bar_bar_4}(sigma=sigma_0, q2=5.0 GeV^2)"});

            /* I_1 psi_bar_4 */
            results.add({ this->I1_A1_3pt_psi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),        "A_1: I_1^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I1_A1_3pt_psi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),        "A_1: I_1^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I1_A1_3pt_psi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),        "A_1: I_1^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I1_A1_3pt_psi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),        "A_1: I_1^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 psi_bar_4 */
            results.add({ this->I2_A1_3pt_psi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),        "A_1: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_psi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),        "A_1: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_psi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),        "A_1: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_psi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),        "A_1: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 psi_bar_4 */
            results.add({ this->I3_A1_3pt_psi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),        "A_1: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A1_3pt_psi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),        "A_1: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_A1_3pt_psi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),        "A_1: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A1_3pt_psi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),        "A_1: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A psi_bar_4 */
            results.add({ this->I3d1A_A1_3pt_psi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),     "A_1: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A1_3pt_psi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),     "A_1: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A1_3pt_psi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),     "A_1: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A1_3pt_psi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),     "A_1: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B psi_bar_4 */
            results.add({ this->I3d1B_A1_3pt_psi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 5.0),          "A_1: I_3d1B^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_A1_3pt_psi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 5.0),          "A_1: I_3d1B^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C psi_bar_4 */
            results.add({ this->I3d1C_A1_3pt_psi_bar_4(this->sigma(s0_0_A1(), 5.0), 0.1, 5.0),          "A_1: I_3d1C^{3pt,psi_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_A1_3pt_psi_bar_4(this->sigma(s0_0_A1(), 5.0), 0.5, 5.0),          "A_1: I_3d1C^{3pt,psi_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 psi_bar_bar_4 */
            results.add({ this->I2_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),    "A_1: I_2^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),    "A_1: I_2^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),    "A_1: I_2^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),    "A_1: I_2^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 psi_bar_bar_4 */
            results.add({ this->I3_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),    "A_1: I_3^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),    "A_1: I_3^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),    "A_1: I_3^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),    "A_1: I_3^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A psi_bar_bar_4 */
            results.add({ this->I3d1A_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0), "A_1: I_3d1A^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0), "A_1: I_3d1A^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0), "A_1: I_3d1A^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0), "A_1: I_3d1A^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B psi_bar_bar_4 */
            results.add({ this->I3d1B_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 5.0),      "A_1: I_3d1B^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 5.0),      "A_1: I_3d1B^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C psi_bar_bar_4 */
            results.add({ this->I3d1C_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 0.1, 5.0),      "A_1: I_3d1C^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 0.5, 5.0),      "A_1: I_3d1C^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4 psi_bar_bar_4 */
            results.add({ this->I4_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),    "A_1: I_4^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),    "A_1: I_4^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),    "A_1: I_4^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),    "A_1: I_4^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1A psi_bar_bar_4 */
            results.add({ this->I4d1A_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0), "A_1: I_4d1A^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0), "A_1: I_4d1A^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0), "A_1: I_4d1A^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0), "A_1: I_4d1A^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1B psi_bar_bar_4 */
            results.add({ this->I4d1B_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 5.0),      "A_1: I_4d1B^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d1B_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 5.0),      "A_1: I_4d1B^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d1C psi_bar_bar_4 */
            results.add({ this->I4d1C_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 0.1, 5.0),      "A_1: I_4d1C^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1C_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 0.5, 5.0),      "A_1: I_4d1C^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2A psi_bar_bar_4 */
            results.add({ this->I4d2A_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0), "A_1: I_4d2A^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0), "A_1: I_4d2A^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0), "A_1: I_4d2A^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0), "A_1: I_4d2A^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2B psi_bar_bar_4 */
            results.add({ this->I4d2B_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 5.0),      "A_1: I_4d2B^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d2B_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 5.0),      "A_1: I_4d2B^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d2C psi_bar_bar_4 */
            results.add({ this->I4d2C_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 0.1, 5.0),      "A_1: I_4d2C^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2C_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 0.5, 5.0),      "A_1: I_4d2C^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2D psi_bar_bar_4 */
            results.add({ this->I4d2D_A1_3pt_psi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 5.0),           "A_1: I_4d2D^{3pt,psi_bar_bar_4}(sigma=sigma_0, q2=5.0 GeV^2)"});

            /* I_1 chi_bar_4 */
            results.add({ this->I1_A1_3pt_chi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),        "A_1: I_1^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I1_A1_3pt_chi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),        "A_1: I_1^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I1_A1_3pt_chi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),        "A_1: I_1^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I1_A1_3pt_chi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),        "A_1: I_1^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 chi_bar_4 */
            results.add({ this->I2_A1_3pt_chi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),        "A_1: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_chi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),        "A_1: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_chi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),        "A_1: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_chi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),        "A_1: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 chi_bar_4 */
            results.add({ this->I3_A1_3pt_chi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),        "A_1: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A1_3pt_chi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),        "A_1: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_A1_3pt_chi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),        "A_1: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A1_3pt_chi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),        "A_1: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A chi_bar_4 */
            results.add({ this->I3d1A_A1_3pt_chi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),     "A_1: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A1_3pt_chi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),     "A_1: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A1_3pt_chi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),     "A_1: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A1_3pt_chi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),     "A_1: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B chi_bar_4 */
            results.add({ this->I3d1B_A1_3pt_chi_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 5.0),          "A_1: I_3d1B^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_A1_3pt_chi_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 5.0),          "A_1: I_3d1B^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C chi_bar_4 */
            results.add({ this->I3d1C_A1_3pt_chi_bar_4(this->sigma(s0_0_A1(), 5.0), 0.1, 5.0),          "A_1: I_3d1C^{3pt,chi_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_A1_3pt_chi_bar_4(this->sigma(s0_0_A1(), 5.0), 0.5, 5.0),          "A_1: I_3d1C^{3pt,chi_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 chi_bar_bar_4 */
            results.add({ this->I2_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),    "A_1: I_2^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),    "A_1: I_2^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),    "A_1: I_2^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),    "A_1: I_2^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 chi_bar_bar_4 */
            results.add({ this->I3_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),    "A_1: I_3^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),    "A_1: I_3^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),    "A_1: I_3^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),    "A_1: I_3^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A chi_bar_bar_4 */
            results.add({ this->I3d1A_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0), "A_1: I_3d1A^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0), "A_1: I_3d1A^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0), "A_1: I_3d1A^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0), "A_1: I_3d1A^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B chi_bar_bar_4 */
            results.add({ this->I3d1B_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 5.0),      "A_1: I_3d1B^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 5.0),      "A_1: I_3d1B^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C chi_bar_bar_4 */
            results.add({ this->I3d1C_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 0.1, 5.0),      "A_1: I_3d1C^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 0.5, 5.0),      "A_1: I_3d1C^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4 chi_bar_bar_4 */
            results.add({ this->I4_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0),    "A_1: I_4^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0),    "A_1: I_4^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0),    "A_1: I_4^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0),    "A_1: I_4^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1A chi_bar_bar_4 */
            results.add({ this->I4d1A_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0), "A_1: I_4d1A^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0), "A_1: I_4d1A^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0), "A_1: I_4d1A^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0), "A_1: I_4d1A^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1B chi_bar_bar_4 */
            results.add({ this->I4d1B_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 5.0),      "A_1: I_4d1B^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d1B_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 5.0),      "A_1: I_4d1B^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d1C chi_bar_bar_4 */
            results.add({ this->I4d1C_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 0.1, 5.0),      "A_1: I_4d1C^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1C_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 0.5, 5.0),      "A_1: I_4d1C^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2A chi_bar_bar_4 */
            results.add({ this->I4d2A_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.1, 5.0), "A_1: I_4d2A^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 0.5, 5.0), "A_1: I_4d2A^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.1, 5.0), "A_1: I_4d2A^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 0.5, 5.0), "A_1: I_4d2A^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2B chi_bar_bar_4 */
            results.add({ this->I4d2B_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 1.0, 5.0),      "A_1: I_4d2B^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d2B_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 3.0, 5.0),      "A_1: I_4d2B^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d2C chi_bar_bar_4 */
            results.add({ this->I4d2C_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 0.1, 5.0),      "A_1: I_4d2C^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2C_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 0.5, 5.0),      "A_1: I_4d2C^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2D chi_bar_bar_4 */
            results.add({ this->I4d2D_A1_3pt_chi_bar_bar_4(this->sigma(s0_0_A1(), 5.0), 5.0),           "A_1: I_4d2D^{3pt,chi_bar_bar_4}(sigma=sigma_0, q2=5.0 GeV^2)"});

            /* A_2 */

            /* 2 particle */

            /* I_1 phi_+ */
            results.add({ this->I1_A2_2pt_phi_p(0.04, -5.0), "A_2: I_1^{2pt,phi_+}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I1_A2_2pt_phi_p(0.04,  0.0), "A_2: I_1^{2pt,phi_+}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I1_A2_2pt_phi_p(0.04, +5.0), "A_2: I_1^{2pt,phi_+}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I1_A2_2pt_phi_p(0.08, -5.0), "A_2: I_1^{2pt,phi_+}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I1_A2_2pt_phi_p(0.08,  0.0), "A_2: I_1^{2pt,phi_+}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I1_A2_2pt_phi_p(0.08, +5.0), "A_2: I_1^{2pt,phi_+}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2 phi_bar */
            results.add({ this->I2_A2_2pt_phi_bar(0.04, -5.0), "A_2: I_2^{2pt,phi_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_A2_2pt_phi_bar(0.04,  0.0), "A_2: I_2^{2pt,phi_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_A2_2pt_phi_bar(0.04, +5.0), "A_2: I_2^{2pt,phi_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2_A2_2pt_phi_bar(0.08, -5.0), "A_2: I_2^{2pt,phi_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_A2_2pt_phi_bar(0.08,  0.0), "A_2: I_2^{2pt,phi_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_A2_2pt_phi_bar(0.08, +5.0), "A_2: I_2^{2pt,phi_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2d1 phi_bar */
            results.add({ this->I2d1_A2_2pt_phi_bar(0.04, -5.0), "A_2: I_2d1^{2pt,phi_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2d1_A2_2pt_phi_bar(0.04,  0.0), "A_2: I_2d1^{2pt,phi_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2d1_A2_2pt_phi_bar(0.04, +5.0), "A_2: I_2d1^{2pt,phi_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2d1_A2_2pt_phi_bar(0.08, -5.0), "A_2: I_2d1^{2pt,phi_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2d1_A2_2pt_phi_bar(0.08,  0.0), "A_2: I_2d1^{2pt,phi_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2d1_A2_2pt_phi_bar(0.08, +5.0), "A_2: I_2d1^{2pt,phi_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2 g_+ */
            results.add({ this->I2_A2_2pt_g_p(0.04, -5.0), "A_2: I_2^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_A2_2pt_g_p(0.04,  0.0), "A_2: I_2^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_A2_2pt_g_p(0.04, +5.0), "A_2: I_2^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2_A2_2pt_g_p(0.08, -5.0), "A_2: I_2^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_A2_2pt_g_p(0.08,  0.0), "A_2: I_2^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_A2_2pt_g_p(0.08, +5.0), "A_2: I_2^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2d1 g_+ */
            results.add({ this->I2d1_A2_2pt_g_p(0.04, -5.0), "A_2: I_2d1^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2d1_A2_2pt_g_p(0.04,  0.0), "A_2: I_2d1^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2d1_A2_2pt_g_p(0.04, +5.0), "A_2: I_2d1^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2d1_A2_2pt_g_p(0.08, -5.0), "A_2: I_2d1^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2d1_A2_2pt_g_p(0.08,  0.0), "A_2: I_2d1^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2d1_A2_2pt_g_p(0.08, +5.0), "A_2: I_2d1^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3 g_+ */
            results.add({ this->I3_A2_2pt_g_p(0.04, -5.0), "A_2: I_3^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3_A2_2pt_g_p(0.04,  0.0), "A_2: I_3^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3_A2_2pt_g_p(0.04, +5.0), "A_2: I_3^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3_A2_2pt_g_p(0.08, -5.0), "A_2: I_3^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3_A2_2pt_g_p(0.08,  0.0), "A_2: I_3^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3_A2_2pt_g_p(0.08, +5.0), "A_2: I_3^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3d1 g_+ */
            results.add({ this->I3d1_A2_2pt_g_p(0.04, -5.0), "A_2: I_3d1^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d1_A2_2pt_g_p(0.04,  0.0), "A_2: I_3d1^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d1_A2_2pt_g_p(0.04, +5.0), "A_2: I_3d1^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3d1_A2_2pt_g_p(0.08, -5.0), "A_2: I_3d1^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d1_A2_2pt_g_p(0.08,  0.0), "A_2: I_3d1^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d1_A2_2pt_g_p(0.08, +5.0), "A_2: I_3d1^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3d2 g_+ */
            results.add({ this->I3d2_A2_2pt_g_p(0.04, -5.0), "A_2: I_3d2^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d2_A2_2pt_g_p(0.04,  0.0), "A_2: I_3d2^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d2_A2_2pt_g_p(0.04, +5.0), "A_2: I_3d2^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3d2_A2_2pt_g_p(0.08, -5.0), "A_2: I_3d2^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d2_A2_2pt_g_p(0.08,  0.0), "A_2: I_3d2^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d2_A2_2pt_g_p(0.08, +5.0), "A_2: I_3d2^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3 g_bar */
            results.add({ this->I3_A2_2pt_g_bar(0.04, -5.0), "A_2: I_3^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3_A2_2pt_g_bar(0.04,  0.0), "A_2: I_3^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3_A2_2pt_g_bar(0.04, +5.0), "A_2: I_3^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3_A2_2pt_g_bar(0.08, -5.0), "A_2: I_3^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3_A2_2pt_g_bar(0.08,  0.0), "A_2: I_3^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3_A2_2pt_g_bar(0.08, +5.0), "A_2: I_3^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3d1 g_bar */
            results.add({ this->I3d1_A2_2pt_g_bar(0.04, -5.0), "A_2: I_3d1^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d1_A2_2pt_g_bar(0.04,  0.0), "A_2: I_3d1^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d1_A2_2pt_g_bar(0.04, +5.0), "A_2: I_3d1^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3d1_A2_2pt_g_bar(0.08, -5.0), "A_2: I_3d1^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d1_A2_2pt_g_bar(0.08,  0.0), "A_2: I_3d1^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d1_A2_2pt_g_bar(0.08, +5.0), "A_2: I_3d1^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3d2 g_bar */
            results.add({ this->I3d2_A2_2pt_g_bar(0.04, -5.0), "A_2: I_3d2^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d2_A2_2pt_g_bar(0.04,  0.0), "A_2: I_3d2^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d2_A2_2pt_g_bar(0.04, +5.0), "A_2: I_3d2^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3d2_A2_2pt_g_bar(0.08, -5.0), "A_2: I_3d2^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d2_A2_2pt_g_bar(0.08,  0.0), "A_2: I_3d2^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d2_A2_2pt_g_bar(0.08, +5.0), "A_2: I_3d2^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_4 g_bar */
            results.add({ this->I4_A2_2pt_g_bar(0.04, -5.0), "A_2: I_4^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I4_A2_2pt_g_bar(0.04,  0.0), "A_2: I_4^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I4_A2_2pt_g_bar(0.04, +5.0), "A_2: I_4^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I4_A2_2pt_g_bar(0.08, -5.0), "A_2: I_4^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I4_A2_2pt_g_bar(0.08,  0.0), "A_2: I_4^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I4_A2_2pt_g_bar(0.08, +5.0), "A_2: I_4^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_4d1 g_bar */
            results.add({ this->I4d1_A2_2pt_g_bar(0.04, -5.0), "A_2: I_4d1^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d1_A2_2pt_g_bar(0.04,  0.0), "A_2: I_4d1^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d1_A2_2pt_g_bar(0.04, +5.0), "A_2: I_4d1^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I4d1_A2_2pt_g_bar(0.08, -5.0), "A_2: I_4d1^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d1_A2_2pt_g_bar(0.08,  0.0), "A_2: I_4d1^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d1_A2_2pt_g_bar(0.08, +5.0), "A_2: I_4d1^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_4d2 g_bar */
            results.add({ this->I4d2_A2_2pt_g_bar(0.04, -5.0), "A_2: I_4d2^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d2_A2_2pt_g_bar(0.04,  0.0), "A_2: I_4d2^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d2_A2_2pt_g_bar(0.04, +5.0), "A_2: I_4d2^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I4d2_A2_2pt_g_bar(0.08, -5.0), "A_2: I_4d2^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d2_A2_2pt_g_bar(0.08,  0.0), "A_2: I_4d2^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d2_A2_2pt_g_bar(0.08, +5.0), "A_2: I_4d2^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_4d3 g_bar */
            results.add({ this->I4d3_A2_2pt_g_bar(0.04, -5.0), "A_2: I_4d3^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d3_A2_2pt_g_bar(0.04,  0.0), "A_2: I_4d3^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d3_A2_2pt_g_bar(0.04, +5.0), "A_2: I_4d3^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I4d3_A2_2pt_g_bar(0.08, -5.0), "A_2: I_4d3^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d3_A2_2pt_g_bar(0.08,  0.0), "A_2: I_4d3^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d3_A2_2pt_g_bar(0.08, +5.0), "A_2: I_4d3^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* 3 particle */

            /* I_2 phi_3 */
            results.add({ this->I2_A2_3pt_phi_3(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0),            "A_2: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A2_3pt_phi_3(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0),            "A_2: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_A2_3pt_phi_3(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0),            "A_2: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A2_3pt_phi_3(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0),            "A_2: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 phi_bar_3 */
            results.add({ this->I2_A2_3pt_phi_bar_3(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0),        "A_2: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A2_3pt_phi_bar_3(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0),        "A_2: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_A2_3pt_phi_bar_3(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0),        "A_2: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A2_3pt_phi_bar_3(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0),        "A_2: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 phi_bar_3 */
            results.add({ this->I3_A2_3pt_phi_bar_3(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0),        "A_2: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A2_3pt_phi_bar_3(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0),        "A_2: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_A2_3pt_phi_bar_3(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0),        "A_2: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A2_3pt_phi_bar_3(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0),        "A_2: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A phi_bar_3 */
            results.add({ this->I3d1A_A2_3pt_phi_bar_3(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0),     "A_2: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A2_3pt_phi_bar_3(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0),     "A_2: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A2_3pt_phi_bar_3(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0),     "A_2: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A2_3pt_phi_bar_3(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0),     "A_2: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B phi_bar_3 */
            results.add({ this->I3d1B_A2_3pt_phi_bar_3(this->sigma(s0_0_A2(), 5.0), 1.0, 5.0),          "A_2: I_3d1B^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_A2_3pt_phi_bar_3(this->sigma(s0_0_A2(), 5.0), 3.0, 5.0),          "A_2: I_3d1B^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C phi_bar_3 */
            results.add({ this->I3d1C_A2_3pt_phi_bar_3(this->sigma(s0_0_A2(), 5.0), 0.1, 5.0),          "A_2: I_3d1C^{3pt,phi_bar_3}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_A2_3pt_phi_bar_3(this->sigma(s0_0_A2(), 5.0), 0.5, 5.0),          "A_2: I_3d1C^{3pt,phi_bar_3}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4 phi_bar_bar_3 */
            results.add({ this->I4_A2_3pt_phi_bar_bar_3(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0),    "A_2: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_A2_3pt_phi_bar_bar_3(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0),    "A_2: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4_A2_3pt_phi_bar_bar_3(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0),    "A_2: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_A2_3pt_phi_bar_bar_3(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0),    "A_2: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1A phi_bar_bar_3 */
            results.add({ this->I4d1A_A2_3pt_phi_bar_bar_3(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0), "A_2: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A2_3pt_phi_bar_bar_3(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0), "A_2: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A2_3pt_phi_bar_bar_3(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0), "A_2: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A2_3pt_phi_bar_bar_3(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0), "A_2: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1B phi_bar_bar_3 */
            results.add({ this->I4d1B_A2_3pt_phi_bar_bar_3(this->sigma(s0_0_A2(), 5.0), 1.0, 5.0),      "A_2: I_4d1B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d1B_A2_3pt_phi_bar_bar_3(this->sigma(s0_0_A2(), 5.0), 3.0, 5.0),      "A_2: I_4d1B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d1C phi_bar_bar_3 */
            results.add({ this->I4d1C_A2_3pt_phi_bar_bar_3(this->sigma(s0_0_A2(), 5.0), 0.1, 5.0),      "A_2: I_4d1C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1C_A2_3pt_phi_bar_bar_3(this->sigma(s0_0_A2(), 5.0), 0.5, 5.0),      "A_2: I_4d1C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2A phi_bar_bar_3 */
            results.add({ this->I4d2A_A2_3pt_phi_bar_bar_3(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0), "A_2: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A2_3pt_phi_bar_bar_3(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0), "A_2: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A2_3pt_phi_bar_bar_3(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0), "A_2: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A2_3pt_phi_bar_bar_3(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0), "A_2: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2B phi_bar_bar_3 */
            results.add({ this->I4d2B_A2_3pt_phi_bar_bar_3(this->sigma(s0_0_A2(), 5.0), 1.0, 5.0),      "A_2: I_4d2B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d2B_A2_3pt_phi_bar_bar_3(this->sigma(s0_0_A2(), 5.0), 3.0, 5.0),      "A_2: I_4d2B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d2C phi_bar_bar_3 */
            results.add({ this->I4d2C_A2_3pt_phi_bar_bar_3(this->sigma(s0_0_A2(), 5.0), 0.1, 5.0),      "A_2: I_4d2C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2C_A2_3pt_phi_bar_bar_3(this->sigma(s0_0_A2(), 5.0), 0.5, 5.0),      "A_2: I_4d2C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2D phi_bar_bar_3 */
            results.add({ this->I4d2D_A2_3pt_phi_bar_bar_3(this->sigma(s0_0_A2(), 5.0), 5.0),           "A_2: I_4d2D^{3pt,phi_bar_bar_3}(sigma=sigma_0, q2=5.0 GeV^2)"});

            /* I_2 phi_4 */
            results.add({ this->I2_A2_3pt_phi_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0),            "A_2: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A2_3pt_phi_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0),            "A_2: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_A2_3pt_phi_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0),            "A_2: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A2_3pt_phi_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0),            "A_2: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 phi_bar_4 */
            results.add({ this->I2_A2_3pt_phi_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0),        "A_2: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A2_3pt_phi_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0),        "A_2: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_A2_3pt_phi_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0),        "A_2: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A2_3pt_phi_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0),        "A_2: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 phi_bar_4 */
            results.add({ this->I3_A2_3pt_phi_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0),        "A_2: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A2_3pt_phi_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0),        "A_2: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_A2_3pt_phi_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0),        "A_2: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A2_3pt_phi_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0),        "A_2: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A phi_bar_4 */
            results.add({ this->I3d1A_A2_3pt_phi_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0),     "A_2: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A2_3pt_phi_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0),     "A_2: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A2_3pt_phi_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0),     "A_2: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A2_3pt_phi_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0),     "A_2: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B phi_bar_4 */
            results.add({ this->I3d1B_A2_3pt_phi_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 5.0),          "A_2: I_3d1B^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_A2_3pt_phi_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 5.0),          "A_2: I_3d1B^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C phi_bar_4 */
            results.add({ this->I3d1C_A2_3pt_phi_bar_4(this->sigma(s0_0_A2(), 5.0), 0.1, 5.0),          "A_2: I_3d1C^{3pt,phi_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_A2_3pt_phi_bar_4(this->sigma(s0_0_A2(), 5.0), 0.5, 5.0),          "A_2: I_3d1C^{3pt,phi_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 phi_bar_bar_4 */
            results.add({ this->I3_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0),    "A_2: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0),    "A_2: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0),    "A_2: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0),    "A_2: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A phi_bar_bar_4 */
            results.add({ this->I3d1A_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0), "A_2: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0), "A_2: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0), "A_2: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0), "A_2: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B phi_bar_bar_4 */
            results.add({ this->I3d1B_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 5.0),      "A_2: I_3d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 5.0),      "A_2: I_3d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C phi_bar_bar_4 */
            results.add({ this->I3d1C_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 0.1, 5.0),      "A_2: I_3d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 0.5, 5.0),      "A_2: I_3d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4 phi_bar_bar_4 */
            results.add({ this->I4_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0),    "A_2: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0),    "A_2: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0),    "A_2: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0),    "A_2: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1A phi_bar_bar_4 */
            results.add({ this->I4d1A_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0), "A_2: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0), "A_2: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0), "A_2: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0), "A_2: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1B phi_bar_bar_4 */
            results.add({ this->I4d1B_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 5.0),      "A_2: I_4d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d1B_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 5.0),      "A_2: I_4d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d1C phi_bar_bar_4 */
            results.add({ this->I4d1C_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 0.1, 5.0),      "A_2: I_4d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1C_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 0.5, 5.0),      "A_2: I_4d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2A phi_bar_bar_4 */
            results.add({ this->I4d2A_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0), "A_2: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0), "A_2: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0), "A_2: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0), "A_2: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2B phi_bar_bar_4 */
            results.add({ this->I4d2B_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 5.0),      "A_2: I_4d2B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d2B_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 5.0),      "A_2: I_4d2B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d2C phi_bar_bar_4 */
            results.add({ this->I4d2C_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 0.1, 5.0),      "A_2: I_4d2C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2C_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 0.5, 5.0),      "A_2: I_4d2C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2D phi_bar_bar_4 */
            results.add({ this->I4d2D_A2_3pt_phi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 5.0),           "A_2: I_4d2D^{3pt,phi_bar_bar_4}(sigma=sigma_0, q2=5.0 GeV^2)"});

            /* I_2 psi_bar_4 */
            results.add({ this->I2_A2_3pt_psi_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0),        "A_2: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A2_3pt_psi_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0),        "A_2: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_A2_3pt_psi_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0),        "A_2: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A2_3pt_psi_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0),        "A_2: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 psi_bar_4 */
            results.add({ this->I3_A2_3pt_psi_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0),        "A_2: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A2_3pt_psi_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0),        "A_2: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_A2_3pt_psi_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0),        "A_2: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A2_3pt_psi_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0),        "A_2: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A psi_bar_4 */
            results.add({ this->I3d1A_A2_3pt_psi_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0),     "A_2: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A2_3pt_psi_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0),     "A_2: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A2_3pt_psi_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0),     "A_2: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A2_3pt_psi_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0),     "A_2: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B psi_bar_4 */
            results.add({ this->I3d1B_A2_3pt_psi_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 5.0),          "A_2: I_3d1B^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_A2_3pt_psi_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 5.0),          "A_2: I_3d1B^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C psi_bar_4 */
            results.add({ this->I3d1C_A2_3pt_psi_bar_4(this->sigma(s0_0_A2(), 5.0), 0.1, 5.0),          "A_2: I_3d1C^{3pt,psi_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_A2_3pt_psi_bar_4(this->sigma(s0_0_A2(), 5.0), 0.5, 5.0),          "A_2: I_3d1C^{3pt,psi_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 psi_bar_bar_4 */
            results.add({ this->I3_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0),    "A_2: I_3^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0),    "A_2: I_3^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0),    "A_2: I_3^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0),    "A_2: I_3^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A psi_bar_bar_4 */
            results.add({ this->I3d1A_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0), "A_2: I_3d1A^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0), "A_2: I_3d1A^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0), "A_2: I_3d1A^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0), "A_2: I_3d1A^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B psi_bar_bar_4 */
            results.add({ this->I3d1B_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 5.0),      "A_2: I_3d1B^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 5.0),      "A_2: I_3d1B^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C psi_bar_bar_4 */
            results.add({ this->I3d1C_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 0.1, 5.0),      "A_2: I_3d1C^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 0.5, 5.0),      "A_2: I_3d1C^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4 psi_bar_bar_4 */
            results.add({ this->I4_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0),    "A_2: I_4^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0),    "A_2: I_4^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0),    "A_2: I_4^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0),    "A_2: I_4^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1A psi_bar_bar_4 */
            results.add({ this->I4d1A_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0), "A_2: I_4d1A^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0), "A_2: I_4d1A^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0), "A_2: I_4d1A^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0), "A_2: I_4d1A^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1B psi_bar_bar_4 */
            results.add({ this->I4d1B_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 5.0),      "A_2: I_4d1B^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d1B_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 5.0),      "A_2: I_4d1B^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d1C psi_bar_bar_4 */
            results.add({ this->I4d1C_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 0.1, 5.0),      "A_2: I_4d1C^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1C_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 0.5, 5.0),      "A_2: I_4d1C^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2A psi_bar_bar_4 */
            results.add({ this->I4d2A_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0), "A_2: I_4d2A^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0), "A_2: I_4d2A^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0), "A_2: I_4d2A^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0), "A_2: I_4d2A^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2B psi_bar_bar_4 */
            results.add({ this->I4d2B_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 5.0),      "A_2: I_4d2B^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d2B_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 5.0),      "A_2: I_4d2B^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d2C psi_bar_bar_4 */
            results.add({ this->I4d2C_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 0.1, 5.0),      "A_2: I_4d2C^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2C_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 0.5, 5.0),      "A_2: I_4d2C^{3pt,psi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2D psi_bar_bar_4 */
            results.add({ this->I4d2D_A2_3pt_psi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 5.0),           "A_2: I_4d2D^{3pt,psi_bar_bar_4}(sigma=sigma_0, q2=5.0 GeV^2)"});

            /* I_2 chi_bar_4 */
            results.add({ this->I2_A2_3pt_chi_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0),        "A_2: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A2_3pt_chi_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0),        "A_2: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_A2_3pt_chi_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0),        "A_2: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A2_3pt_chi_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0),        "A_2: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 chi_bar_4 */
            results.add({ this->I3_A2_3pt_chi_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0),        "A_2: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A2_3pt_chi_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0),        "A_2: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_A2_3pt_chi_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0),        "A_2: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A2_3pt_chi_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0),        "A_2: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A chi_bar_4 */
            results.add({ this->I3d1A_A2_3pt_chi_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0),     "A_2: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A2_3pt_chi_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0),     "A_2: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A2_3pt_chi_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0),     "A_2: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A2_3pt_chi_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0),     "A_2: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B chi_bar_4 */
            results.add({ this->I3d1B_A2_3pt_chi_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 5.0),          "A_2: I_3d1B^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_A2_3pt_chi_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 5.0),          "A_2: I_3d1B^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C chi_bar_4 */
            results.add({ this->I3d1C_A2_3pt_chi_bar_4(this->sigma(s0_0_A2(), 5.0), 0.1, 5.0),          "A_2: I_3d1C^{3pt,chi_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_A2_3pt_chi_bar_4(this->sigma(s0_0_A2(), 5.0), 0.5, 5.0),          "A_2: I_3d1C^{3pt,chi_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 chi_bar_bar_4 */
            results.add({ this->I3_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0),    "A_2: I_3^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0),    "A_2: I_3^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0),    "A_2: I_3^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0),    "A_2: I_3^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A chi_bar_bar_4 */
            results.add({ this->I3d1A_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0), "A_2: I_3d1A^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0), "A_2: I_3d1A^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0), "A_2: I_3d1A^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0), "A_2: I_3d1A^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B chi_bar_bar_4 */
            results.add({ this->I3d1B_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 5.0),      "A_2: I_3d1B^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 5.0),      "A_2: I_3d1B^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C chi_bar_bar_4 */
            results.add({ this->I3d1C_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 0.1, 5.0),      "A_2: I_3d1C^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 0.5, 5.0),      "A_2: I_3d1C^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4 chi_bar_bar_4 */
            results.add({ this->I4_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0),    "A_2: I_4^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0),    "A_2: I_4^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0),    "A_2: I_4^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0),    "A_2: I_4^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1A chi_bar_bar_4 */
            results.add({ this->I4d1A_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0), "A_2: I_4d1A^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0), "A_2: I_4d1A^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0), "A_2: I_4d1A^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0), "A_2: I_4d1A^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1B chi_bar_bar_4 */
            results.add({ this->I4d1B_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 5.0),      "A_2: I_4d1B^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d1B_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 5.0),      "A_2: I_4d1B^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d1C chi_bar_bar_4 */
            results.add({ this->I4d1C_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 0.1, 5.0),      "A_2: I_4d1C^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1C_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 0.5, 5.0),      "A_2: I_4d1C^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2A chi_bar_bar_4 */
            results.add({ this->I4d2A_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.1, 5.0), "A_2: I_4d2A^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 0.5, 5.0), "A_2: I_4d2A^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.1, 5.0), "A_2: I_4d2A^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 0.5, 5.0), "A_2: I_4d2A^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2B chi_bar_bar_4 */
            results.add({ this->I4d2B_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 1.0, 5.0),      "A_2: I_4d2B^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d2B_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 3.0, 5.0),      "A_2: I_4d2B^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d2C chi_bar_bar_4 */
            results.add({ this->I4d2C_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 0.1, 5.0),      "A_2: I_4d2C^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2C_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 0.5, 5.0),      "A_2: I_4d2C^{3pt,chi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2D chi_bar_bar_4 */
            results.add({ this->I4d2D_A2_3pt_chi_bar_bar_4(this->sigma(s0_0_A2(), 5.0), 5.0),           "A_2: I_4d2D^{3pt,chi_bar_bar_4}(sigma=sigma_0, q2=5.0 GeV^2)"});

            /* A_30 */

            /* 2 particle */

            /* I_1 phi_+ */
            results.add({ this->I1_A30_2pt_phi_p(0.04, -5.0), "A_30: I_1^{2pt,phi_+}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I1_A30_2pt_phi_p(0.04,  0.0), "A_30: I_1^{2pt,phi_+}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I1_A30_2pt_phi_p(0.04, +5.0), "A_30: I_1^{2pt,phi_+}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I1_A30_2pt_phi_p(0.08, -5.0), "A_30: I_1^{2pt,phi_+}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I1_A30_2pt_phi_p(0.08,  0.0), "A_30: I_1^{2pt,phi_+}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I1_A30_2pt_phi_p(0.08, +5.0), "A_30: I_1^{2pt,phi_+}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2 phi_bar */
            results.add({ this->I2_A30_2pt_phi_bar(0.04, -5.0), "A_30: I_2^{2pt,phi_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_A30_2pt_phi_bar(0.04,  0.0), "A_30: I_2^{2pt,phi_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_A30_2pt_phi_bar(0.04, +5.0), "A_30: I_2^{2pt,phi_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2_A30_2pt_phi_bar(0.08, -5.0), "A_30: I_2^{2pt,phi_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_A30_2pt_phi_bar(0.08,  0.0), "A_30: I_2^{2pt,phi_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_A30_2pt_phi_bar(0.08, +5.0), "A_30: I_2^{2pt,phi_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2d1 phi_bar */
            results.add({ this->I2d1_A30_2pt_phi_bar(0.04, -5.0), "A_30: I_2d1^{2pt,phi_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2d1_A30_2pt_phi_bar(0.04,  0.0), "A_30: I_2d1^{2pt,phi_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2d1_A30_2pt_phi_bar(0.04, +5.0), "A_30: I_2d1^{2pt,phi_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2d1_A30_2pt_phi_bar(0.08, -5.0), "A_30: I_2d1^{2pt,phi_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2d1_A30_2pt_phi_bar(0.08,  0.0), "A_30: I_2d1^{2pt,phi_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2d1_A30_2pt_phi_bar(0.08, +5.0), "A_30: I_2d1^{2pt,phi_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2 g_+ */
            results.add({ this->I2_A30_2pt_g_p(0.04, -5.0), "A_30: I_2^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_A30_2pt_g_p(0.04,  0.0), "A_30: I_2^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_A30_2pt_g_p(0.04, +5.0), "A_30: I_2^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2_A30_2pt_g_p(0.08, -5.0), "A_30: I_2^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_A30_2pt_g_p(0.08,  0.0), "A_30: I_2^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_A30_2pt_g_p(0.08, +5.0), "A_30: I_2^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2d1 g_+ */
            results.add({ this->I2d1_A30_2pt_g_p(0.04, -5.0), "A_30: I_2d1^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2d1_A30_2pt_g_p(0.04,  0.0), "A_30: I_2d1^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2d1_A30_2pt_g_p(0.04, +5.0), "A_30: I_2d1^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2d1_A30_2pt_g_p(0.08, -5.0), "A_30: I_2d1^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2d1_A30_2pt_g_p(0.08,  0.0), "A_30: I_2d1^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2d1_A30_2pt_g_p(0.08, +5.0), "A_30: I_2d1^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3 g_+ */
            results.add({ this->I3_A30_2pt_g_p(0.04, -5.0), "A_30: I_3^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3_A30_2pt_g_p(0.04,  0.0), "A_30: I_3^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3_A30_2pt_g_p(0.04, +5.0), "A_30: I_3^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3_A30_2pt_g_p(0.08, -5.0), "A_30: I_3^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3_A30_2pt_g_p(0.08,  0.0), "A_30: I_3^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3_A30_2pt_g_p(0.08, +5.0), "A_30: I_3^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3d1 g_+ */
            results.add({ this->I3d1_A30_2pt_g_p(0.04, -5.0), "A_30: I_3d1^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d1_A30_2pt_g_p(0.04,  0.0), "A_30: I_3d1^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d1_A30_2pt_g_p(0.04, +5.0), "A_30: I_3d1^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3d1_A30_2pt_g_p(0.08, -5.0), "A_30: I_3d1^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d1_A30_2pt_g_p(0.08,  0.0), "A_30: I_3d1^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d1_A30_2pt_g_p(0.08, +5.0), "A_30: I_3d1^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3d2 g_+ */
            results.add({ this->I3d2_A30_2pt_g_p(0.04, -5.0), "A_30: I_3d2^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d2_A30_2pt_g_p(0.04,  0.0), "A_30: I_3d2^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d2_A30_2pt_g_p(0.04, +5.0), "A_30: I_3d2^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3d2_A30_2pt_g_p(0.08, -5.0), "A_30: I_3d2^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d2_A30_2pt_g_p(0.08,  0.0), "A_30: I_3d2^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d2_A30_2pt_g_p(0.08, +5.0), "A_30: I_3d2^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3 g_bar */
            results.add({ this->I3_A30_2pt_g_bar(0.04, -5.0), "A_30: I_3^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3_A30_2pt_g_bar(0.04,  0.0), "A_30: I_3^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3_A30_2pt_g_bar(0.04, +5.0), "A_30: I_3^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3_A30_2pt_g_bar(0.08, -5.0), "A_30: I_3^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3_A30_2pt_g_bar(0.08,  0.0), "A_30: I_3^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3_A30_2pt_g_bar(0.08, +5.0), "A_30: I_3^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3d1 g_bar */
            results.add({ this->I3d1_A30_2pt_g_bar(0.04, -5.0), "A_30: I_3d1^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d1_A30_2pt_g_bar(0.04,  0.0), "A_30: I_3d1^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d1_A30_2pt_g_bar(0.04, +5.0), "A_30: I_3d1^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3d1_A30_2pt_g_bar(0.08, -5.0), "A_30: I_3d1^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d1_A30_2pt_g_bar(0.08,  0.0), "A_30: I_3d1^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d1_A30_2pt_g_bar(0.08, +5.0), "A_30: I_3d1^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3d2 g_bar */
            results.add({ this->I3d2_A30_2pt_g_bar(0.04, -5.0), "A_30: I_3d2^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d2_A30_2pt_g_bar(0.04,  0.0), "A_30: I_3d2^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d2_A30_2pt_g_bar(0.04, +5.0), "A_30: I_3d2^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3d2_A30_2pt_g_bar(0.08, -5.0), "A_30: I_3d2^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d2_A30_2pt_g_bar(0.08,  0.0), "A_30: I_3d2^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d2_A30_2pt_g_bar(0.08, +5.0), "A_30: I_3d2^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_4 g_bar */
            results.add({ this->I4_A30_2pt_g_bar(0.04, -5.0), "A_30: I_4^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I4_A30_2pt_g_bar(0.04,  0.0), "A_30: I_4^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I4_A30_2pt_g_bar(0.04, +5.0), "A_30: I_4^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I4_A30_2pt_g_bar(0.08, -5.0), "A_30: I_4^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I4_A30_2pt_g_bar(0.08,  0.0), "A_30: I_4^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I4_A30_2pt_g_bar(0.08, +5.0), "A_30: I_4^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_4d1 g_bar */
            results.add({ this->I4d1_A30_2pt_g_bar(0.04, -5.0), "A_30: I_4d1^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d1_A30_2pt_g_bar(0.04,  0.0), "A_30: I_4d1^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d1_A30_2pt_g_bar(0.04, +5.0), "A_30: I_4d1^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I4d1_A30_2pt_g_bar(0.08, -5.0), "A_30: I_4d1^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d1_A30_2pt_g_bar(0.08,  0.0), "A_30: I_4d1^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d1_A30_2pt_g_bar(0.08, +5.0), "A_30: I_4d1^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_4d2 g_bar */
            results.add({ this->I4d2_A30_2pt_g_bar(0.04, -5.0), "A_30: I_4d2^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d2_A30_2pt_g_bar(0.04,  0.0), "A_30: I_4d2^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d2_A30_2pt_g_bar(0.04, +5.0), "A_30: I_4d2^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I4d2_A30_2pt_g_bar(0.08, -5.0), "A_30: I_4d2^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d2_A30_2pt_g_bar(0.08,  0.0), "A_30: I_4d2^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d2_A30_2pt_g_bar(0.08, +5.0), "A_30: I_4d2^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_4d3 g_bar */
            results.add({ this->I4d3_A30_2pt_g_bar(0.04, -5.0), "A_30: I_4d3^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d3_A30_2pt_g_bar(0.04,  0.0), "A_30: I_4d3^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d3_A30_2pt_g_bar(0.04, +5.0), "A_30: I_4d3^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I4d3_A30_2pt_g_bar(0.08, -5.0), "A_30: I_4d3^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d3_A30_2pt_g_bar(0.08,  0.0), "A_30: I_4d3^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d3_A30_2pt_g_bar(0.08, +5.0), "A_30: I_4d3^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* 3 particle */

            /* I_2 phi_3 */
            results.add({ this->I2_A30_3pt_phi_3(this->sigma(s0_0_A30(), 5.0), 1.0, 0.1, 5.0),            "A_30: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A30_3pt_phi_3(this->sigma(s0_0_A30(), 5.0), 1.0, 0.5, 5.0),            "A_30: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_A30_3pt_phi_3(this->sigma(s0_0_A30(), 5.0), 3.0, 0.1, 5.0),            "A_30: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A30_3pt_phi_3(this->sigma(s0_0_A30(), 5.0), 3.0, 0.5, 5.0),            "A_30: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 phi_bar_3 */
            results.add({ this->I2_A30_3pt_phi_bar_3(this->sigma(s0_0_A30(), 5.0), 1.0, 0.1, 5.0),        "A_30: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A30_3pt_phi_bar_3(this->sigma(s0_0_A30(), 5.0), 1.0, 0.5, 5.0),        "A_30: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_A30_3pt_phi_bar_3(this->sigma(s0_0_A30(), 5.0), 3.0, 0.1, 5.0),        "A_30: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A30_3pt_phi_bar_3(this->sigma(s0_0_A30(), 5.0), 3.0, 0.5, 5.0),        "A_30: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 phi_bar_3 */
            results.add({ this->I3_A30_3pt_phi_bar_3(this->sigma(s0_0_A30(), 5.0), 1.0, 0.1, 5.0),        "A_30: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A30_3pt_phi_bar_3(this->sigma(s0_0_A30(), 5.0), 1.0, 0.5, 5.0),        "A_30: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_A30_3pt_phi_bar_3(this->sigma(s0_0_A30(), 5.0), 3.0, 0.1, 5.0),        "A_30: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A30_3pt_phi_bar_3(this->sigma(s0_0_A30(), 5.0), 3.0, 0.5, 5.0),        "A_30: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A phi_bar_3 */
            results.add({ this->I3d1A_A30_3pt_phi_bar_3(this->sigma(s0_0_A30(), 5.0), 1.0, 0.1, 5.0),     "A_30: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A30_3pt_phi_bar_3(this->sigma(s0_0_A30(), 5.0), 1.0, 0.5, 5.0),     "A_30: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A30_3pt_phi_bar_3(this->sigma(s0_0_A30(), 5.0), 3.0, 0.1, 5.0),     "A_30: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A30_3pt_phi_bar_3(this->sigma(s0_0_A30(), 5.0), 3.0, 0.5, 5.0),     "A_30: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B phi_bar_3 */
            results.add({ this->I3d1B_A30_3pt_phi_bar_3(this->sigma(s0_0_A30(), 5.0), 1.0, 5.0),          "A_30: I_3d1B^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_A30_3pt_phi_bar_3(this->sigma(s0_0_A30(), 5.0), 3.0, 5.0),          "A_30: I_3d1B^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C phi_bar_3 */
            results.add({ this->I3d1C_A30_3pt_phi_bar_3(this->sigma(s0_0_A30(), 5.0), 0.1, 5.0),          "A_30: I_3d1C^{3pt,phi_bar_3}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_A30_3pt_phi_bar_3(this->sigma(s0_0_A30(), 5.0), 0.5, 5.0),          "A_30: I_3d1C^{3pt,phi_bar_3}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4 phi_bar_bar_3 */
            results.add({ this->I4_A30_3pt_phi_bar_bar_3(this->sigma(s0_0_A30(), 5.0), 1.0, 0.1, 5.0),    "A_30: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_A30_3pt_phi_bar_bar_3(this->sigma(s0_0_A30(), 5.0), 1.0, 0.5, 5.0),    "A_30: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4_A30_3pt_phi_bar_bar_3(this->sigma(s0_0_A30(), 5.0), 3.0, 0.1, 5.0),    "A_30: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_A30_3pt_phi_bar_bar_3(this->sigma(s0_0_A30(), 5.0), 3.0, 0.5, 5.0),    "A_30: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1A phi_bar_bar_3 */
            results.add({ this->I4d1A_A30_3pt_phi_bar_bar_3(this->sigma(s0_0_A30(), 5.0), 1.0, 0.1, 5.0), "A_30: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A30_3pt_phi_bar_bar_3(this->sigma(s0_0_A30(), 5.0), 1.0, 0.5, 5.0), "A_30: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A30_3pt_phi_bar_bar_3(this->sigma(s0_0_A30(), 5.0), 3.0, 0.1, 5.0), "A_30: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A30_3pt_phi_bar_bar_3(this->sigma(s0_0_A30(), 5.0), 3.0, 0.5, 5.0), "A_30: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1B phi_bar_bar_3 */
            results.add({ this->I4d1B_A30_3pt_phi_bar_bar_3(this->sigma(s0_0_A30(), 5.0), 1.0, 5.0),      "A_30: I_4d1B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d1B_A30_3pt_phi_bar_bar_3(this->sigma(s0_0_A30(), 5.0), 3.0, 5.0),      "A_30: I_4d1B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d1C phi_bar_bar_3 */
            results.add({ this->I4d1C_A30_3pt_phi_bar_bar_3(this->sigma(s0_0_A30(), 5.0), 0.1, 5.0),      "A_30: I_4d1C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1C_A30_3pt_phi_bar_bar_3(this->sigma(s0_0_A30(), 5.0), 0.5, 5.0),      "A_30: I_4d1C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2A phi_bar_bar_3 */
            results.add({ this->I4d2A_A30_3pt_phi_bar_bar_3(this->sigma(s0_0_A30(), 5.0), 1.0, 0.1, 5.0), "A_30: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A30_3pt_phi_bar_bar_3(this->sigma(s0_0_A30(), 5.0), 1.0, 0.5, 5.0), "A_30: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A30_3pt_phi_bar_bar_3(this->sigma(s0_0_A30(), 5.0), 3.0, 0.1, 5.0), "A_30: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A30_3pt_phi_bar_bar_3(this->sigma(s0_0_A30(), 5.0), 3.0, 0.5, 5.0), "A_30: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2B phi_bar_bar_3 */
            results.add({ this->I4d2B_A30_3pt_phi_bar_bar_3(this->sigma(s0_0_A30(), 5.0), 1.0, 5.0),      "A_30: I_4d2B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d2B_A30_3pt_phi_bar_bar_3(this->sigma(s0_0_A30(), 5.0), 3.0, 5.0),      "A_30: I_4d2B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d2C phi_bar_bar_3 */
            results.add({ this->I4d2C_A30_3pt_phi_bar_bar_3(this->sigma(s0_0_A30(), 5.0), 0.1, 5.0),      "A_30: I_4d2C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2C_A30_3pt_phi_bar_bar_3(this->sigma(s0_0_A30(), 5.0), 0.5, 5.0),      "A_30: I_4d2C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2D phi_bar_bar_3 */
            results.add({ this->I4d2D_A30_3pt_phi_bar_bar_3(this->sigma(s0_0_A30(), 5.0), 5.0),           "A_30: I_4d2D^{3pt,phi_bar_bar_3}(sigma=sigma_0, q2=5.0 GeV^2)"});

            /* I_2 phi_4 */
            results.add({ this->I2_A30_3pt_phi_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.1, 5.0),            "A_30: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A30_3pt_phi_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.5, 5.0),            "A_30: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_A30_3pt_phi_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.1, 5.0),            "A_30: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A30_3pt_phi_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.5, 5.0),            "A_30: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 phi_bar_4 */
            results.add({ this->I2_A30_3pt_phi_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.1, 5.0),        "A_30: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A30_3pt_phi_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.5, 5.0),        "A_30: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_A30_3pt_phi_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.1, 5.0),        "A_30: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A30_3pt_phi_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.5, 5.0),        "A_30: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 phi_bar_4 */
            results.add({ this->I3_A30_3pt_phi_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.1, 5.0),        "A_30: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A30_3pt_phi_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.5, 5.0),        "A_30: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_A30_3pt_phi_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.1, 5.0),        "A_30: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A30_3pt_phi_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.5, 5.0),        "A_30: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A phi_bar_4 */
            results.add({ this->I3d1A_A30_3pt_phi_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.1, 5.0),     "A_30: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A30_3pt_phi_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.5, 5.0),     "A_30: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A30_3pt_phi_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.1, 5.0),     "A_30: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A30_3pt_phi_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.5, 5.0),     "A_30: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B phi_bar_4 */
            results.add({ this->I3d1B_A30_3pt_phi_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 5.0),          "A_30: I_3d1B^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_A30_3pt_phi_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 5.0),          "A_30: I_3d1B^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C phi_bar_4 */
            results.add({ this->I3d1C_A30_3pt_phi_bar_4(this->sigma(s0_0_A30(), 5.0), 0.1, 5.0),          "A_30: I_3d1C^{3pt,phi_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_A30_3pt_phi_bar_4(this->sigma(s0_0_A30(), 5.0), 0.5, 5.0),          "A_30: I_3d1C^{3pt,phi_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 phi_bar_bar_4 */
            results.add({ this->I3_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.1, 5.0),    "A_30: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.5, 5.0),    "A_30: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.1, 5.0),    "A_30: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.5, 5.0),    "A_30: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A phi_bar_bar_4 */
            results.add({ this->I3d1A_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.1, 5.0), "A_30: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.5, 5.0), "A_30: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.1, 5.0), "A_30: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.5, 5.0), "A_30: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B phi_bar_bar_4 */
            results.add({ this->I3d1B_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 5.0),      "A_30: I_3d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 5.0),      "A_30: I_3d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C phi_bar_bar_4 */
            results.add({ this->I3d1C_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 0.1, 5.0),      "A_30: I_3d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 0.5, 5.0),      "A_30: I_3d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4 phi_bar_bar_4 */
            results.add({ this->I4_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.1, 5.0),    "A_30: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.5, 5.0),    "A_30: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.1, 5.0),    "A_30: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.5, 5.0),    "A_30: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1A phi_bar_bar_4 */
            results.add({ this->I4d1A_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.1, 5.0), "A_30: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.5, 5.0), "A_30: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.1, 5.0), "A_30: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.5, 5.0), "A_30: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1B phi_bar_bar_4 */
            results.add({ this->I4d1B_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 5.0),      "A_30: I_4d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d1B_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 5.0),      "A_30: I_4d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d1C phi_bar_bar_4 */
            results.add({ this->I4d1C_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 0.1, 5.0),      "A_30: I_4d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1C_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 0.5, 5.0),      "A_30: I_4d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2A phi_bar_bar_4 */
            results.add({ this->I4d2A_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.1, 5.0), "A_30: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.5, 5.0), "A_30: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.1, 5.0), "A_30: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.5, 5.0), "A_30: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2B phi_bar_bar_4 */
            results.add({ this->I4d2B_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 5.0),      "A_30: I_4d2B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d2B_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 5.0),      "A_30: I_4d2B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d2C phi_bar_bar_4 */
            results.add({ this->I4d2C_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 0.1, 5.0),      "A_30: I_4d2C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2C_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 0.5, 5.0),      "A_30: I_4d2C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2D phi_bar_bar_4 */
            results.add({ this->I4d2D_A30_3pt_phi_bar_bar_4(this->sigma(s0_0_A30(), 5.0), 5.0),           "A_30: I_4d2D^{3pt,phi_bar_bar_4}(sigma=sigma_0, q2=5.0 GeV^2)"});

            /* I_2 psi_bar_4 */
            results.add({ this->I2_A30_3pt_psi_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.1, 5.0),        "A_30: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A30_3pt_psi_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.5, 5.0),        "A_30: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_A30_3pt_psi_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.1, 5.0),        "A_30: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A30_3pt_psi_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.5, 5.0),        "A_30: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 psi_bar_4 */
            results.add({ this->I3_A30_3pt_psi_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.1, 5.0),        "A_30: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A30_3pt_psi_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.5, 5.0),        "A_30: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_A30_3pt_psi_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.1, 5.0),        "A_30: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A30_3pt_psi_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.5, 5.0),        "A_30: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A psi_bar_4 */
            results.add({ this->I3d1A_A30_3pt_psi_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.1, 5.0),     "A_30: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A30_3pt_psi_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.5, 5.0),     "A_30: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A30_3pt_psi_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.1, 5.0),     "A_30: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A30_3pt_psi_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.5, 5.0),     "A_30: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B psi_bar_4 */
            results.add({ this->I3d1B_A30_3pt_psi_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 5.0),          "A_30: I_3d1B^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_A30_3pt_psi_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 5.0),          "A_30: I_3d1B^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C psi_bar_4 */
            results.add({ this->I3d1C_A30_3pt_psi_bar_4(this->sigma(s0_0_A30(), 5.0), 0.1, 5.0),          "A_30: I_3d1C^{3pt,psi_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_A30_3pt_psi_bar_4(this->sigma(s0_0_A30(), 5.0), 0.5, 5.0),          "A_30: I_3d1C^{3pt,psi_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 chi_bar_4 */
            results.add({ this->I2_A30_3pt_chi_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.1, 5.0),        "A_30: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A30_3pt_chi_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.5, 5.0),        "A_30: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_A30_3pt_chi_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.1, 5.0),        "A_30: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_A30_3pt_chi_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.5, 5.0),        "A_30: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 chi_bar_4 */
            results.add({ this->I3_A30_3pt_chi_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.1, 5.0),        "A_30: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A30_3pt_chi_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.5, 5.0),        "A_30: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_A30_3pt_chi_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.1, 5.0),        "A_30: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_A30_3pt_chi_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.5, 5.0),        "A_30: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A chi_bar_4 */
            results.add({ this->I3d1A_A30_3pt_chi_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.1, 5.0),     "A_30: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A30_3pt_chi_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 0.5, 5.0),     "A_30: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A30_3pt_chi_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.1, 5.0),     "A_30: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_A30_3pt_chi_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 0.5, 5.0),     "A_30: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B chi_bar_4 */
            results.add({ this->I3d1B_A30_3pt_chi_bar_4(this->sigma(s0_0_A30(), 5.0), 1.0, 5.0),          "A_30: I_3d1B^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_A30_3pt_chi_bar_4(this->sigma(s0_0_A30(), 5.0), 3.0, 5.0),          "A_30: I_3d1B^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C chi_bar_4 */
            results.add({ this->I3d1C_A30_3pt_chi_bar_4(this->sigma(s0_0_A30(), 5.0), 0.1, 5.0),          "A_30: I_3d1C^{3pt,chi_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_A30_3pt_chi_bar_4(this->sigma(s0_0_A30(), 5.0), 0.5, 5.0),          "A_30: I_3d1C^{3pt,chi_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* V */

            /* 2 particle */

            /* I_1 phi_+ */
            results.add({ this->I1_V_2pt_phi_p(0.04, -5.0), "V: I_1^{2pt,phi_+}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I1_V_2pt_phi_p(0.04,  0.0), "V: I_1^{2pt,phi_+}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I1_V_2pt_phi_p(0.04, +5.0), "V: I_1^{2pt,phi_+}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I1_V_2pt_phi_p(0.08, -5.0), "V: I_1^{2pt,phi_+}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I1_V_2pt_phi_p(0.08,  0.0), "V: I_1^{2pt,phi_+}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I1_V_2pt_phi_p(0.08, +5.0), "V: I_1^{2pt,phi_+}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2 phi_bar */
            results.add({ this->I2_V_2pt_phi_bar(0.04, -5.0), "V: I_2^{2pt,phi_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_V_2pt_phi_bar(0.04,  0.0), "V: I_2^{2pt,phi_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_V_2pt_phi_bar(0.04, +5.0), "V: I_2^{2pt,phi_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2_V_2pt_phi_bar(0.08, -5.0), "V: I_2^{2pt,phi_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_V_2pt_phi_bar(0.08,  0.0), "V: I_2^{2pt,phi_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_V_2pt_phi_bar(0.08, +5.0), "V: I_2^{2pt,phi_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2d1 phi_bar */
            results.add({ this->I2d1_V_2pt_phi_bar(0.04, -5.0), "V: I_2d1^{2pt,phi_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2d1_V_2pt_phi_bar(0.04,  0.0), "V: I_2d1^{2pt,phi_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2d1_V_2pt_phi_bar(0.04, +5.0), "V: I_2d1^{2pt,phi_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2d1_V_2pt_phi_bar(0.08, -5.0), "V: I_2d1^{2pt,phi_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2d1_V_2pt_phi_bar(0.08,  0.0), "V: I_2d1^{2pt,phi_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2d1_V_2pt_phi_bar(0.08, +5.0), "V: I_2d1^{2pt,phi_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2 g_+ */
            results.add({ this->I2_V_2pt_g_p(0.04, -5.0), "V: I_2^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_V_2pt_g_p(0.04,  0.0), "V: I_2^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_V_2pt_g_p(0.04, +5.0), "V: I_2^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2_V_2pt_g_p(0.08, -5.0), "V: I_2^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_V_2pt_g_p(0.08,  0.0), "V: I_2^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_V_2pt_g_p(0.08, +5.0), "V: I_2^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2d1 g_+ */
            results.add({ this->I2d1_V_2pt_g_p(0.04, -5.0), "V: I_2d1^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2d1_V_2pt_g_p(0.04,  0.0), "V: I_2d1^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2d1_V_2pt_g_p(0.04, +5.0), "V: I_2d1^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2d1_V_2pt_g_p(0.08, -5.0), "V: I_2d1^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2d1_V_2pt_g_p(0.08,  0.0), "V: I_2d1^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2d1_V_2pt_g_p(0.08, +5.0), "V: I_2d1^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3 g_+ */
            results.add({ this->I3_V_2pt_g_p(0.04, -5.0), "V: I_3^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3_V_2pt_g_p(0.04,  0.0), "V: I_3^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3_V_2pt_g_p(0.04, +5.0), "V: I_3^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3_V_2pt_g_p(0.08, -5.0), "V: I_3^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3_V_2pt_g_p(0.08,  0.0), "V: I_3^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3_V_2pt_g_p(0.08, +5.0), "V: I_3^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3d1 g_+ */
            results.add({ this->I3d1_V_2pt_g_p(0.04, -5.0), "V: I_3d1^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d1_V_2pt_g_p(0.04,  0.0), "V: I_3d1^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d1_V_2pt_g_p(0.04, +5.0), "V: I_3d1^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3d1_V_2pt_g_p(0.08, -5.0), "V: I_3d1^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d1_V_2pt_g_p(0.08,  0.0), "V: I_3d1^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d1_V_2pt_g_p(0.08, +5.0), "V: I_3d1^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3d2 g_+ */
            results.add({ this->I3d2_V_2pt_g_p(0.04, -5.0), "V: I_3d2^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d2_V_2pt_g_p(0.04,  0.0), "V: I_3d2^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d2_V_2pt_g_p(0.04, +5.0), "V: I_3d2^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3d2_V_2pt_g_p(0.08, -5.0), "V: I_3d2^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d2_V_2pt_g_p(0.08,  0.0), "V: I_3d2^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d2_V_2pt_g_p(0.08, +5.0), "V: I_3d2^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_4 g_bar */
            results.add({ this->I4_V_2pt_g_bar(0.04, -5.0), "V: I_4^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I4_V_2pt_g_bar(0.04,  0.0), "V: I_4^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I4_V_2pt_g_bar(0.04, +5.0), "V: I_4^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I4_V_2pt_g_bar(0.08, -5.0), "V: I_4^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I4_V_2pt_g_bar(0.08,  0.0), "V: I_4^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I4_V_2pt_g_bar(0.08, +5.0), "V: I_4^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_4d1 g_bar */
            results.add({ this->I4d1_V_2pt_g_bar(0.04, -5.0), "V: I_4d1^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d1_V_2pt_g_bar(0.04,  0.0), "V: I_4d1^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d1_V_2pt_g_bar(0.04, +5.0), "V: I_4d1^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I4d1_V_2pt_g_bar(0.08, -5.0), "V: I_4d1^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d1_V_2pt_g_bar(0.08,  0.0), "V: I_4d1^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d1_V_2pt_g_bar(0.08, +5.0), "V: I_4d1^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_4d2 g_bar */
            results.add({ this->I4d2_V_2pt_g_bar(0.04, -5.0), "V: I_4d2^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d2_V_2pt_g_bar(0.04,  0.0), "V: I_4d2^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d2_V_2pt_g_bar(0.04, +5.0), "V: I_4d2^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I4d2_V_2pt_g_bar(0.08, -5.0), "V: I_4d2^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d2_V_2pt_g_bar(0.08,  0.0), "V: I_4d2^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d2_V_2pt_g_bar(0.08, +5.0), "V: I_4d2^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_4d3 g_bar */
            results.add({ this->I4d3_V_2pt_g_bar(0.04, -5.0), "V: I_4d3^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d3_V_2pt_g_bar(0.04,  0.0), "V: I_4d3^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d3_V_2pt_g_bar(0.04, +5.0), "V: I_4d3^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I4d3_V_2pt_g_bar(0.08, -5.0), "V: I_4d3^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d3_V_2pt_g_bar(0.08,  0.0), "V: I_4d3^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d3_V_2pt_g_bar(0.08, +5.0), "V: I_4d3^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* 3 particle */

            /* I_2 phi_3 */
            results.add({ this->I2_V_3pt_phi_3(this->sigma(s0_0_V(), 5.0), 1.0, 0.1, 5.0),            "V: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_V_3pt_phi_3(this->sigma(s0_0_V(), 5.0), 1.0, 0.5, 5.0),            "V: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_V_3pt_phi_3(this->sigma(s0_0_V(), 5.0), 3.0, 0.1, 5.0),            "V: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_V_3pt_phi_3(this->sigma(s0_0_V(), 5.0), 3.0, 0.5, 5.0),            "V: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 phi_bar_3 */
            results.add({ this->I2_V_3pt_phi_bar_3(this->sigma(s0_0_V(), 5.0), 1.0, 0.1, 5.0),        "V: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_V_3pt_phi_bar_3(this->sigma(s0_0_V(), 5.0), 1.0, 0.5, 5.0),        "V: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_V_3pt_phi_bar_3(this->sigma(s0_0_V(), 5.0), 3.0, 0.1, 5.0),        "V: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_V_3pt_phi_bar_3(this->sigma(s0_0_V(), 5.0), 3.0, 0.5, 5.0),        "V: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 phi_bar_3 */
            results.add({ this->I3_V_3pt_phi_bar_3(this->sigma(s0_0_V(), 5.0), 1.0, 0.1, 5.0),        "V: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_V_3pt_phi_bar_3(this->sigma(s0_0_V(), 5.0), 1.0, 0.5, 5.0),        "V: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_V_3pt_phi_bar_3(this->sigma(s0_0_V(), 5.0), 3.0, 0.1, 5.0),        "V: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_V_3pt_phi_bar_3(this->sigma(s0_0_V(), 5.0), 3.0, 0.5, 5.0),        "V: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A phi_bar_3 */
            results.add({ this->I3d1A_V_3pt_phi_bar_3(this->sigma(s0_0_V(), 5.0), 1.0, 0.1, 5.0),     "V: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_V_3pt_phi_bar_3(this->sigma(s0_0_V(), 5.0), 1.0, 0.5, 5.0),     "V: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_V_3pt_phi_bar_3(this->sigma(s0_0_V(), 5.0), 3.0, 0.1, 5.0),     "V: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_V_3pt_phi_bar_3(this->sigma(s0_0_V(), 5.0), 3.0, 0.5, 5.0),     "V: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B phi_bar_3 */
            results.add({ this->I3d1B_V_3pt_phi_bar_3(this->sigma(s0_0_V(), 5.0), 1.0, 5.0),          "V: I_3d1B^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_V_3pt_phi_bar_3(this->sigma(s0_0_V(), 5.0), 3.0, 5.0),          "V: I_3d1B^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C phi_bar_3 */
            results.add({ this->I3d1C_V_3pt_phi_bar_3(this->sigma(s0_0_V(), 5.0), 0.1, 5.0),          "V: I_3d1C^{3pt,phi_bar_3}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_V_3pt_phi_bar_3(this->sigma(s0_0_V(), 5.0), 0.5, 5.0),          "V: I_3d1C^{3pt,phi_bar_3}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4 phi_bar_bar_3 */
            results.add({ this->I4_V_3pt_phi_bar_bar_3(this->sigma(s0_0_V(), 5.0), 1.0, 0.1, 5.0),    "V: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_V_3pt_phi_bar_bar_3(this->sigma(s0_0_V(), 5.0), 1.0, 0.5, 5.0),    "V: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4_V_3pt_phi_bar_bar_3(this->sigma(s0_0_V(), 5.0), 3.0, 0.1, 5.0),    "V: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_V_3pt_phi_bar_bar_3(this->sigma(s0_0_V(), 5.0), 3.0, 0.5, 5.0),    "V: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1A phi_bar_bar_3 */
            results.add({ this->I4d1A_V_3pt_phi_bar_bar_3(this->sigma(s0_0_V(), 5.0), 1.0, 0.1, 5.0), "V: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_V_3pt_phi_bar_bar_3(this->sigma(s0_0_V(), 5.0), 1.0, 0.5, 5.0), "V: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_V_3pt_phi_bar_bar_3(this->sigma(s0_0_V(), 5.0), 3.0, 0.1, 5.0), "V: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_V_3pt_phi_bar_bar_3(this->sigma(s0_0_V(), 5.0), 3.0, 0.5, 5.0), "V: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1B phi_bar_bar_3 */
            results.add({ this->I4d1B_V_3pt_phi_bar_bar_3(this->sigma(s0_0_V(), 5.0), 1.0, 5.0),      "V: I_4d1B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d1B_V_3pt_phi_bar_bar_3(this->sigma(s0_0_V(), 5.0), 3.0, 5.0),      "V: I_4d1B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d1C phi_bar_bar_3 */
            results.add({ this->I4d1C_V_3pt_phi_bar_bar_3(this->sigma(s0_0_V(), 5.0), 0.1, 5.0),      "V: I_4d1C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1C_V_3pt_phi_bar_bar_3(this->sigma(s0_0_V(), 5.0), 0.5, 5.0),      "V: I_4d1C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2A phi_bar_bar_3 */
            results.add({ this->I4d2A_V_3pt_phi_bar_bar_3(this->sigma(s0_0_V(), 5.0), 1.0, 0.1, 5.0), "V: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_V_3pt_phi_bar_bar_3(this->sigma(s0_0_V(), 5.0), 1.0, 0.5, 5.0), "V: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_V_3pt_phi_bar_bar_3(this->sigma(s0_0_V(), 5.0), 3.0, 0.1, 5.0), "V: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_V_3pt_phi_bar_bar_3(this->sigma(s0_0_V(), 5.0), 3.0, 0.5, 5.0), "V: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2B phi_bar_bar_3 */
            results.add({ this->I4d2B_V_3pt_phi_bar_bar_3(this->sigma(s0_0_V(), 5.0), 1.0, 5.0),      "V: I_4d2B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d2B_V_3pt_phi_bar_bar_3(this->sigma(s0_0_V(), 5.0), 3.0, 5.0),      "V: I_4d2B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d2C phi_bar_bar_3 */
            results.add({ this->I4d2C_V_3pt_phi_bar_bar_3(this->sigma(s0_0_V(), 5.0), 0.1, 5.0),      "V: I_4d2C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2C_V_3pt_phi_bar_bar_3(this->sigma(s0_0_V(), 5.0), 0.5, 5.0),      "V: I_4d2C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2D phi_bar_bar_3 */
            results.add({ this->I4d2D_V_3pt_phi_bar_bar_3(this->sigma(s0_0_V(), 5.0), 5.0),           "V: I_4d2D^{3pt,phi_bar_bar_3}(sigma=sigma_0, q2=5.0 GeV^2)"});

            /* I_2 phi_4 */
            results.add({ this->I2_V_3pt_phi_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.1, 5.0),            "V: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_V_3pt_phi_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.5, 5.0),            "V: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_V_3pt_phi_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.1, 5.0),            "V: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_V_3pt_phi_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.5, 5.0),            "V: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 phi_bar_4 */
            results.add({ this->I2_V_3pt_phi_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.1, 5.0),        "V: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_V_3pt_phi_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.5, 5.0),        "V: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_V_3pt_phi_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.1, 5.0),        "V: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_V_3pt_phi_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.5, 5.0),        "V: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 phi_bar_4 */
            results.add({ this->I3_V_3pt_phi_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.1, 5.0),        "V: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_V_3pt_phi_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.5, 5.0),        "V: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_V_3pt_phi_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.1, 5.0),        "V: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_V_3pt_phi_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.5, 5.0),        "V: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A phi_bar_4 */
            results.add({ this->I3d1A_V_3pt_phi_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.1, 5.0),     "V: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_V_3pt_phi_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.5, 5.0),     "V: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_V_3pt_phi_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.1, 5.0),     "V: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_V_3pt_phi_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.5, 5.0),     "V: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B phi_bar_4 */
            results.add({ this->I3d1B_V_3pt_phi_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 5.0),          "V: I_3d1B^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_V_3pt_phi_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 5.0),          "V: I_3d1B^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C phi_bar_4 */
            results.add({ this->I3d1C_V_3pt_phi_bar_4(this->sigma(s0_0_V(), 5.0), 0.1, 5.0),          "V: I_3d1C^{3pt,phi_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_V_3pt_phi_bar_4(this->sigma(s0_0_V(), 5.0), 0.5, 5.0),          "V: I_3d1C^{3pt,phi_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 phi_bar_bar_4 */
            results.add({ this->I3_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.1, 5.0),    "V: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.5, 5.0),    "V: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.1, 5.0),    "V: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.5, 5.0),    "V: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A phi_bar_bar_4 */
            results.add({ this->I3d1A_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.1, 5.0), "V: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.5, 5.0), "V: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.1, 5.0), "V: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.5, 5.0), "V: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B phi_bar_bar_4 */
            results.add({ this->I3d1B_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 5.0),      "V: I_3d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 5.0),      "V: I_3d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C phi_bar_bar_4 */
            results.add({ this->I3d1C_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 0.1, 5.0),      "V: I_3d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 0.5, 5.0),      "V: I_3d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4 phi_bar_bar_4 */
            results.add({ this->I4_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.1, 5.0),    "V: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.5, 5.0),    "V: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.1, 5.0),    "V: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.5, 5.0),    "V: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1A phi_bar_bar_4 */
            results.add({ this->I4d1A_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.1, 5.0), "V: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.5, 5.0), "V: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.1, 5.0), "V: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.5, 5.0), "V: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1B phi_bar_bar_4 */
            results.add({ this->I4d1B_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 5.0),      "V: I_4d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d1B_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 5.0),      "V: I_4d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d1C phi_bar_bar_4 */
            results.add({ this->I4d1C_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 0.1, 5.0),      "V: I_4d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1C_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 0.5, 5.0),      "V: I_4d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2A phi_bar_bar_4 */
            results.add({ this->I4d2A_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.1, 5.0), "V: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.5, 5.0), "V: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.1, 5.0), "V: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.5, 5.0), "V: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2B phi_bar_bar_4 */
            results.add({ this->I4d2B_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 5.0),      "V: I_4d2B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d2B_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 5.0),      "V: I_4d2B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d2C phi_bar_bar_4 */
            results.add({ this->I4d2C_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 0.1, 5.0),      "V: I_4d2C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2C_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 0.5, 5.0),      "V: I_4d2C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2D phi_bar_bar_4 */
            results.add({ this->I4d2D_V_3pt_phi_bar_bar_4(this->sigma(s0_0_V(), 5.0), 5.0),           "V: I_4d2D^{3pt,phi_bar_bar_4}(sigma=sigma_0, q2=5.0 GeV^2)"});

            /* I_2 psi_bar_4 */
            results.add({ this->I2_V_3pt_psi_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.1, 5.0),        "V: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_V_3pt_psi_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.5, 5.0),        "V: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_V_3pt_psi_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.1, 5.0),        "V: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_V_3pt_psi_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.5, 5.0),        "V: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 psi_bar_4 */
            results.add({ this->I3_V_3pt_psi_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.1, 5.0),        "V: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_V_3pt_psi_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.5, 5.0),        "V: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_V_3pt_psi_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.1, 5.0),        "V: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_V_3pt_psi_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.5, 5.0),        "V: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A psi_bar_4 */
            results.add({ this->I3d1A_V_3pt_psi_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.1, 5.0),     "V: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_V_3pt_psi_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.5, 5.0),     "V: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_V_3pt_psi_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.1, 5.0),     "V: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_V_3pt_psi_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.5, 5.0),     "V: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B psi_bar_4 */
            results.add({ this->I3d1B_V_3pt_psi_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 5.0),          "V: I_3d1B^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_V_3pt_psi_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 5.0),          "V: I_3d1B^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C psi_bar_4 */
            results.add({ this->I3d1C_V_3pt_psi_bar_4(this->sigma(s0_0_V(), 5.0), 0.1, 5.0),          "V: I_3d1C^{3pt,psi_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_V_3pt_psi_bar_4(this->sigma(s0_0_V(), 5.0), 0.5, 5.0),          "V: I_3d1C^{3pt,psi_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 chi_bar_4 */
            results.add({ this->I2_V_3pt_chi_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.1, 5.0),        "V: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_V_3pt_chi_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.5, 5.0),        "V: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_V_3pt_chi_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.1, 5.0),        "V: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_V_3pt_chi_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.5, 5.0),        "V: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 chi_bar_4 */
            results.add({ this->I3_V_3pt_chi_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.1, 5.0),        "V: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_V_3pt_chi_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.5, 5.0),        "V: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_V_3pt_chi_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.1, 5.0),        "V: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_V_3pt_chi_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.5, 5.0),        "V: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A chi_bar_4 */
            results.add({ this->I3d1A_V_3pt_chi_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.1, 5.0),     "V: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_V_3pt_chi_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 0.5, 5.0),     "V: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_V_3pt_chi_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.1, 5.0),     "V: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_V_3pt_chi_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 0.5, 5.0),     "V: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B chi_bar_4 */
            results.add({ this->I3d1B_V_3pt_chi_bar_4(this->sigma(s0_0_V(), 5.0), 1.0, 5.0),          "V: I_3d1B^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_V_3pt_chi_bar_4(this->sigma(s0_0_V(), 5.0), 3.0, 5.0),          "V: I_3d1B^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C chi_bar_4 */
            results.add({ this->I3d1C_V_3pt_chi_bar_4(this->sigma(s0_0_V(), 5.0), 0.1, 5.0),          "V: I_3d1C^{3pt,chi_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_V_3pt_chi_bar_4(this->sigma(s0_0_V(), 5.0), 0.5, 5.0),          "V: I_3d1C^{3pt,chi_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* T_1 */

            /* 2 particle */

            /* I_1 phi_+ */
            results.add({ this->I1_T1_2pt_phi_p(0.04, -5.0), "T_1: I_1^{2pt,phi_+}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I1_T1_2pt_phi_p(0.04,  0.0), "T_1: I_1^{2pt,phi_+}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I1_T1_2pt_phi_p(0.04, +5.0), "T_1: I_1^{2pt,phi_+}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I1_T1_2pt_phi_p(0.08, -5.0), "T_1: I_1^{2pt,phi_+}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I1_T1_2pt_phi_p(0.08,  0.0), "T_1: I_1^{2pt,phi_+}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I1_T1_2pt_phi_p(0.08, +5.0), "T_1: I_1^{2pt,phi_+}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2 phi_bar */
            results.add({ this->I2_T1_2pt_phi_bar(0.04, -5.0), "T_1: I_2^{2pt,phi_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_T1_2pt_phi_bar(0.04,  0.0), "T_1: I_2^{2pt,phi_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_T1_2pt_phi_bar(0.04, +5.0), "T_1: I_2^{2pt,phi_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2_T1_2pt_phi_bar(0.08, -5.0), "T_1: I_2^{2pt,phi_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_T1_2pt_phi_bar(0.08,  0.0), "T_1: I_2^{2pt,phi_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_T1_2pt_phi_bar(0.08, +5.0), "T_1: I_2^{2pt,phi_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2 g_+ */
            results.add({ this->I2_T1_2pt_g_p(0.04, -5.0), "T_1: I_2^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_T1_2pt_g_p(0.04,  0.0), "T_1: I_2^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_T1_2pt_g_p(0.04, +5.0), "T_1: I_2^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2_T1_2pt_g_p(0.08, -5.0), "T_1: I_2^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_T1_2pt_g_p(0.08,  0.0), "T_1: I_2^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_T1_2pt_g_p(0.08, +5.0), "T_1: I_2^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3 g_+ */
            results.add({ this->I3_T1_2pt_g_p(0.04, -5.0), "T_1: I_3^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3_T1_2pt_g_p(0.04,  0.0), "T_1: I_3^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3_T1_2pt_g_p(0.04, +5.0), "T_1: I_3^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3_T1_2pt_g_p(0.08, -5.0), "T_1: I_3^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3_T1_2pt_g_p(0.08,  0.0), "T_1: I_3^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3_T1_2pt_g_p(0.08, +5.0), "T_1: I_3^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3d1 g_+ */
            results.add({ this->I3d1_T1_2pt_g_p(0.04, -5.0), "T_1: I_3d1^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d1_T1_2pt_g_p(0.04,  0.0), "T_1: I_3d1^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d1_T1_2pt_g_p(0.04, +5.0), "T_1: I_3d1^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3d1_T1_2pt_g_p(0.08, -5.0), "T_1: I_3d1^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d1_T1_2pt_g_p(0.08,  0.0), "T_1: I_3d1^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d1_T1_2pt_g_p(0.08, +5.0), "T_1: I_3d1^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2 g_bar */
            results.add({ this->I2_T1_2pt_g_bar(0.04, -5.0), "T_1: I_2^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_T1_2pt_g_bar(0.04,  0.0), "T_1: I_2^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_T1_2pt_g_bar(0.04, +5.0), "T_1: I_2^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2_T1_2pt_g_bar(0.08, -5.0), "T_1: I_2^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_T1_2pt_g_bar(0.08,  0.0), "T_1: I_2^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_T1_2pt_g_bar(0.08, +5.0), "T_1: I_2^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3 g_bar */
            results.add({ this->I3_T1_2pt_g_bar(0.04, -5.0), "T_1: I_3^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3_T1_2pt_g_bar(0.04,  0.0), "T_1: I_3^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3_T1_2pt_g_bar(0.04, +5.0), "T_1: I_3^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3_T1_2pt_g_bar(0.08, -5.0), "T_1: I_3^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3_T1_2pt_g_bar(0.08,  0.0), "T_1: I_3^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3_T1_2pt_g_bar(0.08, +5.0), "T_1: I_3^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3d1 g_bar */
            results.add({ this->I3d1_T1_2pt_g_bar(0.04, -5.0), "T_1: I_3d1^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d1_T1_2pt_g_bar(0.04,  0.0), "T_1: I_3d1^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d1_T1_2pt_g_bar(0.04, +5.0), "T_1: I_3d1^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3d1_T1_2pt_g_bar(0.08, -5.0), "T_1: I_3d1^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d1_T1_2pt_g_bar(0.08,  0.0), "T_1: I_3d1^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d1_T1_2pt_g_bar(0.08, +5.0), "T_1: I_3d1^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_4 g_bar */
            results.add({ this->I4_T1_2pt_g_bar(0.04, -5.0), "T_1: I_4^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I4_T1_2pt_g_bar(0.04,  0.0), "T_1: I_4^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I4_T1_2pt_g_bar(0.04, +5.0), "T_1: I_4^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I4_T1_2pt_g_bar(0.08, -5.0), "T_1: I_4^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I4_T1_2pt_g_bar(0.08,  0.0), "T_1: I_4^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I4_T1_2pt_g_bar(0.08, +5.0), "T_1: I_4^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_4d1 g_bar */
            results.add({ this->I4d1_T1_2pt_g_bar(0.04, -5.0), "T_1: I_4d1^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d1_T1_2pt_g_bar(0.04,  0.0), "T_1: I_4d1^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d1_T1_2pt_g_bar(0.04, +5.0), "T_1: I_4d1^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I4d1_T1_2pt_g_bar(0.08, -5.0), "T_1: I_4d1^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d1_T1_2pt_g_bar(0.08,  0.0), "T_1: I_4d1^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d1_T1_2pt_g_bar(0.08, +5.0), "T_1: I_4d1^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_4d2 g_bar */
            results.add({ this->I4d2_T1_2pt_g_bar(0.04, -5.0), "T_1: I_4d2^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d2_T1_2pt_g_bar(0.04,  0.0), "T_1: I_4d2^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d2_T1_2pt_g_bar(0.04, +5.0), "T_1: I_4d2^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I4d2_T1_2pt_g_bar(0.08, -5.0), "T_1: I_4d2^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d2_T1_2pt_g_bar(0.08,  0.0), "T_1: I_4d2^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d2_T1_2pt_g_bar(0.08, +5.0), "T_1: I_4d2^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* 3 particle */

            /* I_2 phi_3 */
            results.add({ this->I2_T1_3pt_phi_3(this->sigma(s0_0_T1(), 5.0), 1.0, 0.1, 5.0),            "T_1: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T1_3pt_phi_3(this->sigma(s0_0_T1(), 5.0), 1.0, 0.5, 5.0),            "T_1: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_T1_3pt_phi_3(this->sigma(s0_0_T1(), 5.0), 3.0, 0.1, 5.0),            "T_1: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T1_3pt_phi_3(this->sigma(s0_0_T1(), 5.0), 3.0, 0.5, 5.0),            "T_1: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 phi_bar_3 */
            results.add({ this->I2_T1_3pt_phi_bar_3(this->sigma(s0_0_T1(), 5.0), 1.0, 0.1, 5.0),        "T_1: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T1_3pt_phi_bar_3(this->sigma(s0_0_T1(), 5.0), 1.0, 0.5, 5.0),        "T_1: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_T1_3pt_phi_bar_3(this->sigma(s0_0_T1(), 5.0), 3.0, 0.1, 5.0),        "T_1: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T1_3pt_phi_bar_3(this->sigma(s0_0_T1(), 5.0), 3.0, 0.5, 5.0),        "T_1: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 phi_bar_3 */
            results.add({ this->I3_T1_3pt_phi_bar_3(this->sigma(s0_0_T1(), 5.0), 1.0, 0.1, 5.0),        "T_1: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T1_3pt_phi_bar_3(this->sigma(s0_0_T1(), 5.0), 1.0, 0.5, 5.0),        "T_1: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_T1_3pt_phi_bar_3(this->sigma(s0_0_T1(), 5.0), 3.0, 0.1, 5.0),        "T_1: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T1_3pt_phi_bar_3(this->sigma(s0_0_T1(), 5.0), 3.0, 0.5, 5.0),        "T_1: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A phi_bar_3 */
            results.add({ this->I3d1A_T1_3pt_phi_bar_3(this->sigma(s0_0_T1(), 5.0), 1.0, 0.1, 5.0),     "T_1: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T1_3pt_phi_bar_3(this->sigma(s0_0_T1(), 5.0), 1.0, 0.5, 5.0),     "T_1: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T1_3pt_phi_bar_3(this->sigma(s0_0_T1(), 5.0), 3.0, 0.1, 5.0),     "T_1: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T1_3pt_phi_bar_3(this->sigma(s0_0_T1(), 5.0), 3.0, 0.5, 5.0),     "T_1: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B phi_bar_3 */
            results.add({ this->I3d1B_T1_3pt_phi_bar_3(this->sigma(s0_0_T1(), 5.0), 1.0, 5.0),          "T_1: I_3d1B^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_T1_3pt_phi_bar_3(this->sigma(s0_0_T1(), 5.0), 3.0, 5.0),          "T_1: I_3d1B^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C phi_bar_3 */
            results.add({ this->I3d1C_T1_3pt_phi_bar_3(this->sigma(s0_0_T1(), 5.0), 0.1, 5.0),          "T_1: I_3d1C^{3pt,phi_bar_3}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_T1_3pt_phi_bar_3(this->sigma(s0_0_T1(), 5.0), 0.5, 5.0),          "T_1: I_3d1C^{3pt,phi_bar_3}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 phi_bar_bar_3 */
            results.add({ this->I3_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 1.0, 0.1, 5.0),    "T_1: I_3^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 1.0, 0.5, 5.0),    "T_1: I_3^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 3.0, 0.1, 5.0),    "T_1: I_3^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 3.0, 0.5, 5.0),    "T_1: I_3^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A phi_bar_bar_3 */
            results.add({ this->I3d1A_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 1.0, 0.1, 5.0), "T_1: I_3d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 1.0, 0.5, 5.0), "T_1: I_3d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 3.0, 0.1, 5.0), "T_1: I_3d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 3.0, 0.5, 5.0), "T_1: I_3d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B phi_bar_bar_3 */
            results.add({ this->I3d1B_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 1.0, 5.0),      "T_1: I_3d1B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 3.0, 5.0),      "T_1: I_3d1B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C phi_bar_bar_3 */
            results.add({ this->I3d1C_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 0.1, 5.0),      "T_1: I_3d1C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 0.5, 5.0),      "T_1: I_3d1C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4 phi_bar_bar_3 */
            results.add({ this->I4_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 1.0, 0.1, 5.0),    "T_1: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 1.0, 0.5, 5.0),    "T_1: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 3.0, 0.1, 5.0),    "T_1: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 3.0, 0.5, 5.0),    "T_1: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1A phi_bar_bar_3 */
            results.add({ this->I4d1A_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 1.0, 0.1, 5.0), "T_1: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 1.0, 0.5, 5.0), "T_1: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 3.0, 0.1, 5.0), "T_1: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 3.0, 0.5, 5.0), "T_1: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1B phi_bar_bar_3 */
            results.add({ this->I4d1B_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 1.0, 5.0),      "T_1: I_4d1B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d1B_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 3.0, 5.0),      "T_1: I_4d1B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d1C phi_bar_bar_3 */
            results.add({ this->I4d1C_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 0.1, 5.0),      "T_1: I_4d1C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1C_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 0.5, 5.0),      "T_1: I_4d1C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2A phi_bar_bar_3 */
            results.add({ this->I4d2A_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 1.0, 0.1, 5.0), "T_1: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 1.0, 0.5, 5.0), "T_1: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 3.0, 0.1, 5.0), "T_1: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 3.0, 0.5, 5.0), "T_1: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2B phi_bar_bar_3 */
            results.add({ this->I4d2B_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 1.0, 5.0),      "T_1: I_4d2B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d2B_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 3.0, 5.0),      "T_1: I_4d2B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d2C phi_bar_bar_3 */
            results.add({ this->I4d2C_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 0.1, 5.0),      "T_1: I_4d2C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2C_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 0.5, 5.0),      "T_1: I_4d2C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2D phi_bar_bar_3 */
            results.add({ this->I4d2D_T1_3pt_phi_bar_bar_3(this->sigma(s0_0_T1(), 5.0), 5.0),           "T_1: I_4d2D^{3pt,phi_bar_bar_3}(sigma=sigma_0, q2=5.0 GeV^2)"});

            /* I_2 phi_4 */
            results.add({ this->I2_T1_3pt_phi_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.1, 5.0),            "T_1: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T1_3pt_phi_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.5, 5.0),            "T_1: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_T1_3pt_phi_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.1, 5.0),            "T_1: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T1_3pt_phi_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.5, 5.0),            "T_1: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 phi_bar_4 */
            results.add({ this->I2_T1_3pt_phi_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.1, 5.0),        "T_1: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T1_3pt_phi_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.5, 5.0),        "T_1: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_T1_3pt_phi_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.1, 5.0),        "T_1: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T1_3pt_phi_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.5, 5.0),        "T_1: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 phi_bar_4 */
            results.add({ this->I3_T1_3pt_phi_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.1, 5.0),        "T_1: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T1_3pt_phi_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.5, 5.0),        "T_1: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_T1_3pt_phi_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.1, 5.0),        "T_1: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T1_3pt_phi_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.5, 5.0),        "T_1: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A phi_bar_4 */
            results.add({ this->I3d1A_T1_3pt_phi_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.1, 5.0),     "T_1: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T1_3pt_phi_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.5, 5.0),     "T_1: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T1_3pt_phi_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.1, 5.0),     "T_1: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T1_3pt_phi_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.5, 5.0),     "T_1: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B phi_bar_4 */
            results.add({ this->I3d1B_T1_3pt_phi_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 5.0),          "T_1: I_3d1B^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_T1_3pt_phi_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 5.0),          "T_1: I_3d1B^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C phi_bar_4 */
            results.add({ this->I3d1C_T1_3pt_phi_bar_4(this->sigma(s0_0_T1(), 5.0), 0.1, 5.0),          "T_1: I_3d1C^{3pt,phi_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_T1_3pt_phi_bar_4(this->sigma(s0_0_T1(), 5.0), 0.5, 5.0),          "T_1: I_3d1C^{3pt,phi_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 phi_bar_bar_4 */
            results.add({ this->I2_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.1, 5.0),    "T_1: I_2^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.5, 5.0),    "T_1: I_2^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.1, 5.0),    "T_1: I_2^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.5, 5.0),    "T_1: I_2^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 phi_bar_bar_4 */
            results.add({ this->I3_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.1, 5.0),    "T_1: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.5, 5.0),    "T_1: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.1, 5.0),    "T_1: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.5, 5.0),    "T_1: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A phi_bar_bar_4 */
            results.add({ this->I3d1A_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.1, 5.0), "T_1: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.5, 5.0), "T_1: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.1, 5.0), "T_1: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.5, 5.0), "T_1: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B phi_bar_bar_4 */
            results.add({ this->I3d1B_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 5.0),      "T_1: I_3d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 5.0),      "T_1: I_3d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C phi_bar_bar_4 */
            results.add({ this->I3d1C_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 0.1, 5.0),      "T_1: I_3d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 0.5, 5.0),      "T_1: I_3d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4 phi_bar_bar_4 */
            results.add({ this->I4_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.1, 5.0),    "T_1: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.5, 5.0),    "T_1: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.1, 5.0),    "T_1: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.5, 5.0),    "T_1: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1A phi_bar_bar_4 */
            results.add({ this->I4d1A_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.1, 5.0), "T_1: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.5, 5.0), "T_1: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.1, 5.0), "T_1: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.5, 5.0), "T_1: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1B phi_bar_bar_4 */
            results.add({ this->I4d1B_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 5.0),      "T_1: I_4d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d1B_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 5.0),      "T_1: I_4d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d1C phi_bar_bar_4 */
            results.add({ this->I4d1C_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 0.1, 5.0),      "T_1: I_4d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1C_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 0.5, 5.0),      "T_1: I_4d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2A phi_bar_bar_4 */
            results.add({ this->I4d2A_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.1, 5.0), "T_1: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.5, 5.0), "T_1: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.1, 5.0), "T_1: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.5, 5.0), "T_1: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2B phi_bar_bar_4 */
            results.add({ this->I4d2B_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 5.0),      "T_1: I_4d2B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d2B_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 5.0),      "T_1: I_4d2B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d2C phi_bar_bar_4 */
            results.add({ this->I4d2C_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 0.1, 5.0),      "T_1: I_4d2C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2C_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 0.5, 5.0),      "T_1: I_4d2C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2D phi_bar_bar_4 */
            results.add({ this->I4d2D_T1_3pt_phi_bar_bar_4(this->sigma(s0_0_T1(), 5.0), 5.0),           "T_1: I_4d2D^{3pt,phi_bar_bar_4}(sigma=sigma_0, q2=5.0 GeV^2)"});

            /* I_2 psi_bar_4 */
            results.add({ this->I2_T1_3pt_psi_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.1, 5.0),        "T_1: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T1_3pt_psi_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.5, 5.0),        "T_1: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_T1_3pt_psi_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.1, 5.0),        "T_1: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T1_3pt_psi_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.5, 5.0),        "T_1: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 psi_bar_4 */
            results.add({ this->I3_T1_3pt_psi_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.1, 5.0),        "T_1: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T1_3pt_psi_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.5, 5.0),        "T_1: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_T1_3pt_psi_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.1, 5.0),        "T_1: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T1_3pt_psi_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.5, 5.0),        "T_1: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A psi_bar_4 */
            results.add({ this->I3d1A_T1_3pt_psi_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.1, 5.0),     "T_1: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T1_3pt_psi_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.5, 5.0),     "T_1: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T1_3pt_psi_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.1, 5.0),     "T_1: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T1_3pt_psi_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.5, 5.0),     "T_1: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B psi_bar_4 */
            results.add({ this->I3d1B_T1_3pt_psi_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 5.0),          "T_1: I_3d1B^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_T1_3pt_psi_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 5.0),          "T_1: I_3d1B^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C psi_bar_4 */
            results.add({ this->I3d1C_T1_3pt_psi_bar_4(this->sigma(s0_0_T1(), 5.0), 0.1, 5.0),          "T_1: I_3d1C^{3pt,psi_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_T1_3pt_psi_bar_4(this->sigma(s0_0_T1(), 5.0), 0.5, 5.0),          "T_1: I_3d1C^{3pt,psi_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 chi_bar_4 */
            results.add({ this->I2_T1_3pt_chi_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.1, 5.0),        "T_1: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T1_3pt_chi_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.5, 5.0),        "T_1: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_T1_3pt_chi_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.1, 5.0),        "T_1: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T1_3pt_chi_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.5, 5.0),        "T_1: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 chi_bar_4 */
            results.add({ this->I3_T1_3pt_chi_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.1, 5.0),        "T_1: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T1_3pt_chi_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.5, 5.0),        "T_1: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_T1_3pt_chi_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.1, 5.0),        "T_1: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T1_3pt_chi_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.5, 5.0),        "T_1: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A chi_bar_4 */
            results.add({ this->I3d1A_T1_3pt_chi_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.1, 5.0),     "T_1: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T1_3pt_chi_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 0.5, 5.0),     "T_1: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T1_3pt_chi_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.1, 5.0),     "T_1: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T1_3pt_chi_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 0.5, 5.0),     "T_1: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B chi_bar_4 */
            results.add({ this->I3d1B_T1_3pt_chi_bar_4(this->sigma(s0_0_T1(), 5.0), 1.0, 5.0),          "T_1: I_3d1B^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_T1_3pt_chi_bar_4(this->sigma(s0_0_T1(), 5.0), 3.0, 5.0),          "T_1: I_3d1B^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C chi_bar_4 */
            results.add({ this->I3d1C_T1_3pt_chi_bar_4(this->sigma(s0_0_T1(), 5.0), 0.1, 5.0),          "T_1: I_3d1C^{3pt,chi_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_T1_3pt_chi_bar_4(this->sigma(s0_0_T1(), 5.0), 0.5, 5.0),          "T_1: I_3d1C^{3pt,chi_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* T_23A */

            /* 2 particle */

            /* I_1 phi_+ */
            results.add({ this->I1_T23A_2pt_phi_p(0.04, -5.0), "T_23A: I_1^{2pt,phi_+}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I1_T23A_2pt_phi_p(0.04,  0.0), "T_23A: I_1^{2pt,phi_+}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I1_T23A_2pt_phi_p(0.04, +5.0), "T_23A: I_1^{2pt,phi_+}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I1_T23A_2pt_phi_p(0.08, -5.0), "T_23A: I_1^{2pt,phi_+}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I1_T23A_2pt_phi_p(0.08,  0.0), "T_23A: I_1^{2pt,phi_+}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I1_T23A_2pt_phi_p(0.08, +5.0), "T_23A: I_1^{2pt,phi_+}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2 phi_bar */
            results.add({ this->I2_T23A_2pt_phi_bar(0.04, -5.0), "T_23A: I_2^{2pt,phi_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_T23A_2pt_phi_bar(0.04,  0.0), "T_23A: I_2^{2pt,phi_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_T23A_2pt_phi_bar(0.04, +5.0), "T_23A: I_2^{2pt,phi_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2_T23A_2pt_phi_bar(0.08, -5.0), "T_23A: I_2^{2pt,phi_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_T23A_2pt_phi_bar(0.08,  0.0), "T_23A: I_2^{2pt,phi_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_T23A_2pt_phi_bar(0.08, +5.0), "T_23A: I_2^{2pt,phi_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2 g_+ */
            results.add({ this->I2_T23A_2pt_g_p(0.04, -5.0), "T_23A: I_2^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_T23A_2pt_g_p(0.04,  0.0), "T_23A: I_2^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_T23A_2pt_g_p(0.04, +5.0), "T_23A: I_2^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2_T23A_2pt_g_p(0.08, -5.0), "T_23A: I_2^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_T23A_2pt_g_p(0.08,  0.0), "T_23A: I_2^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_T23A_2pt_g_p(0.08, +5.0), "T_23A: I_2^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3 g_+ */
            results.add({ this->I3_T23A_2pt_g_p(0.04, -5.0), "T_23A: I_3^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3_T23A_2pt_g_p(0.04,  0.0), "T_23A: I_3^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3_T23A_2pt_g_p(0.04, +5.0), "T_23A: I_3^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3_T23A_2pt_g_p(0.08, -5.0), "T_23A: I_3^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3_T23A_2pt_g_p(0.08,  0.0), "T_23A: I_3^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3_T23A_2pt_g_p(0.08, +5.0), "T_23A: I_3^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3d1 g_+ */
            results.add({ this->I3d1_T23A_2pt_g_p(0.04, -5.0), "T_23A: I_3d1^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d1_T23A_2pt_g_p(0.04,  0.0), "T_23A: I_3d1^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d1_T23A_2pt_g_p(0.04, +5.0), "T_23A: I_3d1^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3d1_T23A_2pt_g_p(0.08, -5.0), "T_23A: I_3d1^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d1_T23A_2pt_g_p(0.08,  0.0), "T_23A: I_3d1^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d1_T23A_2pt_g_p(0.08, +5.0), "T_23A: I_3d1^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2 g_bar */
            results.add({ this->I2_T23A_2pt_g_bar(0.04, -5.0), "T_23A: I_2^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_T23A_2pt_g_bar(0.04,  0.0), "T_23A: I_2^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_T23A_2pt_g_bar(0.04, +5.0), "T_23A: I_2^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2_T23A_2pt_g_bar(0.08, -5.0), "T_23A: I_2^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_T23A_2pt_g_bar(0.08,  0.0), "T_23A: I_2^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_T23A_2pt_g_bar(0.08, +5.0), "T_23A: I_2^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3 g_bar */
            results.add({ this->I3_T23A_2pt_g_bar(0.04, -5.0), "T_23A: I_3^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3_T23A_2pt_g_bar(0.04,  0.0), "T_23A: I_3^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3_T23A_2pt_g_bar(0.04, +5.0), "T_23A: I_3^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3_T23A_2pt_g_bar(0.08, -5.0), "T_23A: I_3^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3_T23A_2pt_g_bar(0.08,  0.0), "T_23A: I_3^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3_T23A_2pt_g_bar(0.08, +5.0), "T_23A: I_3^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3d1 g_bar */
            results.add({ this->I3d1_T23A_2pt_g_bar(0.04, -5.0), "T_23A: I_3d1^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d1_T23A_2pt_g_bar(0.04,  0.0), "T_23A: I_3d1^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d1_T23A_2pt_g_bar(0.04, +5.0), "T_23A: I_3d1^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3d1_T23A_2pt_g_bar(0.08, -5.0), "T_23A: I_3d1^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d1_T23A_2pt_g_bar(0.08,  0.0), "T_23A: I_3d1^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d1_T23A_2pt_g_bar(0.08, +5.0), "T_23A: I_3d1^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_4 g_bar */
            results.add({ this->I4_T23A_2pt_g_bar(0.04, -5.0), "T_23A: I_4^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I4_T23A_2pt_g_bar(0.04,  0.0), "T_23A: I_4^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I4_T23A_2pt_g_bar(0.04, +5.0), "T_23A: I_4^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I4_T23A_2pt_g_bar(0.08, -5.0), "T_23A: I_4^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I4_T23A_2pt_g_bar(0.08,  0.0), "T_23A: I_4^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I4_T23A_2pt_g_bar(0.08, +5.0), "T_23A: I_4^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_4d1 g_bar */
            results.add({ this->I4d1_T23A_2pt_g_bar(0.04, -5.0), "T_23A: I_4d1^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d1_T23A_2pt_g_bar(0.04,  0.0), "T_23A: I_4d1^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d1_T23A_2pt_g_bar(0.04, +5.0), "T_23A: I_4d1^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I4d1_T23A_2pt_g_bar(0.08, -5.0), "T_23A: I_4d1^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d1_T23A_2pt_g_bar(0.08,  0.0), "T_23A: I_4d1^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d1_T23A_2pt_g_bar(0.08, +5.0), "T_23A: I_4d1^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_4d2 g_bar */
            results.add({ this->I4d2_T23A_2pt_g_bar(0.04, -5.0), "T_23A: I_4d2^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d2_T23A_2pt_g_bar(0.04,  0.0), "T_23A: I_4d2^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d2_T23A_2pt_g_bar(0.04, +5.0), "T_23A: I_4d2^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I4d2_T23A_2pt_g_bar(0.08, -5.0), "T_23A: I_4d2^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d2_T23A_2pt_g_bar(0.08,  0.0), "T_23A: I_4d2^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d2_T23A_2pt_g_bar(0.08, +5.0), "T_23A: I_4d2^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* 3 particle */

            /* I_2 phi_3 */
            results.add({ this->I2_T23A_3pt_phi_3(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.1, 5.0),            "T_23A: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23A_3pt_phi_3(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.5, 5.0),            "T_23A: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23A_3pt_phi_3(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.1, 5.0),            "T_23A: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23A_3pt_phi_3(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.5, 5.0),            "T_23A: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 phi_bar_3 */
            results.add({ this->I2_T23A_3pt_phi_bar_3(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.1, 5.0),        "T_23A: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23A_3pt_phi_bar_3(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.5, 5.0),        "T_23A: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23A_3pt_phi_bar_3(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.1, 5.0),        "T_23A: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23A_3pt_phi_bar_3(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.5, 5.0),        "T_23A: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 phi_bar_3 */
            results.add({ this->I3_T23A_3pt_phi_bar_3(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.1, 5.0),        "T_23A: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23A_3pt_phi_bar_3(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.5, 5.0),        "T_23A: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23A_3pt_phi_bar_3(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.1, 5.0),        "T_23A: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23A_3pt_phi_bar_3(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.5, 5.0),        "T_23A: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A phi_bar_3 */
            results.add({ this->I3d1A_T23A_3pt_phi_bar_3(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.1, 5.0),     "T_23A: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23A_3pt_phi_bar_3(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.5, 5.0),     "T_23A: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23A_3pt_phi_bar_3(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.1, 5.0),     "T_23A: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23A_3pt_phi_bar_3(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.5, 5.0),     "T_23A: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B phi_bar_3 */
            results.add({ this->I3d1B_T23A_3pt_phi_bar_3(this->sigma(s0_0_T23A(), 5.0), 1.0, 5.0),          "T_23A: I_3d1B^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_T23A_3pt_phi_bar_3(this->sigma(s0_0_T23A(), 5.0), 3.0, 5.0),          "T_23A: I_3d1B^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C phi_bar_3 */
            results.add({ this->I3d1C_T23A_3pt_phi_bar_3(this->sigma(s0_0_T23A(), 5.0), 0.1, 5.0),          "T_23A: I_3d1C^{3pt,phi_bar_3}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_T23A_3pt_phi_bar_3(this->sigma(s0_0_T23A(), 5.0), 0.5, 5.0),          "T_23A: I_3d1C^{3pt,phi_bar_3}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 phi_bar_bar_3 */
            results.add({ this->I3_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.1, 5.0),    "T_23A: I_3^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.5, 5.0),    "T_23A: I_3^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.1, 5.0),    "T_23A: I_3^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.5, 5.0),    "T_23A: I_3^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A phi_bar_bar_3 */
            results.add({ this->I3d1A_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.1, 5.0), "T_23A: I_3d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.5, 5.0), "T_23A: I_3d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.1, 5.0), "T_23A: I_3d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.5, 5.0), "T_23A: I_3d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B phi_bar_bar_3 */
            results.add({ this->I3d1B_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 1.0, 5.0),      "T_23A: I_3d1B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 3.0, 5.0),      "T_23A: I_3d1B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C phi_bar_bar_3 */
            results.add({ this->I3d1C_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 0.1, 5.0),      "T_23A: I_3d1C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 0.5, 5.0),      "T_23A: I_3d1C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4 phi_bar_bar_3 */
            results.add({ this->I4_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.1, 5.0),    "T_23A: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.5, 5.0),    "T_23A: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.1, 5.0),    "T_23A: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.5, 5.0),    "T_23A: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1A phi_bar_bar_3 */
            results.add({ this->I4d1A_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.1, 5.0), "T_23A: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.5, 5.0), "T_23A: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.1, 5.0), "T_23A: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.5, 5.0), "T_23A: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1B phi_bar_bar_3 */
            results.add({ this->I4d1B_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 1.0, 5.0),      "T_23A: I_4d1B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d1B_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 3.0, 5.0),      "T_23A: I_4d1B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d1C phi_bar_bar_3 */
            results.add({ this->I4d1C_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 0.1, 5.0),      "T_23A: I_4d1C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1C_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 0.5, 5.0),      "T_23A: I_4d1C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2A phi_bar_bar_3 */
            results.add({ this->I4d2A_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.1, 5.0), "T_23A: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.5, 5.0), "T_23A: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.1, 5.0), "T_23A: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.5, 5.0), "T_23A: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2B phi_bar_bar_3 */
            results.add({ this->I4d2B_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 1.0, 5.0),      "T_23A: I_4d2B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d2B_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 3.0, 5.0),      "T_23A: I_4d2B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d2C phi_bar_bar_3 */
            results.add({ this->I4d2C_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 0.1, 5.0),      "T_23A: I_4d2C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2C_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 0.5, 5.0),      "T_23A: I_4d2C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2D phi_bar_bar_3 */
            results.add({ this->I4d2D_T23A_3pt_phi_bar_bar_3(this->sigma(s0_0_T23A(), 5.0), 5.0),           "T_23A: I_4d2D^{3pt,phi_bar_bar_3}(sigma=sigma_0, q2=5.0 GeV^2)"});

            /* I_2 phi_4 */
            results.add({ this->I2_T23A_3pt_phi_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.1, 5.0),            "T_23A: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23A_3pt_phi_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.5, 5.0),            "T_23A: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23A_3pt_phi_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.1, 5.0),            "T_23A: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23A_3pt_phi_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.5, 5.0),            "T_23A: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 phi_bar_4 */
            results.add({ this->I2_T23A_3pt_phi_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.1, 5.0),        "T_23A: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23A_3pt_phi_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.5, 5.0),        "T_23A: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23A_3pt_phi_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.1, 5.0),        "T_23A: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23A_3pt_phi_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.5, 5.0),        "T_23A: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 phi_bar_4 */
            results.add({ this->I3_T23A_3pt_phi_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.1, 5.0),        "T_23A: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23A_3pt_phi_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.5, 5.0),        "T_23A: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23A_3pt_phi_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.1, 5.0),        "T_23A: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23A_3pt_phi_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.5, 5.0),        "T_23A: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A phi_bar_4 */
            results.add({ this->I3d1A_T23A_3pt_phi_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.1, 5.0),     "T_23A: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23A_3pt_phi_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.5, 5.0),     "T_23A: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23A_3pt_phi_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.1, 5.0),     "T_23A: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23A_3pt_phi_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.5, 5.0),     "T_23A: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B phi_bar_4 */
            results.add({ this->I3d1B_T23A_3pt_phi_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 5.0),          "T_23A: I_3d1B^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_T23A_3pt_phi_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 5.0),          "T_23A: I_3d1B^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C phi_bar_4 */
            results.add({ this->I3d1C_T23A_3pt_phi_bar_4(this->sigma(s0_0_T23A(), 5.0), 0.1, 5.0),          "T_23A: I_3d1C^{3pt,phi_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_T23A_3pt_phi_bar_4(this->sigma(s0_0_T23A(), 5.0), 0.5, 5.0),          "T_23A: I_3d1C^{3pt,phi_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 phi_bar_bar_4 */
            results.add({ this->I2_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.1, 5.0),    "T_23A: I_2^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.5, 5.0),    "T_23A: I_2^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.1, 5.0),    "T_23A: I_2^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.5, 5.0),    "T_23A: I_2^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 phi_bar_bar_4 */
            results.add({ this->I3_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.1, 5.0),    "T_23A: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.5, 5.0),    "T_23A: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.1, 5.0),    "T_23A: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.5, 5.0),    "T_23A: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A phi_bar_bar_4 */
            results.add({ this->I3d1A_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.1, 5.0), "T_23A: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.5, 5.0), "T_23A: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.1, 5.0), "T_23A: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.5, 5.0), "T_23A: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B phi_bar_bar_4 */
            results.add({ this->I3d1B_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 5.0),      "T_23A: I_3d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 5.0),      "T_23A: I_3d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C phi_bar_bar_4 */
            results.add({ this->I3d1C_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 0.1, 5.0),      "T_23A: I_3d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 0.5, 5.0),      "T_23A: I_3d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4 phi_bar_bar_4 */
            results.add({ this->I4_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.1, 5.0),    "T_23A: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.5, 5.0),    "T_23A: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.1, 5.0),    "T_23A: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.5, 5.0),    "T_23A: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1A phi_bar_bar_4 */
            results.add({ this->I4d1A_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.1, 5.0), "T_23A: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.5, 5.0), "T_23A: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.1, 5.0), "T_23A: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.5, 5.0), "T_23A: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1B phi_bar_bar_4 */
            results.add({ this->I4d1B_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 5.0),      "T_23A: I_4d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d1B_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 5.0),      "T_23A: I_4d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d1C phi_bar_bar_4 */
            results.add({ this->I4d1C_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 0.1, 5.0),      "T_23A: I_4d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1C_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 0.5, 5.0),      "T_23A: I_4d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2A phi_bar_bar_4 */
            results.add({ this->I4d2A_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.1, 5.0), "T_23A: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.5, 5.0), "T_23A: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.1, 5.0), "T_23A: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.5, 5.0), "T_23A: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2B phi_bar_bar_4 */
            results.add({ this->I4d2B_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 5.0),      "T_23A: I_4d2B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d2B_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 5.0),      "T_23A: I_4d2B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d2C phi_bar_bar_4 */
            results.add({ this->I4d2C_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 0.1, 5.0),      "T_23A: I_4d2C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2C_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 0.5, 5.0),      "T_23A: I_4d2C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2D phi_bar_bar_4 */
            results.add({ this->I4d2D_T23A_3pt_phi_bar_bar_4(this->sigma(s0_0_T23A(), 5.0), 5.0),           "T_23A: I_4d2D^{3pt,phi_bar_bar_4}(sigma=sigma_0, q2=5.0 GeV^2)"});

            /* I_2 psi_bar_4 */
            results.add({ this->I2_T23A_3pt_psi_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.1, 5.0),        "T_23A: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23A_3pt_psi_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.5, 5.0),        "T_23A: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23A_3pt_psi_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.1, 5.0),        "T_23A: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23A_3pt_psi_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.5, 5.0),        "T_23A: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 psi_bar_4 */
            results.add({ this->I3_T23A_3pt_psi_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.1, 5.0),        "T_23A: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23A_3pt_psi_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.5, 5.0),        "T_23A: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23A_3pt_psi_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.1, 5.0),        "T_23A: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23A_3pt_psi_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.5, 5.0),        "T_23A: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A psi_bar_4 */
            results.add({ this->I3d1A_T23A_3pt_psi_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.1, 5.0),     "T_23A: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23A_3pt_psi_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.5, 5.0),     "T_23A: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23A_3pt_psi_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.1, 5.0),     "T_23A: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23A_3pt_psi_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.5, 5.0),     "T_23A: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B psi_bar_4 */
            results.add({ this->I3d1B_T23A_3pt_psi_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 5.0),          "T_23A: I_3d1B^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_T23A_3pt_psi_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 5.0),          "T_23A: I_3d1B^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C psi_bar_4 */
            results.add({ this->I3d1C_T23A_3pt_psi_bar_4(this->sigma(s0_0_T23A(), 5.0), 0.1, 5.0),          "T_23A: I_3d1C^{3pt,psi_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_T23A_3pt_psi_bar_4(this->sigma(s0_0_T23A(), 5.0), 0.5, 5.0),          "T_23A: I_3d1C^{3pt,psi_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 chi_bar_4 */
            results.add({ this->I2_T23A_3pt_chi_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.1, 5.0),        "T_23A: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23A_3pt_chi_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.5, 5.0),        "T_23A: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23A_3pt_chi_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.1, 5.0),        "T_23A: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23A_3pt_chi_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.5, 5.0),        "T_23A: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 chi_bar_4 */
            results.add({ this->I3_T23A_3pt_chi_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.1, 5.0),        "T_23A: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23A_3pt_chi_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.5, 5.0),        "T_23A: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23A_3pt_chi_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.1, 5.0),        "T_23A: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23A_3pt_chi_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.5, 5.0),        "T_23A: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A chi_bar_4 */
            results.add({ this->I3d1A_T23A_3pt_chi_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.1, 5.0),     "T_23A: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23A_3pt_chi_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 0.5, 5.0),     "T_23A: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23A_3pt_chi_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.1, 5.0),     "T_23A: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23A_3pt_chi_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 0.5, 5.0),     "T_23A: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B chi_bar_4 */
            results.add({ this->I3d1B_T23A_3pt_chi_bar_4(this->sigma(s0_0_T23A(), 5.0), 1.0, 5.0),          "T_23A: I_3d1B^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_T23A_3pt_chi_bar_4(this->sigma(s0_0_T23A(), 5.0), 3.0, 5.0),          "T_23A: I_3d1B^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C chi_bar_4 */
            results.add({ this->I3d1C_T23A_3pt_chi_bar_4(this->sigma(s0_0_T23A(), 5.0), 0.1, 5.0),          "T_23A: I_3d1C^{3pt,chi_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_T23A_3pt_chi_bar_4(this->sigma(s0_0_T23A(), 5.0), 0.5, 5.0),          "T_23A: I_3d1C^{3pt,chi_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* T_23B */

            /* 2 particle */

            /* I_1 phi_+ */
            results.add({ this->I1_T23B_2pt_phi_p(0.04, -5.0), "T_23B: I_1^{2pt,phi_+}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I1_T23B_2pt_phi_p(0.04,  0.0), "T_23B: I_1^{2pt,phi_+}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I1_T23B_2pt_phi_p(0.04, +5.0), "T_23B: I_1^{2pt,phi_+}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I1_T23B_2pt_phi_p(0.08, -5.0), "T_23B: I_1^{2pt,phi_+}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I1_T23B_2pt_phi_p(0.08,  0.0), "T_23B: I_1^{2pt,phi_+}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I1_T23B_2pt_phi_p(0.08, +5.0), "T_23B: I_1^{2pt,phi_+}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_1 phi_bar */
            results.add({ this->I1_T23B_2pt_phi_bar(0.04, -5.0), "T_23B: I_1^{2pt,phi_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I1_T23B_2pt_phi_bar(0.04,  0.0), "T_23B: I_1^{2pt,phi_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I1_T23B_2pt_phi_bar(0.04, +5.0), "T_23B: I_1^{2pt,phi_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I1_T23B_2pt_phi_bar(0.08, -5.0), "T_23B: I_1^{2pt,phi_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I1_T23B_2pt_phi_bar(0.08,  0.0), "T_23B: I_1^{2pt,phi_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I1_T23B_2pt_phi_bar(0.08, +5.0), "T_23B: I_1^{2pt,phi_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2 phi_bar */
            results.add({ this->I2_T23B_2pt_phi_bar(0.04, -5.0), "T_23B: I_2^{2pt,phi_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_T23B_2pt_phi_bar(0.04,  0.0), "T_23B: I_2^{2pt,phi_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_T23B_2pt_phi_bar(0.04, +5.0), "T_23B: I_2^{2pt,phi_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2_T23B_2pt_phi_bar(0.08, -5.0), "T_23B: I_2^{2pt,phi_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_T23B_2pt_phi_bar(0.08,  0.0), "T_23B: I_2^{2pt,phi_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_T23B_2pt_phi_bar(0.08, +5.0), "T_23B: I_2^{2pt,phi_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2 g_+ */
            results.add({ this->I2_T23B_2pt_g_p(0.04, -5.0), "T_23B: I_2^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_T23B_2pt_g_p(0.04,  0.0), "T_23B: I_2^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_T23B_2pt_g_p(0.04, +5.0), "T_23B: I_2^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2_T23B_2pt_g_p(0.08, -5.0), "T_23B: I_2^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_T23B_2pt_g_p(0.08,  0.0), "T_23B: I_2^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_T23B_2pt_g_p(0.08, +5.0), "T_23B: I_2^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });
            /* I_3 g_+ */
            results.add({ this->I3_T23B_2pt_g_p(0.04, -5.0), "T_23B: I_3^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3_T23B_2pt_g_p(0.04,  0.0), "T_23B: I_3^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3_T23B_2pt_g_p(0.04, +5.0), "T_23B: I_3^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3_T23B_2pt_g_p(0.08, -5.0), "T_23B: I_3^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3_T23B_2pt_g_p(0.08,  0.0), "T_23B: I_3^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3_T23B_2pt_g_p(0.08, +5.0), "T_23B: I_3^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3d1 g_+ */
            results.add({ this->I3d1_T23B_2pt_g_p(0.04, -5.0), "T_23B: I_3d1^{2pt,g_p}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d1_T23B_2pt_g_p(0.04,  0.0), "T_23B: I_3d1^{2pt,g_p}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d1_T23B_2pt_g_p(0.04, +5.0), "T_23B: I_3d1^{2pt,g_p}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3d1_T23B_2pt_g_p(0.08, -5.0), "T_23B: I_3d1^{2pt,g_p}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d1_T23B_2pt_g_p(0.08,  0.0), "T_23B: I_3d1^{2pt,g_p}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d1_T23B_2pt_g_p(0.08, +5.0), "T_23B: I_3d1^{2pt,g_p}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_2 g_bar */
            results.add({ this->I2_T23B_2pt_g_bar(0.04, -5.0), "T_23B: I_2^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_T23B_2pt_g_bar(0.04,  0.0), "T_23B: I_2^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_T23B_2pt_g_bar(0.04, +5.0), "T_23B: I_2^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I2_T23B_2pt_g_bar(0.08, -5.0), "T_23B: I_2^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I2_T23B_2pt_g_bar(0.08,  0.0), "T_23B: I_2^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I2_T23B_2pt_g_bar(0.08, +5.0), "T_23B: I_2^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3 g_bar */
            results.add({ this->I3_T23B_2pt_g_bar(0.04, -5.0), "T_23B: I_3^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3_T23B_2pt_g_bar(0.04,  0.0), "T_23B: I_3^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3_T23B_2pt_g_bar(0.04, +5.0), "T_23B: I_3^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3_T23B_2pt_g_bar(0.08, -5.0), "T_23B: I_3^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3_T23B_2pt_g_bar(0.08,  0.0), "T_23B: I_3^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3_T23B_2pt_g_bar(0.08, +5.0), "T_23B: I_3^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_3d1 g_bar */
            results.add({ this->I3d1_T23B_2pt_g_bar(0.04, -5.0), "T_23B: I_3d1^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d1_T23B_2pt_g_bar(0.04,  0.0), "T_23B: I_3d1^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d1_T23B_2pt_g_bar(0.04, +5.0), "T_23B: I_3d1^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I3d1_T23B_2pt_g_bar(0.08, -5.0), "T_23B: I_3d1^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I3d1_T23B_2pt_g_bar(0.08,  0.0), "T_23B: I_3d1^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I3d1_T23B_2pt_g_bar(0.08, +5.0), "T_23B: I_3d1^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_4 g_bar */
            results.add({ this->I4_T23B_2pt_g_bar(0.04, -5.0), "T_23B: I_4^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I4_T23B_2pt_g_bar(0.04,  0.0), "T_23B: I_4^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I4_T23B_2pt_g_bar(0.04, +5.0), "T_23B: I_4^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I4_T23B_2pt_g_bar(0.08, -5.0), "T_23B: I_4^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I4_T23B_2pt_g_bar(0.08,  0.0), "T_23B: I_4^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I4_T23B_2pt_g_bar(0.08, +5.0), "T_23B: I_4^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_4d1 g_bar */
            results.add({ this->I4d1_T23B_2pt_g_bar(0.04, -5.0), "T_23B: I_4d1^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d1_T23B_2pt_g_bar(0.04,  0.0), "T_23B: I_4d1^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d1_T23B_2pt_g_bar(0.04, +5.0), "T_23B: I_4d1^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I4d1_T23B_2pt_g_bar(0.08, -5.0), "T_23B: I_4d1^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d1_T23B_2pt_g_bar(0.08,  0.0), "T_23B: I_4d1^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d1_T23B_2pt_g_bar(0.08, +5.0), "T_23B: I_4d1^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* I_4d2 g_bar */
            results.add({ this->I4d2_T23B_2pt_g_bar(0.04, -5.0), "T_23B: I_4d2^{2pt,g_bar}(sigma = 0.04, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d2_T23B_2pt_g_bar(0.04,  0.0), "T_23B: I_4d2^{2pt,g_bar}(sigma = 0.04, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d2_T23B_2pt_g_bar(0.04, +5.0), "T_23B: I_4d2^{2pt,g_bar}(sigma = 0.04, q2 = +5.0 GeV^2)" });

            results.add({ this->I4d2_T23B_2pt_g_bar(0.08, -5.0), "T_23B: I_4d2^{2pt,g_bar}(sigma = 0.08, q2 = -5.0 GeV^2)" });
            results.add({ this->I4d2_T23B_2pt_g_bar(0.08,  0.0), "T_23B: I_4d2^{2pt,g_bar}(sigma = 0.08, q2 =  0.0 GeV^2)" });
            results.add({ this->I4d2_T23B_2pt_g_bar(0.08, +5.0), "T_23B: I_4d2^{2pt,g_bar}(sigma = 0.08, q2 = +5.0 GeV^2)" });

            /* 3 particle */

            /* I_1 phi_3 */
            results.add({ this->I1_T23B_3pt_phi_3(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.1, 5.0),            "T_23B: I_1^{3pt,phi_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I1_T23B_3pt_phi_3(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.5, 5.0),            "T_23B: I_1^{3pt,phi_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I1_T23B_3pt_phi_3(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.1, 5.0),            "T_23B: I_1^{3pt,phi_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I1_T23B_3pt_phi_3(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.5, 5.0),            "T_23B: I_1^{3pt,phi_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 phi_3 */
            results.add({ this->I2_T23B_3pt_phi_3(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.1, 5.0),            "T_23B: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23B_3pt_phi_3(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.5, 5.0),            "T_23B: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23B_3pt_phi_3(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.1, 5.0),            "T_23B: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23B_3pt_phi_3(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.5, 5.0),            "T_23B: I_2^{3pt,phi_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 phi_bar_3 */
            results.add({ this->I2_T23B_3pt_phi_bar_3(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.1, 5.0),        "T_23B: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23B_3pt_phi_bar_3(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.5, 5.0),        "T_23B: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23B_3pt_phi_bar_3(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.1, 5.0),        "T_23B: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23B_3pt_phi_bar_3(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.5, 5.0),        "T_23B: I_2^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 phi_bar_3 */
            results.add({ this->I3_T23B_3pt_phi_bar_3(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.1, 5.0),        "T_23B: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23B_3pt_phi_bar_3(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.5, 5.0),        "T_23B: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23B_3pt_phi_bar_3(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.1, 5.0),        "T_23B: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23B_3pt_phi_bar_3(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.5, 5.0),        "T_23B: I_3^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A phi_bar_3 */
            results.add({ this->I3d1A_T23B_3pt_phi_bar_3(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.1, 5.0),     "T_23B: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23B_3pt_phi_bar_3(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.5, 5.0),     "T_23B: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23B_3pt_phi_bar_3(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.1, 5.0),     "T_23B: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23B_3pt_phi_bar_3(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.5, 5.0),     "T_23B: I_3d1A^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B phi_bar_3 */
            results.add({ this->I3d1B_T23B_3pt_phi_bar_3(this->sigma(s0_0_T23B(), 5.0), 1.0, 5.0),          "T_23B: I_3d1B^{3pt,phi_bar_3}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_T23B_3pt_phi_bar_3(this->sigma(s0_0_T23B(), 5.0), 3.0, 5.0),          "T_23B: I_3d1B^{3pt,phi_bar_3}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C phi_bar_3 */
            results.add({ this->I3d1C_T23B_3pt_phi_bar_3(this->sigma(s0_0_T23B(), 5.0), 0.1, 5.0),          "T_23B: I_3d1C^{3pt,phi_bar_3}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_T23B_3pt_phi_bar_3(this->sigma(s0_0_T23B(), 5.0), 0.5, 5.0),          "T_23B: I_3d1C^{3pt,phi_bar_3}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 phi_bar_bar_3 */
            results.add({ this->I3_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.1, 5.0),    "T_23B: I_3^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.5, 5.0),    "T_23B: I_3^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.1, 5.0),    "T_23B: I_3^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.5, 5.0),    "T_23B: I_3^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A phi_bar_bar_3 */
            results.add({ this->I3d1A_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.1, 5.0), "T_23B: I_3d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.5, 5.0), "T_23B: I_3d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.1, 5.0), "T_23B: I_3d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.5, 5.0), "T_23B: I_3d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B phi_bar_bar_3 */
            results.add({ this->I3d1B_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 1.0, 5.0),      "T_23B: I_3d1B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 3.0, 5.0),      "T_23B: I_3d1B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C phi_bar_bar_3 */
            results.add({ this->I3d1C_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 0.1, 5.0),      "T_23B: I_3d1C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 0.5, 5.0),      "T_23B: I_3d1C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4 phi_bar_bar_3 */
            results.add({ this->I4_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.1, 5.0),    "T_23B: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.5, 5.0),    "T_23B: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.1, 5.0),    "T_23B: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.5, 5.0),    "T_23B: I_4^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1A phi_bar_bar_3 */
            results.add({ this->I4d1A_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.1, 5.0), "T_23B: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.5, 5.0), "T_23B: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.1, 5.0), "T_23B: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.5, 5.0), "T_23B: I_4d1A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1B phi_bar_bar_3 */
            results.add({ this->I4d1B_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 1.0, 5.0),      "T_23B: I_4d1B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d1B_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 3.0, 5.0),      "T_23B: I_4d1B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d1C phi_bar_bar_3 */
            results.add({ this->I4d1C_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 0.1, 5.0),      "T_23B: I_4d1C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1C_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 0.5, 5.0),      "T_23B: I_4d1C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2A phi_bar_bar_3 */
            results.add({ this->I4d2A_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.1, 5.0), "T_23B: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.5, 5.0), "T_23B: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.1, 5.0), "T_23B: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.5, 5.0), "T_23B: I_4d2A^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2B phi_bar_bar_3 */
            results.add({ this->I4d2B_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 1.0, 5.0),      "T_23B: I_4d2B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d2B_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 3.0, 5.0),      "T_23B: I_4d2B^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d2C phi_bar_bar_3 */
            results.add({ this->I4d2C_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 0.1, 5.0),      "T_23B: I_4d2C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2C_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 0.5, 5.0),      "T_23B: I_4d2C^{3pt,phi_bar_bar_3}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2D phi_bar_bar_3 */
            results.add({ this->I4d2D_T23B_3pt_phi_bar_bar_3(this->sigma(s0_0_T23B(), 5.0), 5.0),           "T_23B: I_4d2D^{3pt,phi_bar_bar_3}(sigma=sigma_0, q2=5.0 GeV^2)"});

            /* I_2 phi_4 */
            results.add({ this->I2_T23B_3pt_phi_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.1, 5.0),            "T_23B: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23B_3pt_phi_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.5, 5.0),            "T_23B: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23B_3pt_phi_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.1, 5.0),            "T_23B: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23B_3pt_phi_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.5, 5.0),            "T_23B: I_2^{3pt,phi_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 phi_bar_4 */
            results.add({ this->I2_T23B_3pt_phi_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.1, 5.0),        "T_23B: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23B_3pt_phi_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.5, 5.0),        "T_23B: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23B_3pt_phi_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.1, 5.0),        "T_23B: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23B_3pt_phi_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.5, 5.0),        "T_23B: I_2^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 phi_bar_4 */
            results.add({ this->I3_T23B_3pt_phi_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.1, 5.0),        "T_23B: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23B_3pt_phi_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.5, 5.0),        "T_23B: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23B_3pt_phi_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.1, 5.0),        "T_23B: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23B_3pt_phi_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.5, 5.0),        "T_23B: I_3^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A phi_bar_4 */
            results.add({ this->I3d1A_T23B_3pt_phi_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.1, 5.0),     "T_23B: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23B_3pt_phi_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.5, 5.0),     "T_23B: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23B_3pt_phi_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.1, 5.0),     "T_23B: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23B_3pt_phi_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.5, 5.0),     "T_23B: I_3d1A^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B phi_bar_4 */
            results.add({ this->I3d1B_T23B_3pt_phi_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 5.0),          "T_23B: I_3d1B^{3pt,phi_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_T23B_3pt_phi_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 5.0),          "T_23B: I_3d1B^{3pt,phi_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C phi_bar_4 */
            results.add({ this->I3d1C_T23B_3pt_phi_bar_4(this->sigma(s0_0_T23B(), 5.0), 0.1, 5.0),          "T_23B: I_3d1C^{3pt,phi_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_T23B_3pt_phi_bar_4(this->sigma(s0_0_T23B(), 5.0), 0.5, 5.0),          "T_23B: I_3d1C^{3pt,phi_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 phi_bar_bar_4 */
            results.add({ this->I2_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.1, 5.0),    "T_23B: I_2^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.5, 5.0),    "T_23B: I_2^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.1, 5.0),    "T_23B: I_2^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.5, 5.0),    "T_23B: I_2^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 phi_bar_bar_4 */
            results.add({ this->I3_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.1, 5.0),    "T_23B: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.5, 5.0),    "T_23B: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.1, 5.0),    "T_23B: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.5, 5.0),    "T_23B: I_3^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A phi_bar_bar_4 */
            results.add({ this->I3d1A_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.1, 5.0), "T_23B: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.5, 5.0), "T_23B: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.1, 5.0), "T_23B: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.5, 5.0), "T_23B: I_3d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B phi_bar_bar_4 */
            results.add({ this->I3d1B_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 5.0),      "T_23B: I_3d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 5.0),      "T_23B: I_3d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C phi_bar_bar_4 */
            results.add({ this->I3d1C_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 0.1, 5.0),      "T_23B: I_3d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 0.5, 5.0),      "T_23B: I_3d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4 phi_bar_bar_4 */
            results.add({ this->I4_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.1, 5.0),    "T_23B: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.5, 5.0),    "T_23B: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.1, 5.0),    "T_23B: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.5, 5.0),    "T_23B: I_4^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1A phi_bar_bar_4 */
            results.add({ this->I4d1A_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.1, 5.0), "T_23B: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.5, 5.0), "T_23B: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.1, 5.0), "T_23B: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1A_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.5, 5.0), "T_23B: I_4d1A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d1B phi_bar_bar_4 */
            results.add({ this->I4d1B_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 5.0),      "T_23B: I_4d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d1B_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 5.0),      "T_23B: I_4d1B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d1C phi_bar_bar_4 */
            results.add({ this->I4d1C_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 0.1, 5.0),      "T_23B: I_4d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d1C_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 0.5, 5.0),      "T_23B: I_4d1C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2A phi_bar_bar_4 */
            results.add({ this->I4d2A_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.1, 5.0), "T_23B: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.5, 5.0), "T_23B: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.1, 5.0), "T_23B: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2A_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.5, 5.0), "T_23B: I_4d2A^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2B phi_bar_bar_4 */
            results.add({ this->I4d2B_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 5.0),      "T_23B: I_4d2B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I4d2B_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 5.0),      "T_23B: I_4d2B^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_4d2C phi_bar_bar_4 */
            results.add({ this->I4d2C_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 0.1, 5.0),      "T_23B: I_4d2C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I4d2C_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 0.5, 5.0),      "T_23B: I_4d2C^{3pt,phi_bar_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_4d2D phi_bar_bar_4 */
            results.add({ this->I4d2D_T23B_3pt_phi_bar_bar_4(this->sigma(s0_0_T23B(), 5.0), 5.0),           "T_23B: I_4d2D^{3pt,phi_bar_bar_4}(sigma=sigma_0, q2=5.0 GeV^2)"});

            /* I_2 psi_bar_4 */
            results.add({ this->I2_T23B_3pt_psi_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.1, 5.0),        "T_23B: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23B_3pt_psi_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.5, 5.0),        "T_23B: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23B_3pt_psi_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.1, 5.0),        "T_23B: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23B_3pt_psi_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.5, 5.0),        "T_23B: I_2^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 psi_bar_4 */
            results.add({ this->I3_T23B_3pt_psi_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.1, 5.0),        "T_23B: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23B_3pt_psi_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.5, 5.0),        "T_23B: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23B_3pt_psi_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.1, 5.0),        "T_23B: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23B_3pt_psi_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.5, 5.0),        "T_23B: I_3^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A psi_bar_4 */
            results.add({ this->I3d1A_T23B_3pt_psi_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.1, 5.0),     "T_23B: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23B_3pt_psi_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.5, 5.0),     "T_23B: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23B_3pt_psi_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.1, 5.0),     "T_23B: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23B_3pt_psi_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.5, 5.0),     "T_23B: I_3d1A^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B psi_bar_4 */
            results.add({ this->I3d1B_T23B_3pt_psi_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 5.0),          "T_23B: I_3d1B^{3pt,psi_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_T23B_3pt_psi_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 5.0),          "T_23B: I_3d1B^{3pt,psi_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C psi_bar_4 */
            results.add({ this->I3d1C_T23B_3pt_psi_bar_4(this->sigma(s0_0_T23B(), 5.0), 0.1, 5.0),          "T_23B: I_3d1C^{3pt,psi_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_T23B_3pt_psi_bar_4(this->sigma(s0_0_T23B(), 5.0), 0.5, 5.0),          "T_23B: I_3d1C^{3pt,psi_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_2 chi_bar_4 */
            results.add({ this->I2_T23B_3pt_chi_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.1, 5.0),        "T_23B: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23B_3pt_chi_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.5, 5.0),        "T_23B: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23B_3pt_chi_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.1, 5.0),        "T_23B: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I2_T23B_3pt_chi_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.5, 5.0),        "T_23B: I_2^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3 chi_bar_4 */
            results.add({ this->I3_T23B_3pt_chi_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.1, 5.0),        "T_23B: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23B_3pt_chi_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.5, 5.0),        "T_23B: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23B_3pt_chi_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.1, 5.0),        "T_23B: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3_T23B_3pt_chi_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.5, 5.0),        "T_23B: I_3^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1A chi_bar_4 */
            results.add({ this->I3d1A_T23B_3pt_chi_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.1, 5.0),     "T_23B: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23B_3pt_chi_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 0.5, 5.0),     "T_23B: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, w_2=0.5, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23B_3pt_chi_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.1, 5.0),     "T_23B: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1A_T23B_3pt_chi_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 0.5, 5.0),     "T_23B: I_3d1A^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, w_2=0.5, q2=5.0 GeV^2)"});

            /* I_3d1B chi_bar_4 */
            results.add({ this->I3d1B_T23B_3pt_chi_bar_4(this->sigma(s0_0_T23B(), 5.0), 1.0, 5.0),          "T_23B: I_3d1B^{3pt,chi_bar_4}(sigma=sigma_0, w_1=1.0, q2=5.0 GeV^2)"});
            results.add({ this->I3d1B_T23B_3pt_chi_bar_4(this->sigma(s0_0_T23B(), 5.0), 3.0, 5.0),          "T_23B: I_3d1B^{3pt,chi_bar_4}(sigma=sigma_0, w_1=3.0, q2=5.0 GeV^2)"});

            /* I_3d1C chi_bar_4 */
            results.add({ this->I3d1C_T23B_3pt_chi_bar_4(this->sigma(s0_0_T23B(), 5.0), 0.1, 5.0),          "T_23B: I_3d1C^{3pt,chi_bar_4}(sigma=sigma_0, w_2=0.1, q2=5.0 GeV^2)"});
            results.add({ this->I3d1C_T23B_3pt_chi_bar_4(this->sigma(s0_0_T23B(), 5.0), 0.5, 5.0),          "T_23B: I_3d1C^{3pt,chi_bar_4}(sigma=sigma_0, w_2=0.5, q2=5.0 GeV^2)"});

            return results;
        }

    };

    template <typename Process_>
    const std::vector<OptionSpecification>
    Implementation<AnalyticFormFactorBToVLCSR<Process_>>::options
    {
        { "2pt"_ok,    { "tw2+3", "all", "off" }, "all"   },
        { "3pt"_ok,    { "tw3+4", "all", "off" }, "all"   },
        { "method"_ok, { "borel", "dispersive" }, "borel" }
    };

    template <typename Process_>
    AnalyticFormFactorBToVLCSR<Process_>::AnalyticFormFactorBToVLCSR(const Parameters & p, const Options & o) :
        PrivateImplementationPattern<AnalyticFormFactorBToVLCSR<Process_>>(new Implementation<AnalyticFormFactorBToVLCSR<Process_>>(p, o, *this))
    {
    }

    template <typename Process_>
    AnalyticFormFactorBToVLCSR<Process_>::~AnalyticFormFactorBToVLCSR()
    {
    }

    template <typename Process_>
    FormFactors<PToV> *
    AnalyticFormFactorBToVLCSR<Process_>::make(const Parameters & p, const Options & o)
    {
        return new AnalyticFormFactorBToVLCSR<Process_>(p, o);
    }

    template <typename Process_>
    double
    AnalyticFormFactorBToVLCSR<Process_>::a_0(const double & q2) const
    {
        const double m_B = this->_imp->m_B();
        const double m_V = this->_imp->m_V();

        return ((m_B + m_V) * this->_imp->a_1(q2) - (m_B - m_V) * this->_imp->a_2(q2) - 2.0 * m_V * this->_imp->a_30(q2)) / (2.0 * m_V);
    }

    template <typename Process_>
    double
    AnalyticFormFactorBToVLCSR<Process_>::a_1(const double & q2) const
    {
        return this->_imp->a_1(q2);
    }

    template <typename Process_>
    double
    AnalyticFormFactorBToVLCSR<Process_>::a_2(const double & q2) const
    {
        return this->_imp->a_2(q2);
    }

    template <typename Process_>
    double
    AnalyticFormFactorBToVLCSR<Process_>::a_12(const double & q2) const
    {
        const double m_B = this->_imp->m_B();
        const double m_V = this->_imp->m_V();

        const double c_1 = (m_B + m_V) * (m_B * m_B - m_V * m_V - q2) / (16.0 * m_B * m_V * m_V);
        const double c_2 = eos::lambda(m_B * m_B, m_V * m_V, q2) / (16.0 * m_B * m_V * m_V * (m_B + m_V));

        return c_1 * this->_imp->a_1(q2) - c_2 * this->_imp->a_2(q2);
    }

    template <typename Process_>
    double
    AnalyticFormFactorBToVLCSR<Process_>::v(const double & q2) const
    {
        return this->_imp->v(q2);
    }

    template <typename Process_>
    double
    AnalyticFormFactorBToVLCSR<Process_>::t_1(const double & q2) const
    {
        return this->_imp->t_1(q2);
    }

    template <typename Process_>
    double
    AnalyticFormFactorBToVLCSR<Process_>::t_2(const double & q2) const
    {
        const double m_B = this->_imp->m_B();
        const double m_V = this->_imp->m_V();

        const double c_1 = (power_of<2>(m_B) - power_of<2>(m_V) - q2) / (power_of<2>(m_B) - power_of<2>(m_V));
        const double c_2 = 2.0 * q2 / (power_of<2>(m_B) - power_of<2>(m_V));

        return c_1 * this->_imp->t_23A(q2) + c_2 * this->_imp->t_23B(q2);
    }

    template <typename Process_>
    double
    AnalyticFormFactorBToVLCSR<Process_>::t_3(const double & q2) const
    {
        return 1.0 * this->_imp->t_23A(q2) - 2.0 * this->_imp->t_23B(q2);
    }

    template <typename Process_>
    double
    AnalyticFormFactorBToVLCSR<Process_>::t_23(const double & q2) const
    {
        const double m_B = this->_imp->m_B();
        const double m_V = this->_imp->m_V();

        const double c_1 = (m_B + m_V) / (8.0 * m_B * m_V * m_V) * (m_B * m_B + 3.0 * m_V * m_V - q2);
        const double c_2 = (m_B + m_V) / (8.0 * m_B * m_V * m_V) * (- eos::lambda(m_B * m_B, m_V * m_V, q2) / (m_B * m_B - m_V * m_V));
        const double c_3 = (power_of<2>(m_B) - power_of<2>(m_V) - q2) / (power_of<2>(m_B) - power_of<2>(m_V));
        const double c_4 = 2.0 * q2 / (power_of<2>(m_B) - power_of<2>(m_V));

        return c_1 * (c_3 * this->_imp->t_23A(q2) + c_4 * this->_imp->t_23B(q2))
             + c_2 * (1.0 * this->_imp->t_23A(q2) - 2.0 * this->_imp->t_23B(q2));
    }

    template <typename Process_>
    double
    AnalyticFormFactorBToVLCSR<Process_>::normalized_moment_1_a_1(const double & q2) const
    {
        return this->_imp->normalized_moment_1_a_1(q2);
    }

    template <typename Process_>
    double
    AnalyticFormFactorBToVLCSR<Process_>::normalized_moment_1_a_2(const double & q2) const
    {
        return this->_imp->normalized_moment_1_a_2(q2);
    }

    template <typename Process_>
    double
    AnalyticFormFactorBToVLCSR<Process_>::normalized_moment_1_a_30(const double & q2) const
    {
        return this->_imp->normalized_moment_1_a_30(q2);
    }

    template <typename Process_>
    double
    AnalyticFormFactorBToVLCSR<Process_>::normalized_moment_1_v(const double & q2) const
    {
        return this->_imp->normalized_moment_1_v(q2);
    }

    template <typename Process_>
    double
    AnalyticFormFactorBToVLCSR<Process_>::normalized_moment_1_t_1(const double & q2) const
    {
        return this->_imp->normalized_moment_1_t_1(q2);
    }

    template <typename Process_>
    double
    AnalyticFormFactorBToVLCSR<Process_>::normalized_moment_1_t_23A(const double & q2) const
    {
        return this->_imp->normalized_moment_1_t_23A(q2);
    }

    template <typename Process_>
    double
    AnalyticFormFactorBToVLCSR<Process_>::normalized_moment_1_t_23B(const double & q2) const
    {
        return this->_imp->normalized_moment_1_t_23B(q2);
    }

    template <typename Process_>
    double
    AnalyticFormFactorBToVLCSR<Process_>::f_perp(const double &) const
    {
        return 0.0;
    }

    template <typename Process_>
    double
    AnalyticFormFactorBToVLCSR<Process_>::f_para(const double &) const
    {
        return 0.0;
    }

    template <typename Process_>
    double
    AnalyticFormFactorBToVLCSR<Process_>::f_long(const double &) const
    {
        return 0.0;
    }

    template <typename Process_>
    double
    AnalyticFormFactorBToVLCSR<Process_>::f_perp_T(const double &) const
    {
        return 0.0;
    }

    template <typename Process_>
    double
    AnalyticFormFactorBToVLCSR<Process_>::f_para_T(const double &) const
    {
        return 0.0;
    }

    template <typename Process_>
    double
    AnalyticFormFactorBToVLCSR<Process_>::f_long_T(const double &) const
    {
        return 0.0;
    }

    template <typename Process_>
    Diagnostics
    AnalyticFormFactorBToVLCSR<Process_>::diagnostics() const
    {
        return this->_imp->diagnostics();
    }

    template <typename Process_>
    const std::set<ReferenceName>
    AnalyticFormFactorBToVLCSR<Process_>::references
    {
        "KMO:2005A"_rn,
        "KMO:2006A"_rn,
        "FKKM:2008A"_rn,
        "GKvD:2018A"_rn
    };

    template <typename Process_>
    std::vector<OptionSpecification>::const_iterator
    AnalyticFormFactorBToVLCSR<Process_>::begin_options()
    {
        return Implementation<AnalyticFormFactorBToVLCSR<Process_>>::options.cbegin();
    }

    template <typename Process_>
    std::vector<OptionSpecification>::const_iterator
    AnalyticFormFactorBToVLCSR<Process_>::end_options()
    {
        return Implementation<AnalyticFormFactorBToVLCSR<Process_>>::options.cend();
    }
}

#endif
