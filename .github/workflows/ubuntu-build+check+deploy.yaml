on:
    push:
        branches: [ release, master, testing ]

    pull_request:

    release:
        types: [ published ]

name: Build/Check/Deploy on Ubuntu

concurrency:
  group: Ubuntu, ${{ github.head_ref }}
  cancel-in-progress: true

jobs:
    ubuntu-build:
        strategy:
            matrix:
                cfg:
                    - { os: jammy,    cxx: g++,          cxxflags: '-O2 -g -march=x86-64' }
                    - { os: jammy,    cxx: clang++-14,   cxxflags: '-O2 -g -march=x86-64' }
        name: Build on ${{ matrix.cfg.os }} using ${{ matrix.cfg.cxx }}
        runs-on: ubuntu-24.04
        container:
            image: eoshep/ubuntu-${{ matrix.cfg.os }}:7ca1af11a448277dc316037c31d448ad30bed600
        steps:
            - name: Checkout git repository
              uses: actions/checkout@v4
              with:
                path: _src/

            - name: Fetch tags
              shell: bash
              run: |
                pushd _src
                git fetch --depth=1 origin +refs/tags/*:refs/tags/*
                popd

            - name: Create build directory
              shell: bash
              run: mkdir -p _build

            - name: Configure
              shell: bash
              env:
                CXX: "${{ matrix.cfg.cxx }}"
                CXXFLAGS: "${{ matrix.cfg.cxxflags }}"
              run: |
                pushd _src
                ./autogen.bash
                popd
                pushd _build
                which ${CXX} || ( echo c++ compiler not found ; exit 1 )
                ../_src/configure \
                  --enable-python \
                  --prefix=/opt/venv/ \
                  --enable-lto \
                  || ( cat config.log ; exit 2 )
                popd
                tar caf _src.tar _src

            - name: Build
              shell: bash
              run: |
                pushd _build
                make -j4 all
                popd
                tar caf _build.tar _build

            - name: Upload configured source as artifact
              uses: actions/upload-artifact@v4
              with:
                name: eos-source-${{ matrix.cfg.os }}-${{ matrix.cfg.cxx }}-${{ github.sha }}
                path: _src.tar

            - name: Upload build as artifact
              uses: actions/upload-artifact@v4
              with:
                name: eos-build-${{ matrix.cfg.os }}-${{ matrix.cfg.cxx }}-${{ github.sha }}
                path: _build.tar

    ubuntu-build-doc:
        needs: ubuntu-build
        strategy:
            matrix:
                cfg:
                    - { os: jammy,    cxx: g++,          cxxflags: '-O2 -g -march=x86-64' }
        name: Documentation on ${{ matrix.cfg.os }}
        runs-on: ubuntu-24.04
        container:
            image: eoshep/ubuntu-${{ matrix.cfg.os }}:7ca1af11a448277dc316037c31d448ad30bed600
        steps:
            - name: Download configured source as artifact
              uses: actions/download-artifact@v4
              with:
                name: eos-source-${{ matrix.cfg.os }}-${{ matrix.cfg.cxx }}-${{ github.sha }}

            - name: Download build as artifact
              uses: actions/download-artifact@v4
              with:
                name: eos-build-${{ matrix.cfg.os }}-${{ matrix.cfg.cxx }}-${{ github.sha }}

            - name: Build documentation
              shell: bash
              run: |
                tar fx _src.tar
                pushd _src
                # determine the release id
                export EOS_RELEASE=$(git describe --abbrev=0 --tags --exact-match HEAD)
                popd
                tar fx _build.tar
                pushd _build
                make install
                make -C ../_src/doc/ doc-check
                make -C ../_src/doc/ html BUILDDIR=$(pwd)/doc O=-a
                if [[ -n ${EOS_RELEASE} ]] ; then
                    mv $(pwd)/doc/html $(pwd)/doc/${EOS_RELEASE}
                    mkdir $(pwd)/doc/html
                    mv $(pwd)/doc/${EOS_RELEASE} $(pwd)/doc/html/
                fi
                popd
                tar caf doc.tar _build/doc/html

            - name: Upload documentation as artifact
              uses: actions/upload-artifact@v4
              with:
                name: eos-doc-${{ github.sha }}
                path: doc.tar

    ubuntu-check:
        needs: ubuntu-build
        strategy:
            matrix:
                cfg:
                    - { os: jammy,    cxx: g++,          cxxflags: '-O2 -g -march=x86-64' }
                    - { os: jammy,    cxx: clang++-14,   cxxflags: '-O2 -g -march=x86-64' }
        name: Check on ${{ matrix.cfg.os }} using ${{ matrix.cfg.cxx }}
        runs-on: ubuntu-24.04
        container:
            image: eoshep/ubuntu-${{ matrix.cfg.os }}:7ca1af11a448277dc316037c31d448ad30bed600
        steps:
            - name: Download configured source as artifact
              uses: actions/download-artifact@v4
              with:
                name: eos-source-${{ matrix.cfg.os }}-${{ matrix.cfg.cxx }}-${{ github.sha }}

            - name: Download build as artifact
              uses: actions/download-artifact@v4
              with:
                name: eos-build-${{ matrix.cfg.os }}-${{ matrix.cfg.cxx }}-${{ github.sha }}

            - name: Check
              shell: bash
              run: |
                tar fx _src.tar
                tar fx _build.tar
                pushd _build
                make -j4 distcheck DISTCHECK_CONFIGURE_FLAGS="--enable-python --prefix=/usr" VERBOSE=1
                popd

    ubuntu-examples:
        needs: ubuntu-build
        strategy:
            matrix:
                cfg:
                    - { os: jammy,    cxx: g++,          cxxflags: '-O2 -g -march=x86-64' }
                    - { os: jammy,    cxx: clang++-14,   cxxflags: '-O2 -g -march=x86-64' }
        name: Run examples on ${{ matrix.cfg.os }} using ${{ matrix.cfg.cxx }}
        runs-on: ubuntu-24.04
        container:
            image: eoshep/ubuntu-${{ matrix.cfg.os }}:7ca1af11a448277dc316037c31d448ad30bed600
        steps:
            - name: Download configured source as artifact
              uses: actions/download-artifact@v4
              with:
                name: eos-source-${{ matrix.cfg.os }}-${{ matrix.cfg.cxx }}-${{ github.sha }}

            - name: Download build as artifact
              uses: actions/download-artifact@v4
              with:
                name: eos-build-${{ matrix.cfg.os }}-${{ matrix.cfg.cxx }}-${{ github.sha }}

            - name: Run examples
              shell: bash
              run: |
                tar fx _src.tar
                tar fx _build.tar
                pushd _build
                make install
                popd
                pushd _src
                make -C examples/    examples
                make -C examples/cli examples
                popd

            - name: Upload processed example notebooks as artifact
              if: always()
              uses: actions/upload-artifact@v4
              with:
                name: eos-examples-${{ matrix.cfg.os }}-${{ matrix.cfg.cxx }}-${{ github.sha }}
                path: _src/examples/*.ipynb

    ubuntu-deploy:
        needs: [ ubuntu-build, ubuntu-build-doc, ubuntu-check, ubuntu-examples ]
        strategy:
            matrix:
                cfg:
                    - { os: jammy,    cxx: g++,          cxxflags: '-O2 -g -march=x86-64' }
        name: Deploy on ${{ matrix.cfg.os }} using ${{ matrix.cfg.cxx }}
        runs-on: ubuntu-24.04
        container:
            image: eoshep/ubuntu-${{ matrix.cfg.os }}:7ca1af11a448277dc316037c31d448ad30bed600
        steps:
            - name: Checkout git repository
              uses: actions/checkout@v4
              with:
                path: _src/

            - name: Fetch tags
              shell: bash
              run: |
                pushd _src
                git fetch --depth=1 origin +refs/tags/*:refs/tags/*
                popd

            - name: Create build directory
              shell: bash
              run: mkdir -p _build

            # We cannot resuse the configure & build artifacts for deployment,
            # since we need to target '/usr' rather than the virtual environment
            # in '/opt/venv', and we need to modify the pythondir.
            - name: Configure
              shell: bash
              env:
                CXX: "${{ matrix.cfg.cxx }}"
                CXXFLAGS: "${{ matrix.cfg.cxxflags }}"
              run: |
                pushd _src
                ./autogen.bash
                popd
                pushd _build
                which ${CXX} || ( echo c++ compiler not found ; exit 1 )
                ../_src/configure \
                  --enable-python \
                  --prefix=/usr \
                  --with-custom-pythondir=dist-packages \
                  --enable-lto \
                  || ( cat config.log ; exit 2 )
                popd

            - name: Build
              shell: bash
              run: |
                pushd _build
                make -j4 all
                popd

            - name: Build .deb file
              shell: bash
              run: |
                pushd _src
                export EOS_VERSION=$(git describe --abbrev=0 --tags)
                export EOS_VERSION=${EOS_VERSION#v}
                popd
                pushd _build
                echo Building debian package for ${{ matrix.cfg.os }}
                export DESTDIR=/tmp/eos-${EOS_VERSION}
                make deb DESTDIR=${DESTDIR} OS=${{ matrix.cfg.os }}
                dpkg -i /tmp/eos-${EOS_VERSION}.deb
                popd

            - name: Deploy .deb file to Packagecloud.io
              if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags/v')
              shell: bash
              env:
                PACKAGECLOUD_TOKEN: "${{ secrets.PACKAGECLOUD_TOKEN }}"
              run: |
                pushd _src
                export EOS_VERSION=$(git describe --abbrev=0 --tags)
                export EOS_VERSION=${EOS_VERSION#v}
                popd
                package_cloud push eos/eos/ubuntu/${{ matrix.cfg.os }} /tmp/eos-${EOS_VERSION}.deb

            - name: Upload .deb file as artifact
              uses: actions/upload-artifact@v4
              with:
                name: eos-${{ matrix.cfg.os }}-${{ matrix.cfg.cxx }}-${{ github.sha }}.deb
                path: /tmp/eos-*.deb

    ubuntu-deploy-doc:
        needs: ubuntu-build-doc
        strategy:
            matrix:
                cfg:
                    - { os: jammy,    cxx: g++,          cxxflags: '-O2 -g -march=x86-64' }
        name: Deploy documentation on ${{ matrix.cfg.os }}
        runs-on: ubuntu-24.04
        container:
            image: eoshep/ubuntu-${{ matrix.cfg.os }}:7ca1af11a448277dc316037c31d448ad30bed600
        steps:
            - name: Create repository
              shell: bash
              env:
                GITHUB_ACCESS_TOKEN: "${{ secrets.GITHUB_ACCESS_TOKEN }}"
              run: |
                [[ -n ${GITHUB_ACCESS_TOKEN} ]] || exit 0
                git clone -o gh "https://eos:${GITHUB_ACCESS_TOKEN}@github.com/eos/doc" _build/doc/html

            - name: Download documentation as artifact
              uses: actions/download-artifact@v4
              with:
                name: eos-doc-${{ github.sha }}

            - name: Deploy documentation
              shell: bash
              env:
                GITHUB_ACCESS_TOKEN: "${{ secrets.GITHUB_ACCESS_TOKEN }}"
              run: |
                [[ -n ${GITHUB_ACCESS_TOKEN} ]] || exit 0
                tar xf doc.tar
                pushd _build/doc/html
                git config user.email "eos-developers@googlegroups.com"
                git config user.name  "EOS"
                git add --all
                git commit --allow-empty -m "Updating documentation based on EOS revision ${{ github.sha }}"
                # only push if running for the release branch or for a versioned release
                if [[ ${GITHUB_REF#refs/heads/} == "release" || ${GITHUB_REF#refs/tags/v} != ${GITHUB_REF} ]] ; then
                    git push
                fi
                popd
